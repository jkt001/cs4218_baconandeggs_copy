
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test001"); }


    sg.edu.nus.comp.cs4218.impl.app.DateApplication dateApplication0 = new sg.edu.nus.comp.cs4218.impl.app.DateApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    java.io.InputStream inputStream5 = null;
    java.io.OutputStream outputStream6 = null;
    // The following exception was thrown during execution in test generation
    try {
      dateApplication0.run(str_array3, inputStream5, outputStream6);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException");
    } catch (sg.edu.nus.comp.cs4218.exception.DateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.DateException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test002"); }


    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication0 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    java.lang.String str6 = calApplication1.printCalForYear(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication1.printCalForYear(str_array9);
    java.io.InputStream inputStream12 = null;
    java.io.OutputStream outputStream13 = null;
    // The following exception was thrown during execution in test generation
    try {
      echoApplication0.run(str_array9, inputStream12, outputStream13);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.EchoException");
    } catch (sg.edu.nus.comp.cs4218.exception.EchoException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.EchoException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.EchoException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test003"); }


    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array2 = new java.lang.String[] { "hi!" };
    java.lang.String str3 = commApplication0.commOnlySecond(str_array2);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication4 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array6 = new java.lang.String[] { "" };
    java.lang.String str7 = calApplication4.printCalForYearMondayFirst(str_array6);
    java.io.InputStream inputStream8 = null;
    java.io.OutputStream outputStream9 = null;
    // The following exception was thrown during execution in test generation
    try {
      commApplication0.run(str_array6, inputStream8, outputStream9);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CommException");
    } catch (sg.edu.nus.comp.cs4218.exception.CommException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.CommException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CommException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str3.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str7);

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test004"); }


    sg.edu.nus.comp.cs4218.impl.app.DateApplication dateApplication0 = new sg.edu.nus.comp.cs4218.impl.app.DateApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    java.lang.String str6 = calApplication1.printCalForYear(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication1.printCalForYear(str_array9);
    java.io.InputStream inputStream12 = null;
    java.io.OutputStream outputStream13 = null;
    // The following exception was thrown during execution in test generation
    try {
      dateApplication0.run(str_array9, inputStream12, outputStream13);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException");
    } catch (sg.edu.nus.comp.cs4218.exception.DateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.DateException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test005"); }


    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array2 = new java.lang.String[] { "hi!" };
    java.lang.String str3 = commApplication0.commOnlySecond(str_array2);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication4 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array6 = new java.lang.String[] { "" };
    java.lang.String str7 = calApplication4.printCalForYearMondayFirst(str_array6);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = calApplication8.printCalForYearMondayFirst(str_array10);
    java.lang.String str12 = calApplication4.printCal(str_array10);
    java.io.InputStream inputStream13 = null;
    java.io.OutputStream outputStream14 = null;
    // The following exception was thrown during execution in test generation
    try {
      commApplication0.run(str_array10, inputStream13, outputStream14);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CommException");
    } catch (sg.edu.nus.comp.cs4218.exception.CommException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.CommException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CommException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str3.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test006"); }


    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    java.lang.String str6 = calApplication1.printCalForYear(str_array4);
    java.lang.String str7 = commApplication0.commOnlySecond(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array11 = new java.lang.String[] { "hi!" };
    java.lang.String str12 = commApplication9.commOnlySecond(str_array11);
    java.lang.String str13 = calApplication8.printCalForYear(str_array11);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "hi!" };
    java.lang.String str17 = commApplication14.commOnlySecond(str_array16);
    java.lang.String str18 = calApplication8.printCalForYear(str_array16);
    java.io.InputStream inputStream19 = null;
    java.io.OutputStream outputStream20 = null;
    // The following exception was thrown during execution in test generation
    try {
      commApplication0.run(str_array16, inputStream19, outputStream20);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CommException");
    } catch (sg.edu.nus.comp.cs4218.exception.CommException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.CommException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CommException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str7.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str17.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test007"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication12.printCalForYear(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!" };
    java.lang.String str21 = commApplication18.commOnlySecond(str_array20);
    java.lang.String str22 = calApplication12.printCalForYear(str_array20);
    java.util.List list23 = sortApplication6.sortNumbersSpecialChars(str_array20);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = calApplication25.printCalForYearMondayFirst(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array31 = new java.lang.String[] { "" };
    java.lang.String str32 = calApplication29.printCalForYearMondayFirst(str_array31);
    java.lang.String str33 = calApplication25.printCal(str_array31);
    java.lang.String str34 = calApplication24.printCal(str_array31);
    java.util.List list35 = sortApplication6.numericalSortCapitalNumbersSpecialChars(str_array31);
    java.util.List list36 = sortApplication0.numericalSortCapitalNumbersSpecialChars(str_array31);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "" };
    java.lang.String str40 = calApplication37.printCalForYearMondayFirst(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "hi!" };
    java.lang.String str44 = commApplication41.commOnlySecond(str_array43);
    java.lang.String str45 = calApplication37.printCalWithMondayFirst(str_array43);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication46 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array49 = new java.lang.String[] { "" };
    java.lang.String str50 = calApplication47.printCalForYearMondayFirst(str_array49);
    java.util.List list51 = sortApplication46.sortCapitalNumbersSpecialChars(str_array49);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication52 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array55 = new java.lang.String[] { "" };
    java.lang.String str56 = calApplication53.printCalForYearMondayFirst(str_array55);
    java.util.List list57 = sortApplication52.sortCapitalNumbersSpecialChars(str_array55);
    java.util.List list58 = sortApplication46.numericalSortSimpleSpecialChars(str_array55);
    java.lang.String str59 = calApplication37.printCalForYear(str_array55);
    java.io.InputStream inputStream60 = null;
    java.io.OutputStream outputStream61 = null;
    // The following exception was thrown during execution in test generation
    try {
      sortApplication0.run(str_array55, inputStream60, outputStream61);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
    } catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.SortException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str44.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test008"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array14 = new java.lang.String[] { "hi!" };
    java.lang.String str15 = commApplication12.commOnlySecond(str_array14);
    java.lang.String str16 = calApplication6.printCalForYear(str_array14);
    java.util.List list17 = sortApplication0.sortNumbersSpecialChars(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication18 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = calApplication19.printCalForYearMondayFirst(str_array21);
    java.util.List list23 = sortApplication18.sortCapitalNumbersSpecialChars(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication24 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = calApplication25.printCalForYearMondayFirst(str_array27);
    java.util.List list29 = sortApplication24.sortCapitalNumbersSpecialChars(str_array27);
    java.util.List list30 = sortApplication18.numericalSortSimpleSpecialChars(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "hi!" };
    java.lang.String str36 = commApplication33.commOnlySecond(str_array35);
    java.lang.String str37 = calApplication32.printCalForYear(str_array35);
    java.lang.String str38 = commApplication31.commOnlySecond(str_array35);
    java.util.List list39 = sortApplication18.sortAll(str_array35);
    java.util.List list40 = sortApplication0.numericalSortNumbersSpecialChars(str_array35);
    java.lang.String[] str_array41 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list42 = sortApplication0.sortStringsCapital(str_array41);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str15.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str36.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str38.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test009"); }


    sg.edu.nus.comp.cs4218.impl.app.DateApplication dateApplication0 = new sg.edu.nus.comp.cs4218.impl.app.DateApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    java.util.List list6 = sortApplication1.sortSimpleCapitalSpecialChars(str_array4);
    java.io.InputStream inputStream7 = null;
    java.io.OutputStream outputStream8 = null;
    // The following exception was thrown during execution in test generation
    try {
      dateApplication0.run(str_array4, inputStream7, outputStream8);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException");
    } catch (sg.edu.nus.comp.cs4218.exception.DateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.DateException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test010"); }


    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication0 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication7.printCalForYear(str_array15);
    java.util.List list18 = sortApplication1.sortNumbersSpecialChars(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = calApplication20.printCalForYearMondayFirst(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = calApplication24.printCalForYearMondayFirst(str_array26);
    java.lang.String str28 = calApplication20.printCal(str_array26);
    java.lang.String str29 = calApplication19.printCal(str_array26);
    java.util.List list30 = sortApplication1.numericalSortCapitalNumbersSpecialChars(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication31 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "" };
    java.lang.String str35 = calApplication32.printCalForYearMondayFirst(str_array34);
    java.util.List list36 = sortApplication31.sortCapitalNumbersSpecialChars(str_array34);
    java.util.List list37 = sortApplication1.numericalSortNumbersSpecialChars(str_array34);
    java.io.InputStream inputStream38 = null;
    java.io.OutputStream outputStream39 = null;
    // The following exception was thrown during execution in test generation
    try {
      echoApplication0.run(str_array34, inputStream38, outputStream39);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.EchoException");
    } catch (sg.edu.nus.comp.cs4218.exception.EchoException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.EchoException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.EchoException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test011"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = calApplication8.printCalForYearMondayFirst(str_array10);
    java.util.List list12 = sortApplication7.sortCapitalNumbersSpecialChars(str_array10);
    java.util.List list13 = sortApplication1.numericalSortSimpleSpecialChars(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "hi!" };
    java.lang.String str19 = commApplication16.commOnlySecond(str_array18);
    java.lang.String str20 = calApplication15.printCalForYear(str_array18);
    java.lang.String str21 = commApplication14.commOnlySecond(str_array18);
    java.util.List list22 = sortApplication1.sortAll(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication24 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = calApplication25.printCalForYearMondayFirst(str_array27);
    java.util.List list29 = sortApplication24.sortCapitalNumbersSpecialChars(str_array27);
    java.util.List list30 = sortApplication23.sortSimpleSpecialChars(str_array27);
    java.util.List list31 = sortApplication1.numericalSortCapitalSpecialChars(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "hi!" };
    java.lang.String str37 = commApplication34.commOnlySecond(str_array36);
    java.lang.String str38 = calApplication33.printCalForYear(str_array36);
    java.lang.String str39 = commApplication32.commOnlySecond(str_array36);
    java.util.List list40 = sortApplication1.sortAll(str_array36);
    java.lang.String str41 = bcApplication0.equalEqual(str_array36);
    java.lang.String[] str_array42 = null;
    java.lang.String str43 = bcApplication0.greaterThanOrEqual(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str37.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test012"); }


    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    java.lang.String str6 = calApplication1.printCalForYear(str_array4);
    java.lang.String str7 = commApplication0.commOnlySecond(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array12 = new java.lang.String[] { "hi!" };
    java.lang.String str13 = commApplication10.commOnlySecond(str_array12);
    java.lang.String str14 = calApplication9.printCalForYear(str_array12);
    java.lang.String str15 = commApplication8.commOnlySecond(str_array12);
    java.lang.String str16 = commApplication0.commAllMatches(str_array12);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "" };
    java.lang.String str20 = calApplication17.printCalForYearMondayFirst(str_array19);
    java.io.InputStream inputStream21 = null;
    java.io.OutputStream outputStream22 = null;
    // The following exception was thrown during execution in test generation
    try {
      commApplication0.run(str_array19, inputStream21, outputStream22);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CommException");
    } catch (sg.edu.nus.comp.cs4218.exception.CommException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.CommException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CommException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str7.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str15.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test013"); }


    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication0 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication2 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = calApplication3.printCalForYearMondayFirst(str_array5);
    java.util.List list7 = sortApplication2.sortCapitalNumbersSpecialChars(str_array5);
    java.util.List list8 = sortApplication1.sortSimpleSpecialChars(str_array5);
    java.io.InputStream inputStream9 = null;
    java.io.OutputStream outputStream10 = null;
    // The following exception was thrown during execution in test generation
    try {
      echoApplication0.run(str_array5, inputStream9, outputStream10);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.EchoException");
    } catch (sg.edu.nus.comp.cs4218.exception.EchoException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.EchoException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.EchoException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test014"); }


    sg.edu.nus.comp.cs4218.impl.app.HeadApplication headApplication0 = new sg.edu.nus.comp.cs4218.impl.app.HeadApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "hi!" };
    java.lang.String str9 = commApplication6.commOnlySecond(str_array8);
    java.lang.String str10 = calApplication5.printCalForYear(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array13 = new java.lang.String[] { "hi!" };
    java.lang.String str14 = commApplication11.commOnlySecond(str_array13);
    java.lang.String str15 = calApplication5.printCalForYear(str_array13);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication16 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication17 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array20 = new java.lang.String[] { "" };
    java.lang.String str21 = calApplication18.printCalForYearMondayFirst(str_array20);
    java.util.List list22 = sortApplication17.sortCapitalNumbersSpecialChars(str_array20);
    java.util.List list23 = sortApplication16.sortSimpleSpecialChars(str_array20);
    java.lang.String str24 = calApplication5.printCal(str_array20);
    java.lang.String str25 = commApplication1.commOnlySecond(str_array20);
    java.io.InputStream inputStream26 = null;
    java.io.OutputStream outputStream27 = null;
    // The following exception was thrown during execution in test generation
    try {
      headApplication0.run(str_array20, inputStream26, outputStream27);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.HeadException");
    } catch (sg.edu.nus.comp.cs4218.exception.HeadException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.HeadException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.HeadException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str9.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str14.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str25.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test015"); }


    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication0 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = calApplication8.printCalForYearMondayFirst(str_array10);
    java.util.List list12 = sortApplication7.sortCapitalNumbersSpecialChars(str_array10);
    java.util.List list13 = sortApplication1.numericalSortSimpleSpecialChars(str_array10);
    java.io.InputStream inputStream14 = null;
    java.io.OutputStream outputStream15 = null;
    // The following exception was thrown during execution in test generation
    try {
      echoApplication0.run(str_array10, inputStream14, outputStream15);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.EchoException");
    } catch (sg.edu.nus.comp.cs4218.exception.EchoException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.EchoException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.EchoException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test016"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = calApplication8.printCalForYearMondayFirst(str_array10);
    java.util.List list12 = sortApplication7.sortCapitalNumbersSpecialChars(str_array10);
    java.util.List list13 = sortApplication1.numericalSortSimpleSpecialChars(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "hi!" };
    java.lang.String str19 = commApplication16.commOnlySecond(str_array18);
    java.lang.String str20 = calApplication15.printCalForYear(str_array18);
    java.lang.String str21 = commApplication14.commOnlySecond(str_array18);
    java.util.List list22 = sortApplication1.sortAll(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication24 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = calApplication25.printCalForYearMondayFirst(str_array27);
    java.util.List list29 = sortApplication24.sortCapitalNumbersSpecialChars(str_array27);
    java.util.List list30 = sortApplication23.sortSimpleSpecialChars(str_array27);
    java.util.List list31 = sortApplication1.numericalSortCapitalSpecialChars(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "hi!" };
    java.lang.String str37 = commApplication34.commOnlySecond(str_array36);
    java.lang.String str38 = calApplication33.printCalForYear(str_array36);
    java.lang.String str39 = commApplication32.commOnlySecond(str_array36);
    java.util.List list40 = sortApplication1.sortAll(str_array36);
    java.lang.String str41 = bcApplication0.subtract(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str37.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test017"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    java.util.List list5 = sortApplication0.sortSimpleCapitalSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication12.printCalForYear(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!" };
    java.lang.String str21 = commApplication18.commOnlySecond(str_array20);
    java.lang.String str22 = calApplication12.printCalForYear(str_array20);
    java.util.List list23 = sortApplication6.sortNumbersSpecialChars(str_array20);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "hi!" };
    java.lang.String str28 = commApplication25.commOnlySecond(str_array27);
    java.lang.String str29 = calApplication24.printCalForYear(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "hi!" };
    java.lang.String str33 = commApplication30.commOnlySecond(str_array32);
    java.lang.String str34 = calApplication24.printCalForYear(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication35 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication36 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "" };
    java.lang.String str40 = calApplication37.printCalForYearMondayFirst(str_array39);
    java.util.List list41 = sortApplication36.sortCapitalNumbersSpecialChars(str_array39);
    java.util.List list42 = sortApplication35.sortSimpleSpecialChars(str_array39);
    java.lang.String str43 = calApplication24.printCal(str_array39);
    java.util.List list44 = sortApplication6.sortStringsSimple(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication45 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array48 = new java.lang.String[] { "" };
    java.lang.String str49 = calApplication46.printCalForYearMondayFirst(str_array48);
    java.util.List list50 = sortApplication45.sortCapitalNumbersSpecialChars(str_array48);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication51 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array54 = new java.lang.String[] { "" };
    java.lang.String str55 = calApplication52.printCalForYearMondayFirst(str_array54);
    java.util.List list56 = sortApplication51.sortCapitalNumbersSpecialChars(str_array54);
    java.util.List list57 = sortApplication45.numericalSortSimpleSpecialChars(str_array54);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication59 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array62 = new java.lang.String[] { "hi!" };
    java.lang.String str63 = commApplication60.commOnlySecond(str_array62);
    java.lang.String str64 = calApplication59.printCalForYear(str_array62);
    java.lang.String str65 = commApplication58.commOnlySecond(str_array62);
    java.util.List list66 = sortApplication45.sortAll(str_array62);
    java.util.List list67 = sortApplication6.numericalSortSimpleNumbers(str_array62);
    java.util.List list68 = sortApplication0.numericalSortSimpleCapital(str_array62);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication69 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array71 = new java.lang.String[] { "" };
    java.lang.String str72 = calApplication69.printCalForYearMondayFirst(str_array71);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication73 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array75 = new java.lang.String[] { "hi!" };
    java.lang.String str76 = commApplication73.commOnlySecond(str_array75);
    java.lang.String str77 = calApplication69.printCalWithMondayFirst(str_array75);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication78 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication79 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array81 = new java.lang.String[] { "" };
    java.lang.String str82 = calApplication79.printCalForYearMondayFirst(str_array81);
    java.util.List list83 = sortApplication78.sortCapitalNumbersSpecialChars(str_array81);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication84 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication85 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array87 = new java.lang.String[] { "" };
    java.lang.String str88 = calApplication85.printCalForYearMondayFirst(str_array87);
    java.util.List list89 = sortApplication84.sortCapitalNumbersSpecialChars(str_array87);
    java.util.List list90 = sortApplication78.numericalSortSimpleSpecialChars(str_array87);
    java.lang.String str91 = calApplication69.printCalForYear(str_array87);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication92 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication93 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array95 = new java.lang.String[] { "hi!" };
    java.lang.String str96 = commApplication93.commOnlySecond(str_array95);
    java.lang.String str97 = calApplication92.printCalForYear(str_array95);
    java.lang.String str98 = calApplication69.printCalForYearMondayFirst(str_array95);
    java.util.List list99 = sortApplication0.numericalSortNumbers(str_array95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str28.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str33.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str63.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str65.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str76.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str96 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str96.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list99);

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test018"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    java.util.List list12 = sortApplication0.numericalSortSimpleSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!" };
    java.lang.String str18 = commApplication15.commOnlySecond(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    java.lang.String str20 = commApplication13.commOnlySecond(str_array17);
    java.util.List list21 = sortApplication0.sortAll(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication22 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = calApplication24.printCalForYearMondayFirst(str_array26);
    java.util.List list28 = sortApplication23.sortCapitalNumbersSpecialChars(str_array26);
    java.util.List list29 = sortApplication22.sortSimpleSpecialChars(str_array26);
    java.util.List list30 = sortApplication0.numericalSortCapitalSpecialChars(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "hi!" };
    java.lang.String str36 = commApplication33.commOnlySecond(str_array35);
    java.lang.String str37 = calApplication32.printCalForYear(str_array35);
    java.lang.String str38 = commApplication31.commOnlySecond(str_array35);
    java.util.List list39 = sortApplication0.sortAll(str_array35);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array42 = new java.lang.String[] { "hi!" };
    java.lang.String str43 = commApplication40.commOnlySecond(str_array42);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array48 = new java.lang.String[] { "hi!" };
    java.lang.String str49 = commApplication46.commOnlySecond(str_array48);
    java.lang.String str50 = calApplication45.printCalForYear(str_array48);
    java.lang.String str51 = commApplication44.commOnlySecond(str_array48);
    java.lang.String str52 = commApplication40.commOnlySecond(str_array48);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication53 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication54 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "" };
    java.lang.String str58 = calApplication55.printCalForYearMondayFirst(str_array57);
    java.util.List list59 = sortApplication54.sortCapitalNumbersSpecialChars(str_array57);
    java.util.List list60 = sortApplication53.sortSimpleSpecialChars(str_array57);
    java.lang.String str61 = commApplication40.commAllMatches(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication62 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication63 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array66 = new java.lang.String[] { "" };
    java.lang.String str67 = calApplication64.printCalForYearMondayFirst(str_array66);
    java.util.List list68 = sortApplication63.sortCapitalNumbersSpecialChars(str_array66);
    java.util.List list69 = sortApplication62.sortSimpleSpecialChars(str_array66);
    java.lang.String str70 = commApplication40.commAllMatches(str_array66);
    java.util.List list71 = sortApplication0.numericalSortAll(str_array66);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication72 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication73 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication74 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array76 = new java.lang.String[] { "" };
    java.lang.String str77 = calApplication74.printCalForYearMondayFirst(str_array76);
    java.util.List list78 = sortApplication73.sortCapitalNumbersSpecialChars(str_array76);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication79 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication80 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array82 = new java.lang.String[] { "" };
    java.lang.String str83 = calApplication80.printCalForYearMondayFirst(str_array82);
    java.util.List list84 = sortApplication79.sortCapitalNumbersSpecialChars(str_array82);
    java.util.List list85 = sortApplication73.numericalSortSimpleSpecialChars(str_array82);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication86 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication87 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication88 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array90 = new java.lang.String[] { "hi!" };
    java.lang.String str91 = commApplication88.commOnlySecond(str_array90);
    java.lang.String str92 = calApplication87.printCalForYear(str_array90);
    java.lang.String str93 = commApplication86.commOnlySecond(str_array90);
    java.util.List list94 = sortApplication73.sortAll(str_array90);
    java.util.List list95 = sortApplication72.sortSimpleCapitalSpecialChars(str_array90);
    java.util.List list96 = sortApplication0.sortNumbers(str_array90);
    java.lang.String[] str_array97 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list98 = sortApplication0.sortStringsSimple(str_array97);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str36.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str38.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str43.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str49.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str51.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str52.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str61.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str70.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str91 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str91.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str93 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str93.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list96);

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test019"); }


    sg.edu.nus.comp.cs4218.impl.app.FmtApplication fmtApplication0 = new sg.edu.nus.comp.cs4218.impl.app.FmtApplication();
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication1 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication2 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication3 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication4 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array6 = new java.lang.String[] { "" };
    java.lang.String str7 = calApplication4.printCalForYearMondayFirst(str_array6);
    java.util.List list8 = sortApplication3.sortCapitalNumbersSpecialChars(str_array6);
    java.util.List list9 = sortApplication2.sortSimpleSpecialChars(str_array6);
    java.io.InputStream inputStream10 = null;
    java.io.OutputStream outputStream11 = null;
    bcApplication1.run(str_array6, inputStream10, outputStream11);
    java.io.InputStream inputStream13 = null;
    java.io.OutputStream outputStream14 = null;
    // The following exception was thrown during execution in test generation
    try {
      fmtApplication0.run(str_array6, inputStream13, outputStream14);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.FmtException");
    } catch (sg.edu.nus.comp.cs4218.exception.FmtException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.FmtException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.FmtException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test020"); }


    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array2 = new java.lang.String[] { "hi!" };
    java.lang.String str3 = commApplication0.commOnlySecond(str_array2);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication4 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "hi!" };
    java.lang.String str9 = commApplication6.commOnlySecond(str_array8);
    java.lang.String str10 = calApplication5.printCalForYear(str_array8);
    java.lang.String str11 = commApplication4.commOnlySecond(str_array8);
    java.lang.String str12 = commApplication0.commOnlySecond(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication13 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "" };
    java.lang.String str17 = calApplication14.printCalForYearMondayFirst(str_array16);
    java.util.List list18 = sortApplication13.sortCapitalNumbersSpecialChars(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "hi!" };
    java.lang.String str23 = commApplication20.commOnlySecond(str_array22);
    java.lang.String str24 = calApplication19.printCalForYear(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "hi!" };
    java.lang.String str28 = commApplication25.commOnlySecond(str_array27);
    java.lang.String str29 = calApplication19.printCalForYear(str_array27);
    java.util.List list30 = sortApplication13.sortNumbersSpecialChars(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication31 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication32 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "" };
    java.lang.String str36 = calApplication33.printCalForYearMondayFirst(str_array35);
    java.util.List list37 = sortApplication32.sortCapitalNumbersSpecialChars(str_array35);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array41 = new java.lang.String[] { "hi!" };
    java.lang.String str42 = commApplication39.commOnlySecond(str_array41);
    java.lang.String str43 = calApplication38.printCalForYear(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "hi!" };
    java.lang.String str47 = commApplication44.commOnlySecond(str_array46);
    java.lang.String str48 = calApplication38.printCalForYear(str_array46);
    java.util.List list49 = sortApplication32.sortNumbersSpecialChars(str_array46);
    java.lang.String str50 = bcApplication31.notEqual(str_array46);
    java.util.List list51 = sortApplication13.sortSimpleNumbers(str_array46);
    java.io.InputStream inputStream52 = null;
    java.io.OutputStream outputStream53 = null;
    // The following exception was thrown during execution in test generation
    try {
      commApplication0.run(str_array46, inputStream52, outputStream53);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CommException");
    } catch (sg.edu.nus.comp.cs4218.exception.CommException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.CommException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CommException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str3.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str9.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str23.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str28.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str42.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str47.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test021"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication7.printCalForYear(str_array15);
    java.util.List list18 = sortApplication1.sortNumbersSpecialChars(str_array15);
    java.lang.String str19 = bcApplication0.notEqual(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication20 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array23 = new java.lang.String[] { "hi!" };
    java.lang.String str24 = commApplication21.commOnlySecond(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array29 = new java.lang.String[] { "hi!" };
    java.lang.String str30 = commApplication27.commOnlySecond(str_array29);
    java.lang.String str31 = calApplication26.printCalForYear(str_array29);
    java.lang.String str32 = commApplication25.commOnlySecond(str_array29);
    java.lang.String str33 = commApplication21.commOnlySecond(str_array29);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication34 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication35 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array38 = new java.lang.String[] { "" };
    java.lang.String str39 = calApplication36.printCalForYearMondayFirst(str_array38);
    java.util.List list40 = sortApplication35.sortCapitalNumbersSpecialChars(str_array38);
    java.util.List list41 = sortApplication34.sortSimpleSpecialChars(str_array38);
    java.lang.String str42 = commApplication21.commAllMatches(str_array38);
    java.lang.String str43 = bcApplication20.lessThan(str_array38);
    java.lang.String str44 = bcApplication0.pow(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str24.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str30.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str32.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str33.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str42.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test022"); }


    sg.edu.nus.comp.cs4218.impl.app.HeadApplication headApplication0 = new sg.edu.nus.comp.cs4218.impl.app.HeadApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication7.printCalForYear(str_array15);
    java.util.List list18 = sortApplication1.sortNumbersSpecialChars(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication19 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication20 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array23 = new java.lang.String[] { "" };
    java.lang.String str24 = calApplication21.printCalForYearMondayFirst(str_array23);
    java.util.List list25 = sortApplication20.sortCapitalNumbersSpecialChars(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array29 = new java.lang.String[] { "hi!" };
    java.lang.String str30 = commApplication27.commOnlySecond(str_array29);
    java.lang.String str31 = calApplication26.printCalForYear(str_array29);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "hi!" };
    java.lang.String str35 = commApplication32.commOnlySecond(str_array34);
    java.lang.String str36 = calApplication26.printCalForYear(str_array34);
    java.util.List list37 = sortApplication20.sortNumbersSpecialChars(str_array34);
    java.lang.String str38 = bcApplication19.notEqual(str_array34);
    java.util.List list39 = sortApplication1.sortSimpleNumbers(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "hi!" };
    java.lang.String str44 = commApplication41.commOnlySecond(str_array43);
    java.lang.String str45 = calApplication40.printCalForYear(str_array43);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array48 = new java.lang.String[] { "hi!" };
    java.lang.String str49 = commApplication46.commOnlySecond(str_array48);
    java.lang.String str50 = calApplication40.printCalForYear(str_array48);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication51 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication52 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array55 = new java.lang.String[] { "" };
    java.lang.String str56 = calApplication53.printCalForYearMondayFirst(str_array55);
    java.util.List list57 = sortApplication52.sortCapitalNumbersSpecialChars(str_array55);
    java.util.List list58 = sortApplication51.sortSimpleSpecialChars(str_array55);
    java.lang.String str59 = calApplication40.printCal(str_array55);
    java.util.List list60 = sortApplication1.sortStringsCapital(str_array55);
    java.io.InputStream inputStream61 = null;
    java.io.OutputStream outputStream62 = null;
    // The following exception was thrown during execution in test generation
    try {
      headApplication0.run(str_array55, inputStream61, outputStream62);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.HeadException");
    } catch (sg.edu.nus.comp.cs4218.exception.HeadException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.HeadException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.HeadException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str30.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str35.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str44.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str49.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test023"); }


    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication7.printCalForYear(str_array15);
    java.util.List list18 = sortApplication1.sortNumbersSpecialChars(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication19 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = calApplication20.printCalForYearMondayFirst(str_array22);
    java.util.List list24 = sortApplication19.sortCapitalNumbersSpecialChars(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!" };
    java.lang.String str29 = commApplication26.commOnlySecond(str_array28);
    java.lang.String str30 = calApplication25.printCalForYear(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "hi!" };
    java.lang.String str34 = commApplication31.commOnlySecond(str_array33);
    java.lang.String str35 = calApplication25.printCalForYear(str_array33);
    java.util.List list36 = sortApplication19.sortNumbersSpecialChars(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication37 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "" };
    java.lang.String str41 = calApplication38.printCalForYearMondayFirst(str_array40);
    java.util.List list42 = sortApplication37.sortCapitalNumbersSpecialChars(str_array40);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication43 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = calApplication44.printCalForYearMondayFirst(str_array46);
    java.util.List list48 = sortApplication43.sortCapitalNumbersSpecialChars(str_array46);
    java.util.List list49 = sortApplication37.numericalSortSimpleSpecialChars(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array54 = new java.lang.String[] { "hi!" };
    java.lang.String str55 = commApplication52.commOnlySecond(str_array54);
    java.lang.String str56 = calApplication51.printCalForYear(str_array54);
    java.lang.String str57 = commApplication50.commOnlySecond(str_array54);
    java.util.List list58 = sortApplication37.sortAll(str_array54);
    java.util.List list59 = sortApplication19.numericalSortNumbersSpecialChars(str_array54);
    java.util.List list60 = sortApplication1.numericalSortNumbersSpecialChars(str_array54);
    java.io.InputStream inputStream61 = null;
    java.io.OutputStream outputStream62 = null;
    // The following exception was thrown during execution in test generation
    try {
      commApplication0.run(str_array54, inputStream61, outputStream62);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CommException");
    } catch (sg.edu.nus.comp.cs4218.exception.CommException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.CommException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CommException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str55.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str57.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test024"); }


    sg.edu.nus.comp.cs4218.impl.app.FmtApplication fmtApplication0 = new sg.edu.nus.comp.cs4218.impl.app.FmtApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    java.lang.String str6 = calApplication1.printCalForYear(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication1.printCalForYear(str_array9);
    java.io.InputStream inputStream12 = null;
    java.io.OutputStream outputStream13 = null;
    // The following exception was thrown during execution in test generation
    try {
      fmtApplication0.run(str_array9, inputStream12, outputStream13);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.FmtException");
    } catch (sg.edu.nus.comp.cs4218.exception.FmtException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.FmtException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.FmtException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test025"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    java.util.List list5 = sortApplication0.sortSimpleCapitalSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "" };
    java.lang.String str9 = calApplication6.printCalForYearMondayFirst(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array12 = new java.lang.String[] { "hi!" };
    java.lang.String str13 = commApplication10.commOnlySecond(str_array12);
    java.lang.String str14 = calApplication6.printCalWithMondayFirst(str_array12);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication15 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "" };
    java.lang.String str19 = calApplication16.printCalForYearMondayFirst(str_array18);
    java.util.List list20 = sortApplication15.sortCapitalNumbersSpecialChars(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication21 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array24 = new java.lang.String[] { "" };
    java.lang.String str25 = calApplication22.printCalForYearMondayFirst(str_array24);
    java.util.List list26 = sortApplication21.sortCapitalNumbersSpecialChars(str_array24);
    java.util.List list27 = sortApplication15.numericalSortSimpleSpecialChars(str_array24);
    java.lang.String str28 = calApplication6.printCalForYear(str_array24);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "hi!" };
    java.lang.String str33 = commApplication30.commOnlySecond(str_array32);
    java.lang.String str34 = calApplication29.printCalForYear(str_array32);
    java.lang.String str35 = calApplication6.printCalForYearMondayFirst(str_array32);
    java.util.List list36 = sortApplication0.sortCapitalNumbersSpecialChars(str_array32);
    java.lang.String[] str_array37 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list38 = sortApplication0.numericalSortCapitalNumbers(str_array37);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str33.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test026"); }


    sg.edu.nus.comp.cs4218.impl.app.FmtApplication fmtApplication0 = new sg.edu.nus.comp.cs4218.impl.app.FmtApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "hi!" };
    java.lang.String str9 = commApplication6.commOnlySecond(str_array8);
    java.lang.String str10 = calApplication5.printCalForYear(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array13 = new java.lang.String[] { "hi!" };
    java.lang.String str14 = commApplication11.commOnlySecond(str_array13);
    java.lang.String str15 = calApplication5.printCalForYear(str_array13);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication16 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication17 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array20 = new java.lang.String[] { "" };
    java.lang.String str21 = calApplication18.printCalForYearMondayFirst(str_array20);
    java.util.List list22 = sortApplication17.sortCapitalNumbersSpecialChars(str_array20);
    java.util.List list23 = sortApplication16.sortSimpleSpecialChars(str_array20);
    java.lang.String str24 = calApplication5.printCal(str_array20);
    java.lang.String str25 = commApplication1.commOnlySecond(str_array20);
    java.io.InputStream inputStream26 = null;
    java.io.OutputStream outputStream27 = null;
    // The following exception was thrown during execution in test generation
    try {
      fmtApplication0.run(str_array20, inputStream26, outputStream27);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.FmtException");
    } catch (sg.edu.nus.comp.cs4218.exception.FmtException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.FmtException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.FmtException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str9.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str14.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str25.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test027"); }


    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array2 = new java.lang.String[] { "hi!" };
    java.lang.String str3 = commApplication0.commOnlySecond(str_array2);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication4 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "hi!" };
    java.lang.String str9 = commApplication6.commOnlySecond(str_array8);
    java.lang.String str10 = calApplication5.printCalForYear(str_array8);
    java.lang.String str11 = commApplication4.commOnlySecond(str_array8);
    java.lang.String str12 = commApplication0.commOnlySecond(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication13 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "" };
    java.lang.String str17 = calApplication14.printCalForYearMondayFirst(str_array16);
    java.util.List list18 = sortApplication13.sortCapitalNumbersSpecialChars(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication19 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = calApplication20.printCalForYearMondayFirst(str_array22);
    java.util.List list24 = sortApplication19.sortCapitalNumbersSpecialChars(str_array22);
    java.util.List list25 = sortApplication13.numericalSortSimpleSpecialChars(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array30 = new java.lang.String[] { "hi!" };
    java.lang.String str31 = commApplication28.commOnlySecond(str_array30);
    java.lang.String str32 = calApplication27.printCalForYear(str_array30);
    java.lang.String str33 = commApplication26.commOnlySecond(str_array30);
    java.util.List list34 = sortApplication13.sortAll(str_array30);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication35 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication36 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "" };
    java.lang.String str40 = calApplication37.printCalForYearMondayFirst(str_array39);
    java.util.List list41 = sortApplication36.sortCapitalNumbersSpecialChars(str_array39);
    java.util.List list42 = sortApplication35.sortSimpleSpecialChars(str_array39);
    java.util.List list43 = sortApplication13.numericalSortCapitalSpecialChars(str_array39);
    java.io.InputStream inputStream44 = null;
    java.io.OutputStream outputStream45 = null;
    // The following exception was thrown during execution in test generation
    try {
      commApplication0.run(str_array39, inputStream44, outputStream45);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CommException");
    } catch (sg.edu.nus.comp.cs4218.exception.CommException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.CommException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CommException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str3.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str9.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str31.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str33.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test028"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    java.util.List list12 = sortApplication0.numericalSortSimpleSpecialChars(str_array9);
    java.lang.String[] str_array13 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list14 = sortApplication0.sortStringsSimple(str_array13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test029"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array14 = new java.lang.String[] { "hi!" };
    java.lang.String str15 = commApplication12.commOnlySecond(str_array14);
    java.lang.String str16 = calApplication6.printCalForYear(str_array14);
    java.util.List list17 = sortApplication0.sortNumbersSpecialChars(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication18 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = calApplication19.printCalForYearMondayFirst(str_array21);
    java.util.List list23 = sortApplication18.sortCapitalNumbersSpecialChars(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "hi!" };
    java.lang.String str28 = commApplication25.commOnlySecond(str_array27);
    java.lang.String str29 = calApplication24.printCalForYear(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "hi!" };
    java.lang.String str33 = commApplication30.commOnlySecond(str_array32);
    java.lang.String str34 = calApplication24.printCalForYear(str_array32);
    java.util.List list35 = sortApplication18.sortNumbersSpecialChars(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication36 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "" };
    java.lang.String str40 = calApplication37.printCalForYearMondayFirst(str_array39);
    java.util.List list41 = sortApplication36.sortCapitalNumbersSpecialChars(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication42 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array45 = new java.lang.String[] { "" };
    java.lang.String str46 = calApplication43.printCalForYearMondayFirst(str_array45);
    java.util.List list47 = sortApplication42.sortCapitalNumbersSpecialChars(str_array45);
    java.util.List list48 = sortApplication36.numericalSortSimpleSpecialChars(str_array45);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array53 = new java.lang.String[] { "hi!" };
    java.lang.String str54 = commApplication51.commOnlySecond(str_array53);
    java.lang.String str55 = calApplication50.printCalForYear(str_array53);
    java.lang.String str56 = commApplication49.commOnlySecond(str_array53);
    java.util.List list57 = sortApplication36.sortAll(str_array53);
    java.util.List list58 = sortApplication18.numericalSortNumbersSpecialChars(str_array53);
    java.util.List list59 = sortApplication0.numericalSortNumbersSpecialChars(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication60 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array63 = new java.lang.String[] { "" };
    java.lang.String str64 = calApplication61.printCalForYearMondayFirst(str_array63);
    java.util.List list65 = sortApplication60.sortCapitalNumbersSpecialChars(str_array63);
    java.util.List list66 = sortApplication0.numericalSortStringsSimple(str_array63);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication67 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array69 = new java.lang.String[] { "hi!" };
    java.lang.String str70 = commApplication67.commOnlySecond(str_array69);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication71 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication72 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array74 = new java.lang.String[] { "hi!" };
    java.lang.String str75 = commApplication72.commOnlySecond(str_array74);
    java.lang.String str76 = calApplication71.printCalForYear(str_array74);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication77 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array79 = new java.lang.String[] { "hi!" };
    java.lang.String str80 = commApplication77.commOnlySecond(str_array79);
    java.lang.String str81 = calApplication71.printCalForYear(str_array79);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication82 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication83 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication84 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array86 = new java.lang.String[] { "" };
    java.lang.String str87 = calApplication84.printCalForYearMondayFirst(str_array86);
    java.util.List list88 = sortApplication83.sortCapitalNumbersSpecialChars(str_array86);
    java.util.List list89 = sortApplication82.sortSimpleSpecialChars(str_array86);
    java.lang.String str90 = calApplication71.printCal(str_array86);
    java.lang.String str91 = commApplication67.commOnlySecond(str_array86);
    java.util.List list92 = sortApplication0.sortSimpleCapital(str_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str15.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str28.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str33.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str54.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str56.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str70.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str75.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str80.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str91 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str91.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list92);

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test030"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array14 = new java.lang.String[] { "hi!" };
    java.lang.String str15 = commApplication12.commOnlySecond(str_array14);
    java.lang.String str16 = calApplication6.printCalForYear(str_array14);
    java.util.List list17 = sortApplication0.sortNumbersSpecialChars(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = calApplication19.printCalForYearMondayFirst(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array25 = new java.lang.String[] { "" };
    java.lang.String str26 = calApplication23.printCalForYearMondayFirst(str_array25);
    java.lang.String str27 = calApplication19.printCal(str_array25);
    java.lang.String str28 = calApplication18.printCal(str_array25);
    java.util.List list29 = sortApplication0.numericalSortCapitalNumbersSpecialChars(str_array25);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication30 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "" };
    java.lang.String str34 = calApplication31.printCalForYearMondayFirst(str_array33);
    java.util.List list35 = sortApplication30.sortCapitalNumbersSpecialChars(str_array33);
    java.util.List list36 = sortApplication0.numericalSortNumbersSpecialChars(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "hi!" };
    java.lang.String str41 = commApplication38.commOnlySecond(str_array40);
    java.lang.String str42 = calApplication37.printCalForYear(str_array40);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array45 = new java.lang.String[] { "hi!" };
    java.lang.String str46 = commApplication43.commOnlySecond(str_array45);
    java.lang.String str47 = calApplication37.printCalForYear(str_array45);
    java.io.InputStream inputStream48 = null;
    java.io.OutputStream outputStream49 = null;
    // The following exception was thrown during execution in test generation
    try {
      sortApplication0.run(str_array45, inputStream48, outputStream49);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
    } catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.SortException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str15.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str41.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str46.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test031"); }


    sg.edu.nus.comp.cs4218.impl.app.DateApplication dateApplication0 = new sg.edu.nus.comp.cs4218.impl.app.DateApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    java.lang.String str12 = commApplication5.commOnlySecond(str_array9);
    java.lang.String str13 = commApplication1.commOnlySecond(str_array9);
    java.io.InputStream inputStream14 = null;
    java.io.OutputStream outputStream15 = null;
    // The following exception was thrown during execution in test generation
    try {
      dateApplication0.run(str_array9, inputStream14, outputStream15);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException");
    } catch (sg.edu.nus.comp.cs4218.exception.DateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.DateException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test032"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array14 = new java.lang.String[] { "hi!" };
    java.lang.String str15 = commApplication12.commOnlySecond(str_array14);
    java.lang.String str16 = calApplication6.printCalForYear(str_array14);
    java.util.List list17 = sortApplication0.sortNumbersSpecialChars(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication18 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = calApplication19.printCalForYearMondayFirst(str_array21);
    java.util.List list23 = sortApplication18.sortCapitalNumbersSpecialChars(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "hi!" };
    java.lang.String str28 = commApplication25.commOnlySecond(str_array27);
    java.lang.String str29 = calApplication24.printCalForYear(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "hi!" };
    java.lang.String str33 = commApplication30.commOnlySecond(str_array32);
    java.lang.String str34 = calApplication24.printCalForYear(str_array32);
    java.util.List list35 = sortApplication18.sortNumbersSpecialChars(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication36 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "" };
    java.lang.String str40 = calApplication37.printCalForYearMondayFirst(str_array39);
    java.util.List list41 = sortApplication36.sortCapitalNumbersSpecialChars(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication42 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array45 = new java.lang.String[] { "" };
    java.lang.String str46 = calApplication43.printCalForYearMondayFirst(str_array45);
    java.util.List list47 = sortApplication42.sortCapitalNumbersSpecialChars(str_array45);
    java.util.List list48 = sortApplication36.numericalSortSimpleSpecialChars(str_array45);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array53 = new java.lang.String[] { "hi!" };
    java.lang.String str54 = commApplication51.commOnlySecond(str_array53);
    java.lang.String str55 = calApplication50.printCalForYear(str_array53);
    java.lang.String str56 = commApplication49.commOnlySecond(str_array53);
    java.util.List list57 = sortApplication36.sortAll(str_array53);
    java.util.List list58 = sortApplication18.numericalSortNumbersSpecialChars(str_array53);
    java.util.List list59 = sortApplication0.numericalSortNumbersSpecialChars(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array62 = new java.lang.String[] { "hi!" };
    java.lang.String str63 = commApplication60.commOnlySecond(str_array62);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication65 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication66 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array68 = new java.lang.String[] { "hi!" };
    java.lang.String str69 = commApplication66.commOnlySecond(str_array68);
    java.lang.String str70 = calApplication65.printCalForYear(str_array68);
    java.lang.String str71 = commApplication64.commOnlySecond(str_array68);
    java.lang.String str72 = commApplication60.commOnlySecond(str_array68);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication73 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication74 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication75 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array77 = new java.lang.String[] { "" };
    java.lang.String str78 = calApplication75.printCalForYearMondayFirst(str_array77);
    java.util.List list79 = sortApplication74.sortCapitalNumbersSpecialChars(str_array77);
    java.util.List list80 = sortApplication73.sortSimpleSpecialChars(str_array77);
    java.lang.String str81 = commApplication60.commAllMatches(str_array77);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication82 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication83 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication84 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array86 = new java.lang.String[] { "" };
    java.lang.String str87 = calApplication84.printCalForYearMondayFirst(str_array86);
    java.util.List list88 = sortApplication83.sortCapitalNumbersSpecialChars(str_array86);
    java.util.List list89 = sortApplication82.sortSimpleSpecialChars(str_array86);
    java.lang.String str90 = commApplication60.commAllMatches(str_array86);
    java.util.List list91 = sortApplication0.sortNumbers(str_array86);
    java.lang.String[] str_array92 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list93 = sortApplication0.sortCapitalNumbers(str_array92);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str15.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str28.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str33.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str54.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str56.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str63.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str69.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str71.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str72.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str81.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str90.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list91);

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test033"); }


    sg.edu.nus.comp.cs4218.impl.app.TailApplication tailApplication0 = new sg.edu.nus.comp.cs4218.impl.app.TailApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication2 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = calApplication3.printCalForYearMondayFirst(str_array5);
    java.util.List list7 = sortApplication2.sortCapitalNumbersSpecialChars(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication8 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array11 = new java.lang.String[] { "" };
    java.lang.String str12 = calApplication9.printCalForYearMondayFirst(str_array11);
    java.util.List list13 = sortApplication8.sortCapitalNumbersSpecialChars(str_array11);
    java.util.List list14 = sortApplication2.numericalSortSimpleSpecialChars(str_array11);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "hi!" };
    java.lang.String str20 = commApplication17.commOnlySecond(str_array19);
    java.lang.String str21 = calApplication16.printCalForYear(str_array19);
    java.lang.String str22 = commApplication15.commOnlySecond(str_array19);
    java.util.List list23 = sortApplication2.sortAll(str_array19);
    java.util.List list24 = sortApplication1.sortSimpleCapitalSpecialChars(str_array19);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!" };
    java.lang.String str29 = commApplication26.commOnlySecond(str_array28);
    java.lang.String str30 = calApplication25.printCalForYear(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "hi!" };
    java.lang.String str34 = commApplication31.commOnlySecond(str_array33);
    java.lang.String str35 = calApplication25.printCalForYear(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication36 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "" };
    java.lang.String str40 = calApplication37.printCalForYearMondayFirst(str_array39);
    java.util.List list41 = sortApplication36.sortCapitalNumbersSpecialChars(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array45 = new java.lang.String[] { "hi!" };
    java.lang.String str46 = commApplication43.commOnlySecond(str_array45);
    java.lang.String str47 = calApplication42.printCalForYear(str_array45);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array50 = new java.lang.String[] { "hi!" };
    java.lang.String str51 = commApplication48.commOnlySecond(str_array50);
    java.lang.String str52 = calApplication42.printCalForYear(str_array50);
    java.util.List list53 = sortApplication36.sortNumbersSpecialChars(str_array50);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "" };
    java.lang.String str58 = calApplication55.printCalForYearMondayFirst(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication59 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array61 = new java.lang.String[] { "" };
    java.lang.String str62 = calApplication59.printCalForYearMondayFirst(str_array61);
    java.lang.String str63 = calApplication55.printCal(str_array61);
    java.lang.String str64 = calApplication54.printCal(str_array61);
    java.util.List list65 = sortApplication36.numericalSortCapitalNumbersSpecialChars(str_array61);
    java.io.InputStream inputStream66 = null;
    java.io.OutputStream outputStream67 = null;
    calApplication25.run(str_array61, inputStream66, outputStream67);
    java.util.List list69 = sortApplication1.numericalSortNumbersSpecialChars(str_array61);
    java.io.InputStream inputStream70 = null;
    java.io.OutputStream outputStream71 = null;
    // The following exception was thrown during execution in test generation
    try {
      tailApplication0.run(str_array61, inputStream70, outputStream71);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException");
    } catch (sg.edu.nus.comp.cs4218.exception.TailException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.TailException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str22.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str46.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str51.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test034"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array1 = null;
    java.lang.String str2 = calApplication0.printCalForMonthYear(str_array1);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication4 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!" };
    java.lang.String str7 = commApplication4.commOnlySecond(str_array6);
    java.lang.String str8 = calApplication3.printCalForYear(str_array6);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array13 = new java.lang.String[] { "hi!" };
    java.lang.String str14 = commApplication11.commOnlySecond(str_array13);
    java.lang.String str15 = calApplication10.printCalForYear(str_array13);
    java.lang.String str16 = commApplication9.commOnlySecond(str_array13);
    java.lang.String str17 = calApplication3.printCalForMonthYearMondayFirst(str_array13);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication18 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication19 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = calApplication20.printCalForYearMondayFirst(str_array22);
    java.util.List list24 = sortApplication19.sortCapitalNumbersSpecialChars(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication25 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "" };
    java.lang.String str29 = calApplication26.printCalForYearMondayFirst(str_array28);
    java.util.List list30 = sortApplication25.sortCapitalNumbersSpecialChars(str_array28);
    java.util.List list31 = sortApplication19.numericalSortSimpleSpecialChars(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "hi!" };
    java.lang.String str37 = commApplication34.commOnlySecond(str_array36);
    java.lang.String str38 = calApplication33.printCalForYear(str_array36);
    java.lang.String str39 = commApplication32.commOnlySecond(str_array36);
    java.util.List list40 = sortApplication19.sortAll(str_array36);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication41 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication42 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array45 = new java.lang.String[] { "" };
    java.lang.String str46 = calApplication43.printCalForYearMondayFirst(str_array45);
    java.util.List list47 = sortApplication42.sortCapitalNumbersSpecialChars(str_array45);
    java.util.List list48 = sortApplication41.sortSimpleSpecialChars(str_array45);
    java.util.List list49 = sortApplication19.numericalSortCapitalSpecialChars(str_array45);
    java.lang.String str50 = bcApplication18.subtract(str_array45);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication51 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array54 = new java.lang.String[] { "" };
    java.lang.String str55 = calApplication52.printCalForYearMondayFirst(str_array54);
    java.util.List list56 = sortApplication51.sortCapitalNumbersSpecialChars(str_array54);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication57 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array60 = new java.lang.String[] { "" };
    java.lang.String str61 = calApplication58.printCalForYearMondayFirst(str_array60);
    java.util.List list62 = sortApplication57.sortCapitalNumbersSpecialChars(str_array60);
    java.util.List list63 = sortApplication51.numericalSortSimpleSpecialChars(str_array60);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication65 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication66 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array68 = new java.lang.String[] { "hi!" };
    java.lang.String str69 = commApplication66.commOnlySecond(str_array68);
    java.lang.String str70 = calApplication65.printCalForYear(str_array68);
    java.lang.String str71 = commApplication64.commOnlySecond(str_array68);
    java.util.List list72 = sortApplication51.sortAll(str_array68);
    java.lang.String str73 = bcApplication18.add(str_array68);
    java.lang.String str74 = calApplication3.printCalForYearMondayFirst(str_array68);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication75 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array77 = new java.lang.String[] { "" };
    java.lang.String str78 = calApplication75.printCalForYearMondayFirst(str_array77);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication79 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array81 = new java.lang.String[] { "hi!" };
    java.lang.String str82 = commApplication79.commOnlySecond(str_array81);
    java.lang.String str83 = calApplication75.printCalWithMondayFirst(str_array81);
    java.lang.String str84 = calApplication3.printCal(str_array81);
    java.lang.String str85 = calApplication0.printCalForYear(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str7.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str14.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str37.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str69.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str71.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str82.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str85);

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test035"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "" };
    java.lang.String str9 = calApplication6.printCalForYearMondayFirst(str_array8);
    java.util.List list10 = sortApplication0.numericalSortSimpleCapitalNumber(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication12.printCalForYear(str_array15);
    java.lang.String str18 = commApplication11.commOnlySecond(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication19 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication20 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array23 = new java.lang.String[] { "" };
    java.lang.String str24 = calApplication21.printCalForYearMondayFirst(str_array23);
    java.util.List list25 = sortApplication20.sortCapitalNumbersSpecialChars(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array29 = new java.lang.String[] { "hi!" };
    java.lang.String str30 = commApplication27.commOnlySecond(str_array29);
    java.lang.String str31 = calApplication26.printCalForYear(str_array29);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "hi!" };
    java.lang.String str35 = commApplication32.commOnlySecond(str_array34);
    java.lang.String str36 = calApplication26.printCalForYear(str_array34);
    java.util.List list37 = sortApplication20.sortNumbersSpecialChars(str_array34);
    java.lang.String str38 = bcApplication19.notEqual(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication39 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array42 = new java.lang.String[] { "" };
    java.lang.String str43 = calApplication40.printCalForYearMondayFirst(str_array42);
    java.util.List list44 = sortApplication39.sortCapitalNumbersSpecialChars(str_array42);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication45 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array48 = new java.lang.String[] { "" };
    java.lang.String str49 = calApplication46.printCalForYearMondayFirst(str_array48);
    java.util.List list50 = sortApplication45.sortCapitalNumbersSpecialChars(str_array48);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array54 = new java.lang.String[] { "hi!" };
    java.lang.String str55 = commApplication52.commOnlySecond(str_array54);
    java.lang.String str56 = calApplication51.printCalForYear(str_array54);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array59 = new java.lang.String[] { "hi!" };
    java.lang.String str60 = commApplication57.commOnlySecond(str_array59);
    java.lang.String str61 = calApplication51.printCalForYear(str_array59);
    java.util.List list62 = sortApplication45.sortNumbersSpecialChars(str_array59);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication63 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array66 = new java.lang.String[] { "" };
    java.lang.String str67 = calApplication64.printCalForYearMondayFirst(str_array66);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array70 = new java.lang.String[] { "" };
    java.lang.String str71 = calApplication68.printCalForYearMondayFirst(str_array70);
    java.lang.String str72 = calApplication64.printCal(str_array70);
    java.lang.String str73 = calApplication63.printCal(str_array70);
    java.util.List list74 = sortApplication45.numericalSortCapitalNumbersSpecialChars(str_array70);
    java.util.List list75 = sortApplication39.numericalSortCapitalNumbersSpecialChars(str_array70);
    java.lang.String[] str_array77 = new java.lang.String[] { "comm: terminated with error message comm: file is not readable" };
    java.util.List list78 = sortApplication39.numericalSortAll(str_array77);
    java.lang.String str79 = bcApplication19.notEqual(str_array77);
    java.lang.String str80 = commApplication11.commOnlySecond(str_array77);
    java.util.List list81 = sortApplication0.numericalSortSimpleNumbers(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str30.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str35.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str55.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str60.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str80.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list81);

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test036"); }


    sg.edu.nus.comp.cs4218.impl.app.TailApplication tailApplication0 = new sg.edu.nus.comp.cs4218.impl.app.TailApplication();
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication1 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    java.lang.String str13 = commApplication6.commOnlySecond(str_array10);
    java.lang.String str14 = commApplication2.commOnlySecond(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication15 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "" };
    java.lang.String str19 = calApplication16.printCalForYearMondayFirst(str_array18);
    java.util.List list20 = sortApplication15.sortCapitalNumbersSpecialChars(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array24 = new java.lang.String[] { "hi!" };
    java.lang.String str25 = commApplication22.commOnlySecond(str_array24);
    java.lang.String str26 = calApplication21.printCalForYear(str_array24);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array29 = new java.lang.String[] { "hi!" };
    java.lang.String str30 = commApplication27.commOnlySecond(str_array29);
    java.lang.String str31 = calApplication21.printCalForYear(str_array29);
    java.util.List list32 = sortApplication15.sortNumbersSpecialChars(str_array29);
    java.lang.String str33 = commApplication2.commBothMathches(str_array29);
    java.lang.String str34 = bcApplication1.add(str_array29);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array37 = new java.lang.String[] { "hi!" };
    java.lang.String str38 = commApplication35.commOnlySecond(str_array37);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array42 = new java.lang.String[] { "hi!" };
    java.lang.String str43 = commApplication40.commOnlySecond(str_array42);
    java.lang.String str44 = calApplication39.printCalForYear(str_array42);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array47 = new java.lang.String[] { "hi!" };
    java.lang.String str48 = commApplication45.commOnlySecond(str_array47);
    java.lang.String str49 = calApplication39.printCalForYear(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication50 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication51 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array54 = new java.lang.String[] { "" };
    java.lang.String str55 = calApplication52.printCalForYearMondayFirst(str_array54);
    java.util.List list56 = sortApplication51.sortCapitalNumbersSpecialChars(str_array54);
    java.util.List list57 = sortApplication50.sortSimpleSpecialChars(str_array54);
    java.lang.String str58 = calApplication39.printCal(str_array54);
    java.lang.String str59 = commApplication35.commOnlySecond(str_array54);
    java.lang.String str60 = bcApplication1.number(str_array54);
    java.io.InputStream inputStream61 = null;
    java.io.OutputStream outputStream62 = null;
    // The following exception was thrown during execution in test generation
    try {
      tailApplication0.run(str_array54, inputStream61, outputStream62);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException");
    } catch (sg.edu.nus.comp.cs4218.exception.TailException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.TailException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str14.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str25.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str30.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str33.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str38.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str43.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str48.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str59.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test037"); }


    sg.edu.nus.comp.cs4218.impl.app.FmtApplication fmtApplication0 = new sg.edu.nus.comp.cs4218.impl.app.FmtApplication();
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication1 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication2 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = calApplication3.printCalForYearMondayFirst(str_array5);
    java.util.List list7 = sortApplication2.sortCapitalNumbersSpecialChars(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication8 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array11 = new java.lang.String[] { "" };
    java.lang.String str12 = calApplication9.printCalForYearMondayFirst(str_array11);
    java.util.List list13 = sortApplication8.sortCapitalNumbersSpecialChars(str_array11);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!" };
    java.lang.String str18 = commApplication15.commOnlySecond(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "hi!" };
    java.lang.String str23 = commApplication20.commOnlySecond(str_array22);
    java.lang.String str24 = calApplication14.printCalForYear(str_array22);
    java.util.List list25 = sortApplication8.sortNumbersSpecialChars(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array29 = new java.lang.String[] { "" };
    java.lang.String str30 = calApplication27.printCalForYearMondayFirst(str_array29);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "" };
    java.lang.String str34 = calApplication31.printCalForYearMondayFirst(str_array33);
    java.lang.String str35 = calApplication27.printCal(str_array33);
    java.lang.String str36 = calApplication26.printCal(str_array33);
    java.util.List list37 = sortApplication8.numericalSortCapitalNumbersSpecialChars(str_array33);
    java.util.List list38 = sortApplication2.numericalSortCapitalNumbersSpecialChars(str_array33);
    java.lang.String[] str_array40 = new java.lang.String[] { "comm: terminated with error message comm: file is not readable" };
    java.util.List list41 = sortApplication2.numericalSortAll(str_array40);
    java.lang.String str42 = bcApplication1.bracket(str_array40);
    java.io.InputStream inputStream43 = null;
    java.io.OutputStream outputStream44 = null;
    // The following exception was thrown during execution in test generation
    try {
      fmtApplication0.run(str_array40, inputStream43, outputStream44);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.FmtException");
    } catch (sg.edu.nus.comp.cs4218.exception.FmtException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.FmtException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.FmtException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str23.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test038"); }


    sg.edu.nus.comp.cs4218.impl.app.FmtApplication fmtApplication0 = new sg.edu.nus.comp.cs4218.impl.app.FmtApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication7.printCalForYear(str_array15);
    java.util.List list18 = sortApplication1.sortNumbersSpecialChars(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = calApplication20.printCalForYearMondayFirst(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = calApplication24.printCalForYearMondayFirst(str_array26);
    java.lang.String str28 = calApplication20.printCal(str_array26);
    java.lang.String str29 = calApplication19.printCal(str_array26);
    java.util.List list30 = sortApplication1.numericalSortCapitalNumbersSpecialChars(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication31 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "" };
    java.lang.String str35 = calApplication32.printCalForYearMondayFirst(str_array34);
    java.util.List list36 = sortApplication31.sortCapitalNumbersSpecialChars(str_array34);
    java.util.List list37 = sortApplication1.numericalSortNumbersSpecialChars(str_array34);
    java.io.InputStream inputStream38 = null;
    java.io.OutputStream outputStream39 = null;
    // The following exception was thrown during execution in test generation
    try {
      fmtApplication0.run(str_array34, inputStream38, outputStream39);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.FmtException");
    } catch (sg.edu.nus.comp.cs4218.exception.FmtException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.FmtException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.FmtException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test039"); }


    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    java.lang.String str6 = calApplication1.printCalForYear(str_array4);
    java.lang.String str7 = commApplication0.commOnlySecond(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "hi!" };
    java.lang.String str17 = commApplication14.commOnlySecond(str_array16);
    java.lang.String str18 = calApplication13.printCalForYear(str_array16);
    java.lang.String str19 = commApplication12.commOnlySecond(str_array16);
    java.lang.String str20 = commApplication8.commOnlySecond(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication21 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array24 = new java.lang.String[] { "" };
    java.lang.String str25 = calApplication22.printCalForYearMondayFirst(str_array24);
    java.util.List list26 = sortApplication21.sortCapitalNumbersSpecialChars(str_array24);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array30 = new java.lang.String[] { "hi!" };
    java.lang.String str31 = commApplication28.commOnlySecond(str_array30);
    java.lang.String str32 = calApplication27.printCalForYear(str_array30);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "hi!" };
    java.lang.String str36 = commApplication33.commOnlySecond(str_array35);
    java.lang.String str37 = calApplication27.printCalForYear(str_array35);
    java.util.List list38 = sortApplication21.sortNumbersSpecialChars(str_array35);
    java.lang.String str39 = commApplication8.commBothMathches(str_array35);
    java.lang.String str40 = commApplication0.commOnlyFirst(str_array35);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "" };
    java.lang.String str44 = calApplication41.printCalForYearMondayFirst(str_array43);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array47 = new java.lang.String[] { "hi!" };
    java.lang.String str48 = commApplication45.commOnlySecond(str_array47);
    java.lang.String str49 = calApplication41.printCalWithMondayFirst(str_array47);
    java.io.InputStream inputStream50 = null;
    java.io.OutputStream outputStream51 = null;
    // The following exception was thrown during execution in test generation
    try {
      commApplication0.run(str_array47, inputStream50, outputStream51);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CommException");
    } catch (sg.edu.nus.comp.cs4218.exception.CommException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.CommException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CommException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str7.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str17.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str31.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str36.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str40.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str48.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test040"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    java.util.List list12 = sortApplication0.numericalSortSimpleSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!" };
    java.lang.String str18 = commApplication15.commOnlySecond(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    java.lang.String str20 = commApplication13.commOnlySecond(str_array17);
    java.util.List list21 = sortApplication0.sortAll(str_array17);
    java.lang.String[] str_array22 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list23 = sortApplication0.sortSimpleCapitalSpecialChars(str_array22);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test041"); }


    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication0 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    java.util.List list6 = sortApplication1.sortSimpleCapitalSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication7 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "hi!" };
    java.lang.String str17 = commApplication14.commOnlySecond(str_array16);
    java.lang.String str18 = calApplication13.printCalForYear(str_array16);
    java.lang.String str19 = commApplication12.commOnlySecond(str_array16);
    java.lang.String str20 = commApplication8.commOnlySecond(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication21 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication22 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array25 = new java.lang.String[] { "" };
    java.lang.String str26 = calApplication23.printCalForYearMondayFirst(str_array25);
    java.util.List list27 = sortApplication22.sortCapitalNumbersSpecialChars(str_array25);
    java.util.List list28 = sortApplication21.sortSimpleSpecialChars(str_array25);
    java.lang.String str29 = commApplication8.commAllMatches(str_array25);
    java.lang.String str30 = bcApplication7.lessThan(str_array25);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication31 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "" };
    java.lang.String str35 = calApplication32.printCalForYearMondayFirst(str_array34);
    java.util.List list36 = sortApplication31.sortCapitalNumbersSpecialChars(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "hi!" };
    java.lang.String str41 = commApplication38.commOnlySecond(str_array40);
    java.lang.String str42 = calApplication37.printCalForYear(str_array40);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array45 = new java.lang.String[] { "hi!" };
    java.lang.String str46 = commApplication43.commOnlySecond(str_array45);
    java.lang.String str47 = calApplication37.printCalForYear(str_array45);
    java.util.List list48 = sortApplication31.sortNumbersSpecialChars(str_array45);
    java.lang.String str49 = bcApplication7.negate(str_array45);
    java.util.List list50 = sortApplication1.sortCapitalNumbers(str_array45);
    java.io.InputStream inputStream51 = null;
    java.io.OutputStream outputStream52 = null;
    // The following exception was thrown during execution in test generation
    try {
      echoApplication0.run(str_array45, inputStream51, outputStream52);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.EchoException");
    } catch (sg.edu.nus.comp.cs4218.exception.EchoException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.EchoException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.EchoException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str17.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str29.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str41.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str46.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test042"); }


    sg.edu.nus.comp.cs4218.impl.app.DateApplication dateApplication0 = new sg.edu.nus.comp.cs4218.impl.app.DateApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array7 = new java.lang.String[] { "hi!" };
    java.lang.String str8 = commApplication5.commOnlySecond(str_array7);
    java.lang.String str9 = calApplication1.printCalWithMondayFirst(str_array7);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication10 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array13 = new java.lang.String[] { "" };
    java.lang.String str14 = calApplication11.printCalForYearMondayFirst(str_array13);
    java.util.List list15 = sortApplication10.sortCapitalNumbersSpecialChars(str_array13);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication16 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "" };
    java.lang.String str20 = calApplication17.printCalForYearMondayFirst(str_array19);
    java.util.List list21 = sortApplication16.sortCapitalNumbersSpecialChars(str_array19);
    java.util.List list22 = sortApplication10.numericalSortSimpleSpecialChars(str_array19);
    java.lang.String str23 = calApplication1.printCalForYear(str_array19);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "hi!" };
    java.lang.String str28 = commApplication25.commOnlySecond(str_array27);
    java.lang.String str29 = calApplication24.printCalForYear(str_array27);
    java.lang.String str30 = calApplication1.printCalForYearMondayFirst(str_array27);
    java.io.InputStream inputStream31 = null;
    java.io.OutputStream outputStream32 = null;
    // The following exception was thrown during execution in test generation
    try {
      dateApplication0.run(str_array27, inputStream31, outputStream32);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException");
    } catch (sg.edu.nus.comp.cs4218.exception.DateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.DateException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str8.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str28.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test043"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    java.util.List list12 = sortApplication0.numericalSortSimpleSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "" };
    java.lang.String str16 = calApplication13.printCalForYearMondayFirst(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "" };
    java.lang.String str20 = calApplication17.printCalForYearMondayFirst(str_array19);
    java.lang.String str21 = calApplication13.printCal(str_array19);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array25 = new java.lang.String[] { "hi!" };
    java.lang.String str26 = commApplication23.commOnlySecond(str_array25);
    java.lang.String str27 = calApplication22.printCalForYear(str_array25);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array30 = new java.lang.String[] { "hi!" };
    java.lang.String str31 = commApplication28.commOnlySecond(str_array30);
    java.lang.String str32 = calApplication22.printCalForYear(str_array30);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication33 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication34 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array37 = new java.lang.String[] { "" };
    java.lang.String str38 = calApplication35.printCalForYearMondayFirst(str_array37);
    java.util.List list39 = sortApplication34.sortCapitalNumbersSpecialChars(str_array37);
    java.util.List list40 = sortApplication33.sortSimpleSpecialChars(str_array37);
    java.lang.String str41 = calApplication22.printCal(str_array37);
    java.lang.String str42 = calApplication13.printCalForMonthYear(str_array37);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array45 = new java.lang.String[] { "hi!" };
    java.lang.String str46 = commApplication43.commOnlySecond(str_array45);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array50 = new java.lang.String[] { "hi!" };
    java.lang.String str51 = commApplication48.commOnlySecond(str_array50);
    java.lang.String str52 = calApplication47.printCalForYear(str_array50);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array55 = new java.lang.String[] { "hi!" };
    java.lang.String str56 = commApplication53.commOnlySecond(str_array55);
    java.lang.String str57 = calApplication47.printCalForYear(str_array55);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication58 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication59 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array62 = new java.lang.String[] { "" };
    java.lang.String str63 = calApplication60.printCalForYearMondayFirst(str_array62);
    java.util.List list64 = sortApplication59.sortCapitalNumbersSpecialChars(str_array62);
    java.util.List list65 = sortApplication58.sortSimpleSpecialChars(str_array62);
    java.lang.String str66 = calApplication47.printCal(str_array62);
    java.lang.String str67 = commApplication43.commOnlySecond(str_array62);
    java.lang.String str68 = calApplication13.printCalForMonthYearMondayFirst(str_array62);
    java.util.List list69 = sortApplication0.sortAll(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str26.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str31.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str46.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str51.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str56.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str67.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test044"); }


    sg.edu.nus.comp.cs4218.impl.app.FmtApplication fmtApplication0 = new sg.edu.nus.comp.cs4218.impl.app.FmtApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = calApplication8.printCalForYearMondayFirst(str_array10);
    java.util.List list12 = sortApplication7.sortCapitalNumbersSpecialChars(str_array10);
    java.util.List list13 = sortApplication1.numericalSortSimpleSpecialChars(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "hi!" };
    java.lang.String str19 = commApplication16.commOnlySecond(str_array18);
    java.lang.String str20 = calApplication15.printCalForYear(str_array18);
    java.lang.String str21 = commApplication14.commOnlySecond(str_array18);
    java.util.List list22 = sortApplication1.sortAll(str_array18);
    java.io.InputStream inputStream23 = null;
    java.io.OutputStream outputStream24 = null;
    // The following exception was thrown during execution in test generation
    try {
      fmtApplication0.run(str_array18, inputStream23, outputStream24);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.FmtException");
    } catch (sg.edu.nus.comp.cs4218.exception.FmtException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.FmtException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.FmtException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test045"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    java.lang.String[] str_array1 = null;
    java.io.InputStream inputStream2 = null;
    java.io.OutputStream outputStream3 = null;
    // The following exception was thrown during execution in test generation
    try {
      sortApplication0.run(str_array1, inputStream2, outputStream3);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
    } catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.SortException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test046"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    java.lang.String str5 = calApplication0.printCalForYear(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "hi!" };
    java.lang.String str9 = commApplication6.commOnlySecond(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array14 = new java.lang.String[] { "hi!" };
    java.lang.String str15 = commApplication12.commOnlySecond(str_array14);
    java.lang.String str16 = calApplication11.printCalForYear(str_array14);
    java.lang.String str17 = commApplication10.commOnlySecond(str_array14);
    java.lang.String str18 = commApplication6.commOnlySecond(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication19 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = calApplication20.printCalForYearMondayFirst(str_array22);
    java.util.List list24 = sortApplication19.sortCapitalNumbersSpecialChars(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!" };
    java.lang.String str29 = commApplication26.commOnlySecond(str_array28);
    java.lang.String str30 = calApplication25.printCalForYear(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "hi!" };
    java.lang.String str34 = commApplication31.commOnlySecond(str_array33);
    java.lang.String str35 = calApplication25.printCalForYear(str_array33);
    java.util.List list36 = sortApplication19.sortNumbersSpecialChars(str_array33);
    java.lang.String str37 = commApplication6.commBothMathches(str_array33);
    java.lang.String str38 = calApplication0.printCalForMonthYearMondayFirst(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array42 = new java.lang.String[] { "hi!" };
    java.lang.String str43 = commApplication40.commOnlySecond(str_array42);
    java.lang.String str44 = calApplication39.printCalForYear(str_array42);
    java.io.InputStream inputStream45 = null;
    java.io.OutputStream outputStream46 = null;
    calApplication0.run(str_array42, inputStream45, outputStream46);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication48 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array51 = new java.lang.String[] { "" };
    java.lang.String str52 = calApplication49.printCalForYearMondayFirst(str_array51);
    java.util.List list53 = sortApplication48.sortCapitalNumbersSpecialChars(str_array51);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "hi!" };
    java.lang.String str58 = commApplication55.commOnlySecond(str_array57);
    java.lang.String str59 = calApplication54.printCalForYear(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array62 = new java.lang.String[] { "hi!" };
    java.lang.String str63 = commApplication60.commOnlySecond(str_array62);
    java.lang.String str64 = calApplication54.printCalForYear(str_array62);
    java.util.List list65 = sortApplication48.sortNumbersSpecialChars(str_array62);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication66 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication67 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array69 = new java.lang.String[] { "" };
    java.lang.String str70 = calApplication67.printCalForYearMondayFirst(str_array69);
    java.util.List list71 = sortApplication66.sortCapitalNumbersSpecialChars(str_array69);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication72 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication73 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array75 = new java.lang.String[] { "" };
    java.lang.String str76 = calApplication73.printCalForYearMondayFirst(str_array75);
    java.util.List list77 = sortApplication72.sortCapitalNumbersSpecialChars(str_array75);
    java.util.List list78 = sortApplication66.numericalSortSimpleSpecialChars(str_array75);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication79 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication80 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication81 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array83 = new java.lang.String[] { "hi!" };
    java.lang.String str84 = commApplication81.commOnlySecond(str_array83);
    java.lang.String str85 = calApplication80.printCalForYear(str_array83);
    java.lang.String str86 = commApplication79.commOnlySecond(str_array83);
    java.util.List list87 = sortApplication66.sortAll(str_array83);
    java.util.List list88 = sortApplication48.numericalSortNumbersSpecialChars(str_array83);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication89 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array91 = new java.lang.String[] { "" };
    java.lang.String str92 = calApplication89.printCalForYearMondayFirst(str_array91);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication93 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array95 = new java.lang.String[] { "hi!" };
    java.lang.String str96 = commApplication93.commOnlySecond(str_array95);
    java.lang.String str97 = calApplication89.printCalWithMondayFirst(str_array95);
    java.util.List list98 = sortApplication48.numericalSortSimpleSpecialChars(str_array95);
    java.lang.String str99 = calApplication0.printCalWithMondayFirst(str_array95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str9.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str15.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str17.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str37.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str43.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str58.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str63.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str84.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str86.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str96 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str96.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str99);

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test047"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication12.printCalForYear(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!" };
    java.lang.String str21 = commApplication18.commOnlySecond(str_array20);
    java.lang.String str22 = calApplication12.printCalForYear(str_array20);
    java.util.List list23 = sortApplication6.sortNumbersSpecialChars(str_array20);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = calApplication25.printCalForYearMondayFirst(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array31 = new java.lang.String[] { "" };
    java.lang.String str32 = calApplication29.printCalForYearMondayFirst(str_array31);
    java.lang.String str33 = calApplication25.printCal(str_array31);
    java.lang.String str34 = calApplication24.printCal(str_array31);
    java.util.List list35 = sortApplication6.numericalSortCapitalNumbersSpecialChars(str_array31);
    java.util.List list36 = sortApplication0.numericalSortCapitalNumbersSpecialChars(str_array31);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication37 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication38 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array41 = new java.lang.String[] { "" };
    java.lang.String str42 = calApplication39.printCalForYearMondayFirst(str_array41);
    java.util.List list43 = sortApplication38.sortCapitalNumbersSpecialChars(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication44 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array47 = new java.lang.String[] { "" };
    java.lang.String str48 = calApplication45.printCalForYearMondayFirst(str_array47);
    java.util.List list49 = sortApplication44.sortCapitalNumbersSpecialChars(str_array47);
    java.util.List list50 = sortApplication38.numericalSortSimpleSpecialChars(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array55 = new java.lang.String[] { "hi!" };
    java.lang.String str56 = commApplication53.commOnlySecond(str_array55);
    java.lang.String str57 = calApplication52.printCalForYear(str_array55);
    java.lang.String str58 = commApplication51.commOnlySecond(str_array55);
    java.util.List list59 = sortApplication38.sortAll(str_array55);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication60 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication61 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array64 = new java.lang.String[] { "" };
    java.lang.String str65 = calApplication62.printCalForYearMondayFirst(str_array64);
    java.util.List list66 = sortApplication61.sortCapitalNumbersSpecialChars(str_array64);
    java.util.List list67 = sortApplication60.sortSimpleSpecialChars(str_array64);
    java.util.List list68 = sortApplication38.numericalSortCapitalSpecialChars(str_array64);
    java.lang.String str69 = bcApplication37.subtract(str_array64);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication70 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication71 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array73 = new java.lang.String[] { "hi!" };
    java.lang.String str74 = commApplication71.commOnlySecond(str_array73);
    java.lang.String str75 = calApplication70.printCalForYear(str_array73);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication76 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array78 = new java.lang.String[] { "hi!" };
    java.lang.String str79 = commApplication76.commOnlySecond(str_array78);
    java.lang.String str80 = calApplication70.printCalForYear(str_array78);
    java.lang.String str81 = bcApplication37.and(str_array78);
    java.util.List list82 = sortApplication0.numericalSortSimpleCapitalSpecialChars(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str56.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str58.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str74.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str79.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list82);

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test048"); }


    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array2 = new java.lang.String[] { "hi!" };
    java.lang.String str3 = commApplication0.commOnlySecond(str_array2);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication4 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "hi!" };
    java.lang.String str9 = commApplication6.commOnlySecond(str_array8);
    java.lang.String str10 = calApplication5.printCalForYear(str_array8);
    java.lang.String str11 = commApplication4.commOnlySecond(str_array8);
    java.lang.String str12 = commApplication0.commOnlySecond(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication13 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "" };
    java.lang.String str17 = calApplication14.printCalForYearMondayFirst(str_array16);
    java.util.List list18 = sortApplication13.sortCapitalNumbersSpecialChars(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "hi!" };
    java.lang.String str23 = commApplication20.commOnlySecond(str_array22);
    java.lang.String str24 = calApplication19.printCalForYear(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "hi!" };
    java.lang.String str28 = commApplication25.commOnlySecond(str_array27);
    java.lang.String str29 = calApplication19.printCalForYear(str_array27);
    java.util.List list30 = sortApplication13.sortNumbersSpecialChars(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "hi!" };
    java.lang.String str35 = commApplication32.commOnlySecond(str_array34);
    java.lang.String str36 = calApplication31.printCalForYear(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "hi!" };
    java.lang.String str40 = commApplication37.commOnlySecond(str_array39);
    java.lang.String str41 = calApplication31.printCalForYear(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication42 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication43 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = calApplication44.printCalForYearMondayFirst(str_array46);
    java.util.List list48 = sortApplication43.sortCapitalNumbersSpecialChars(str_array46);
    java.util.List list49 = sortApplication42.sortSimpleSpecialChars(str_array46);
    java.lang.String str50 = calApplication31.printCal(str_array46);
    java.util.List list51 = sortApplication13.sortStringsSimple(str_array46);
    java.lang.String str52 = commApplication0.commOnlyFirst(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication53 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array56 = new java.lang.String[] { "" };
    java.lang.String str57 = calApplication54.printCalForYearMondayFirst(str_array56);
    java.util.List list58 = sortApplication53.sortCapitalNumbersSpecialChars(str_array56);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication59 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array62 = new java.lang.String[] { "" };
    java.lang.String str63 = calApplication60.printCalForYearMondayFirst(str_array62);
    java.util.List list64 = sortApplication59.sortCapitalNumbersSpecialChars(str_array62);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication65 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication66 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array68 = new java.lang.String[] { "hi!" };
    java.lang.String str69 = commApplication66.commOnlySecond(str_array68);
    java.lang.String str70 = calApplication65.printCalForYear(str_array68);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication71 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array73 = new java.lang.String[] { "hi!" };
    java.lang.String str74 = commApplication71.commOnlySecond(str_array73);
    java.lang.String str75 = calApplication65.printCalForYear(str_array73);
    java.util.List list76 = sortApplication59.sortNumbersSpecialChars(str_array73);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication77 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication78 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array80 = new java.lang.String[] { "" };
    java.lang.String str81 = calApplication78.printCalForYearMondayFirst(str_array80);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication82 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array84 = new java.lang.String[] { "" };
    java.lang.String str85 = calApplication82.printCalForYearMondayFirst(str_array84);
    java.lang.String str86 = calApplication78.printCal(str_array84);
    java.lang.String str87 = calApplication77.printCal(str_array84);
    java.util.List list88 = sortApplication59.numericalSortCapitalNumbersSpecialChars(str_array84);
    java.util.List list89 = sortApplication53.numericalSortCapitalNumbersSpecialChars(str_array84);
    java.lang.String[] str_array91 = new java.lang.String[] { "comm: terminated with error message comm: file is not readable" };
    java.util.List list92 = sortApplication53.numericalSortAll(str_array91);
    java.io.InputStream inputStream93 = null;
    java.io.OutputStream outputStream94 = null;
    // The following exception was thrown during execution in test generation
    try {
      commApplication0.run(str_array91, inputStream93, outputStream94);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CommException");
    } catch (sg.edu.nus.comp.cs4218.exception.CommException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.CommException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CommException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str3.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str9.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str23.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str28.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str35.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str40.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str52.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str69.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str74.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list92);

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test049"); }


    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication0 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication1 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = calApplication3.printCalForYearMondayFirst(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.lang.String str11 = calApplication3.printCal(str_array9);
    java.lang.String str12 = calApplication2.printCal(str_array9);
    java.lang.String str13 = bcApplication1.negate(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication14 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "" };
    java.lang.String str18 = calApplication15.printCalForYearMondayFirst(str_array17);
    java.util.List list19 = sortApplication14.sortCapitalNumbersSpecialChars(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication20 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array23 = new java.lang.String[] { "" };
    java.lang.String str24 = calApplication21.printCalForYearMondayFirst(str_array23);
    java.util.List list25 = sortApplication20.sortCapitalNumbersSpecialChars(str_array23);
    java.util.List list26 = sortApplication14.numericalSortSimpleSpecialChars(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array31 = new java.lang.String[] { "hi!" };
    java.lang.String str32 = commApplication29.commOnlySecond(str_array31);
    java.lang.String str33 = calApplication28.printCalForYear(str_array31);
    java.lang.String str34 = commApplication27.commOnlySecond(str_array31);
    java.util.List list35 = sortApplication14.sortAll(str_array31);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication36 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication37 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "" };
    java.lang.String str41 = calApplication38.printCalForYearMondayFirst(str_array40);
    java.util.List list42 = sortApplication37.sortCapitalNumbersSpecialChars(str_array40);
    java.util.List list43 = sortApplication36.sortSimpleSpecialChars(str_array40);
    java.util.List list44 = sortApplication14.numericalSortCapitalSpecialChars(str_array40);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array49 = new java.lang.String[] { "hi!" };
    java.lang.String str50 = commApplication47.commOnlySecond(str_array49);
    java.lang.String str51 = calApplication46.printCalForYear(str_array49);
    java.lang.String str52 = commApplication45.commOnlySecond(str_array49);
    java.util.List list53 = sortApplication14.sortAll(str_array49);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array56 = new java.lang.String[] { "hi!" };
    java.lang.String str57 = commApplication54.commOnlySecond(str_array56);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication59 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array62 = new java.lang.String[] { "hi!" };
    java.lang.String str63 = commApplication60.commOnlySecond(str_array62);
    java.lang.String str64 = calApplication59.printCalForYear(str_array62);
    java.lang.String str65 = commApplication58.commOnlySecond(str_array62);
    java.lang.String str66 = commApplication54.commOnlySecond(str_array62);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication67 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication68 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication69 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array71 = new java.lang.String[] { "" };
    java.lang.String str72 = calApplication69.printCalForYearMondayFirst(str_array71);
    java.util.List list73 = sortApplication68.sortCapitalNumbersSpecialChars(str_array71);
    java.util.List list74 = sortApplication67.sortSimpleSpecialChars(str_array71);
    java.lang.String str75 = commApplication54.commAllMatches(str_array71);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication76 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication77 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication78 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array80 = new java.lang.String[] { "" };
    java.lang.String str81 = calApplication78.printCalForYearMondayFirst(str_array80);
    java.util.List list82 = sortApplication77.sortCapitalNumbersSpecialChars(str_array80);
    java.util.List list83 = sortApplication76.sortSimpleSpecialChars(str_array80);
    java.lang.String str84 = commApplication54.commAllMatches(str_array80);
    java.util.List list85 = sortApplication14.numericalSortAll(str_array80);
    java.lang.String str86 = bcApplication1.notEqual(str_array80);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication87 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication88 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array90 = new java.lang.String[] { "hi!" };
    java.lang.String str91 = commApplication88.commOnlySecond(str_array90);
    java.util.List list92 = sortApplication87.sortSimpleCapitalSpecialChars(str_array90);
    java.lang.String str93 = bcApplication1.lessThanOrEqual(str_array90);
    java.io.InputStream inputStream94 = null;
    java.io.OutputStream outputStream95 = null;
    // The following exception was thrown during execution in test generation
    try {
      echoApplication0.run(str_array90, inputStream94, outputStream95);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.EchoException");
    } catch (sg.edu.nus.comp.cs4218.exception.EchoException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.EchoException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.EchoException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str32.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str50.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str52.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str57.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str63.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str65.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str66.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str75.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str84.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str91 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str91.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str93);

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test050"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    java.util.List list12 = sortApplication0.numericalSortSimpleSpecialChars(str_array9);
    java.lang.String[] str_array14 = new java.lang.String[] { "" };
    java.util.List list15 = sortApplication0.sortSimpleCapitalSpecialChars(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication16 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "hi!" };
    java.lang.String str20 = commApplication17.commOnlySecond(str_array19);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array25 = new java.lang.String[] { "hi!" };
    java.lang.String str26 = commApplication23.commOnlySecond(str_array25);
    java.lang.String str27 = calApplication22.printCalForYear(str_array25);
    java.lang.String str28 = commApplication21.commOnlySecond(str_array25);
    java.lang.String str29 = commApplication17.commOnlySecond(str_array25);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication30 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "" };
    java.lang.String str34 = calApplication31.printCalForYearMondayFirst(str_array33);
    java.util.List list35 = sortApplication30.sortCapitalNumbersSpecialChars(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "hi!" };
    java.lang.String str40 = commApplication37.commOnlySecond(str_array39);
    java.lang.String str41 = calApplication36.printCalForYear(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array44 = new java.lang.String[] { "hi!" };
    java.lang.String str45 = commApplication42.commOnlySecond(str_array44);
    java.lang.String str46 = calApplication36.printCalForYear(str_array44);
    java.util.List list47 = sortApplication30.sortNumbersSpecialChars(str_array44);
    java.lang.String str48 = commApplication17.commBothMathches(str_array44);
    java.lang.String str49 = bcApplication16.add(str_array44);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication50 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array53 = new java.lang.String[] { "" };
    java.lang.String str54 = calApplication51.printCalForYearMondayFirst(str_array53);
    java.util.List list55 = sortApplication50.sortCapitalNumbersSpecialChars(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication56 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array59 = new java.lang.String[] { "" };
    java.lang.String str60 = calApplication57.printCalForYearMondayFirst(str_array59);
    java.util.List list61 = sortApplication56.sortCapitalNumbersSpecialChars(str_array59);
    java.util.List list62 = sortApplication50.numericalSortSimpleSpecialChars(str_array59);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication63 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication64 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication65 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array67 = new java.lang.String[] { "" };
    java.lang.String str68 = calApplication65.printCalForYearMondayFirst(str_array67);
    java.util.List list69 = sortApplication64.sortCapitalNumbersSpecialChars(str_array67);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication70 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication71 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array73 = new java.lang.String[] { "" };
    java.lang.String str74 = calApplication71.printCalForYearMondayFirst(str_array73);
    java.util.List list75 = sortApplication70.sortCapitalNumbersSpecialChars(str_array73);
    java.util.List list76 = sortApplication64.numericalSortSimpleSpecialChars(str_array73);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication77 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication78 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication79 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array81 = new java.lang.String[] { "hi!" };
    java.lang.String str82 = commApplication79.commOnlySecond(str_array81);
    java.lang.String str83 = calApplication78.printCalForYear(str_array81);
    java.lang.String str84 = commApplication77.commOnlySecond(str_array81);
    java.util.List list85 = sortApplication64.sortAll(str_array81);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication86 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication87 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication88 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array90 = new java.lang.String[] { "" };
    java.lang.String str91 = calApplication88.printCalForYearMondayFirst(str_array90);
    java.util.List list92 = sortApplication87.sortCapitalNumbersSpecialChars(str_array90);
    java.util.List list93 = sortApplication86.sortSimpleSpecialChars(str_array90);
    java.util.List list94 = sortApplication64.numericalSortCapitalSpecialChars(str_array90);
    java.lang.String str95 = bcApplication63.subtract(str_array90);
    java.util.List list96 = sortApplication50.numericalSortSimpleCapitalSpecialChars(str_array90);
    java.lang.String str97 = bcApplication16.bracket(str_array90);
    java.util.List list98 = sortApplication0.numericalSortCapitalSpecialChars(str_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str26.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str28.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str40.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str45.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str48.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str82.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str84.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list98);

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test051"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    java.util.List list12 = sortApplication0.numericalSortSimpleSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!" };
    java.lang.String str18 = commApplication15.commOnlySecond(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    java.lang.String str20 = commApplication13.commOnlySecond(str_array17);
    java.util.List list21 = sortApplication0.sortAll(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication22 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array25 = new java.lang.String[] { "" };
    java.lang.String str26 = calApplication23.printCalForYearMondayFirst(str_array25);
    java.util.List list27 = sortApplication22.sortCapitalNumbersSpecialChars(str_array25);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication28 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array31 = new java.lang.String[] { "" };
    java.lang.String str32 = calApplication29.printCalForYearMondayFirst(str_array31);
    java.util.List list33 = sortApplication28.sortCapitalNumbersSpecialChars(str_array31);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array37 = new java.lang.String[] { "hi!" };
    java.lang.String str38 = commApplication35.commOnlySecond(str_array37);
    java.lang.String str39 = calApplication34.printCalForYear(str_array37);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array42 = new java.lang.String[] { "hi!" };
    java.lang.String str43 = commApplication40.commOnlySecond(str_array42);
    java.lang.String str44 = calApplication34.printCalForYear(str_array42);
    java.util.List list45 = sortApplication28.sortNumbersSpecialChars(str_array42);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array49 = new java.lang.String[] { "" };
    java.lang.String str50 = calApplication47.printCalForYearMondayFirst(str_array49);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array53 = new java.lang.String[] { "" };
    java.lang.String str54 = calApplication51.printCalForYearMondayFirst(str_array53);
    java.lang.String str55 = calApplication47.printCal(str_array53);
    java.lang.String str56 = calApplication46.printCal(str_array53);
    java.util.List list57 = sortApplication28.numericalSortCapitalNumbersSpecialChars(str_array53);
    java.util.List list58 = sortApplication22.numericalSortCapitalNumbersSpecialChars(str_array53);
    java.util.List list59 = sortApplication0.numericalSortCapitalSpecialChars(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array62 = new java.lang.String[] { "hi!" };
    java.lang.String str63 = commApplication60.commOnlySecond(str_array62);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication65 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication66 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array68 = new java.lang.String[] { "hi!" };
    java.lang.String str69 = commApplication66.commOnlySecond(str_array68);
    java.lang.String str70 = calApplication65.printCalForYear(str_array68);
    java.lang.String str71 = commApplication64.commOnlySecond(str_array68);
    java.lang.String str72 = commApplication60.commOnlySecond(str_array68);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication73 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication74 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array76 = new java.lang.String[] { "" };
    java.lang.String str77 = calApplication74.printCalForYearMondayFirst(str_array76);
    java.util.List list78 = sortApplication73.sortCapitalNumbersSpecialChars(str_array76);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication79 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication80 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array82 = new java.lang.String[] { "hi!" };
    java.lang.String str83 = commApplication80.commOnlySecond(str_array82);
    java.lang.String str84 = calApplication79.printCalForYear(str_array82);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication85 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array87 = new java.lang.String[] { "hi!" };
    java.lang.String str88 = commApplication85.commOnlySecond(str_array87);
    java.lang.String str89 = calApplication79.printCalForYear(str_array87);
    java.util.List list90 = sortApplication73.sortNumbersSpecialChars(str_array87);
    java.lang.String str91 = commApplication60.commBothMathches(str_array87);
    java.util.List list92 = sortApplication0.sortNumbersSpecialChars(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str38.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str43.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str63.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str69.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str71.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str72.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str83.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str88.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str91 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str91.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list92);

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test052"); }


    sg.edu.nus.comp.cs4218.impl.app.HeadApplication headApplication0 = new sg.edu.nus.comp.cs4218.impl.app.HeadApplication();
    java.lang.String[] str_array1 = null;
    java.io.InputStream inputStream2 = null;
    java.io.OutputStream outputStream3 = null;
    // The following exception was thrown during execution in test generation
    try {
      headApplication0.run(str_array1, inputStream2, outputStream3);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.HeadException");
    } catch (sg.edu.nus.comp.cs4218.exception.HeadException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.HeadException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.HeadException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test053"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    java.util.List list5 = sortApplication0.sortSimpleCapitalSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication6 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication12.printCalForYear(str_array15);
    java.lang.String str18 = commApplication11.commOnlySecond(str_array15);
    java.lang.String str19 = commApplication7.commOnlySecond(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication20 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication21 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array24 = new java.lang.String[] { "" };
    java.lang.String str25 = calApplication22.printCalForYearMondayFirst(str_array24);
    java.util.List list26 = sortApplication21.sortCapitalNumbersSpecialChars(str_array24);
    java.util.List list27 = sortApplication20.sortSimpleSpecialChars(str_array24);
    java.lang.String str28 = commApplication7.commAllMatches(str_array24);
    java.lang.String str29 = bcApplication6.lessThan(str_array24);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication30 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "" };
    java.lang.String str34 = calApplication31.printCalForYearMondayFirst(str_array33);
    java.util.List list35 = sortApplication30.sortCapitalNumbersSpecialChars(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "hi!" };
    java.lang.String str40 = commApplication37.commOnlySecond(str_array39);
    java.lang.String str41 = calApplication36.printCalForYear(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array44 = new java.lang.String[] { "hi!" };
    java.lang.String str45 = commApplication42.commOnlySecond(str_array44);
    java.lang.String str46 = calApplication36.printCalForYear(str_array44);
    java.util.List list47 = sortApplication30.sortNumbersSpecialChars(str_array44);
    java.lang.String str48 = bcApplication6.negate(str_array44);
    java.util.List list49 = sortApplication0.sortCapitalNumbers(str_array44);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array53 = new java.lang.String[] { "hi!" };
    java.lang.String str54 = commApplication51.commOnlySecond(str_array53);
    java.lang.String str55 = calApplication50.printCalForYear(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array58 = new java.lang.String[] { "" };
    java.lang.String str59 = calApplication56.printCalForYearMondayFirst(str_array58);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array62 = new java.lang.String[] { "hi!" };
    java.lang.String str63 = commApplication60.commOnlySecond(str_array62);
    java.lang.String str64 = calApplication56.printCalWithMondayFirst(str_array62);
    java.lang.String str65 = calApplication50.printCalWithMondayFirst(str_array62);
    java.util.List list66 = sortApplication0.sortCapitalNumbers(str_array62);
    java.lang.String[] str_array67 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list68 = sortApplication0.sortAll(str_array67);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str28.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str40.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str45.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str54.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str63.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test054"); }


    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication0 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    java.lang.String str6 = calApplication1.printCalForYear(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = calApplication8.printCalForYearMondayFirst(str_array10);
    java.util.List list12 = sortApplication7.sortCapitalNumbersSpecialChars(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "hi!" };
    java.lang.String str17 = commApplication14.commOnlySecond(str_array16);
    java.lang.String str18 = calApplication13.printCalForYear(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "hi!" };
    java.lang.String str22 = commApplication19.commOnlySecond(str_array21);
    java.lang.String str23 = calApplication13.printCalForYear(str_array21);
    java.util.List list24 = sortApplication7.sortNumbersSpecialChars(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!" };
    java.lang.String str29 = commApplication26.commOnlySecond(str_array28);
    java.lang.String str30 = calApplication25.printCalForYear(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "hi!" };
    java.lang.String str34 = commApplication31.commOnlySecond(str_array33);
    java.lang.String str35 = calApplication25.printCalForYear(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication36 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication37 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "" };
    java.lang.String str41 = calApplication38.printCalForYearMondayFirst(str_array40);
    java.util.List list42 = sortApplication37.sortCapitalNumbersSpecialChars(str_array40);
    java.util.List list43 = sortApplication36.sortSimpleSpecialChars(str_array40);
    java.lang.String str44 = calApplication25.printCal(str_array40);
    java.util.List list45 = sortApplication7.sortStringsSimple(str_array40);
    java.lang.String str46 = calApplication1.printCalForMonthYearMondayFirst(str_array40);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication47 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array50 = new java.lang.String[] { "" };
    java.lang.String str51 = calApplication48.printCalForYearMondayFirst(str_array50);
    java.util.List list52 = sortApplication47.sortCapitalNumbersSpecialChars(str_array50);
    java.io.InputStream inputStream53 = null;
    java.io.OutputStream outputStream54 = null;
    calApplication1.run(str_array50, inputStream53, outputStream54);
    java.io.InputStream inputStream56 = null;
    java.io.OutputStream outputStream57 = null;
    // The following exception was thrown during execution in test generation
    try {
      echoApplication0.run(str_array50, inputStream56, outputStream57);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.EchoException");
    } catch (sg.edu.nus.comp.cs4218.exception.EchoException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.EchoException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.EchoException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str17.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str22.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test055"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    java.util.List list5 = sortApplication0.sortSimpleCapitalSpecialChars(str_array3);
    java.lang.String[] str_array6 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list7 = sortApplication0.numericalSortCapitalNumbers(str_array6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test056"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication1 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication2 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = calApplication3.printCalForYearMondayFirst(str_array5);
    java.util.List list7 = sortApplication2.sortCapitalNumbersSpecialChars(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array11 = new java.lang.String[] { "hi!" };
    java.lang.String str12 = commApplication9.commOnlySecond(str_array11);
    java.lang.String str13 = calApplication8.printCalForYear(str_array11);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "hi!" };
    java.lang.String str17 = commApplication14.commOnlySecond(str_array16);
    java.lang.String str18 = calApplication8.printCalForYear(str_array16);
    java.util.List list19 = sortApplication2.sortNumbersSpecialChars(str_array16);
    java.lang.String str20 = bcApplication1.notEqual(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication21 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array24 = new java.lang.String[] { "" };
    java.lang.String str25 = calApplication22.printCalForYearMondayFirst(str_array24);
    java.util.List list26 = sortApplication21.sortCapitalNumbersSpecialChars(str_array24);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication27 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array30 = new java.lang.String[] { "" };
    java.lang.String str31 = calApplication28.printCalForYearMondayFirst(str_array30);
    java.util.List list32 = sortApplication27.sortCapitalNumbersSpecialChars(str_array30);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "hi!" };
    java.lang.String str37 = commApplication34.commOnlySecond(str_array36);
    java.lang.String str38 = calApplication33.printCalForYear(str_array36);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array41 = new java.lang.String[] { "hi!" };
    java.lang.String str42 = commApplication39.commOnlySecond(str_array41);
    java.lang.String str43 = calApplication33.printCalForYear(str_array41);
    java.util.List list44 = sortApplication27.sortNumbersSpecialChars(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array48 = new java.lang.String[] { "" };
    java.lang.String str49 = calApplication46.printCalForYearMondayFirst(str_array48);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array52 = new java.lang.String[] { "" };
    java.lang.String str53 = calApplication50.printCalForYearMondayFirst(str_array52);
    java.lang.String str54 = calApplication46.printCal(str_array52);
    java.lang.String str55 = calApplication45.printCal(str_array52);
    java.util.List list56 = sortApplication27.numericalSortCapitalNumbersSpecialChars(str_array52);
    java.util.List list57 = sortApplication21.numericalSortCapitalNumbersSpecialChars(str_array52);
    java.lang.String[] str_array59 = new java.lang.String[] { "comm: terminated with error message comm: file is not readable" };
    java.util.List list60 = sortApplication21.numericalSortAll(str_array59);
    java.lang.String str61 = bcApplication1.notEqual(str_array59);
    java.lang.String str62 = bcApplication0.notEqual(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str17.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str37.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str42.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str62);

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test057"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    java.lang.String str6 = calApplication1.printCalForYear(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication12.printCalForYear(str_array15);
    java.lang.String str18 = commApplication11.commOnlySecond(str_array15);
    java.lang.String str19 = commApplication7.commOnlySecond(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication20 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array23 = new java.lang.String[] { "" };
    java.lang.String str24 = calApplication21.printCalForYearMondayFirst(str_array23);
    java.util.List list25 = sortApplication20.sortCapitalNumbersSpecialChars(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array29 = new java.lang.String[] { "hi!" };
    java.lang.String str30 = commApplication27.commOnlySecond(str_array29);
    java.lang.String str31 = calApplication26.printCalForYear(str_array29);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "hi!" };
    java.lang.String str35 = commApplication32.commOnlySecond(str_array34);
    java.lang.String str36 = calApplication26.printCalForYear(str_array34);
    java.util.List list37 = sortApplication20.sortNumbersSpecialChars(str_array34);
    java.lang.String str38 = commApplication7.commBothMathches(str_array34);
    java.lang.String str39 = calApplication1.printCalForMonthYearMondayFirst(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "hi!" };
    java.lang.String str44 = commApplication41.commOnlySecond(str_array43);
    java.lang.String str45 = calApplication40.printCalForYear(str_array43);
    java.io.InputStream inputStream46 = null;
    java.io.OutputStream outputStream47 = null;
    calApplication1.run(str_array43, inputStream46, outputStream47);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication49 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication50 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array53 = new java.lang.String[] { "" };
    java.lang.String str54 = calApplication51.printCalForYearMondayFirst(str_array53);
    java.util.List list55 = sortApplication50.sortCapitalNumbersSpecialChars(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication56 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array59 = new java.lang.String[] { "" };
    java.lang.String str60 = calApplication57.printCalForYearMondayFirst(str_array59);
    java.util.List list61 = sortApplication56.sortCapitalNumbersSpecialChars(str_array59);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication63 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array65 = new java.lang.String[] { "hi!" };
    java.lang.String str66 = commApplication63.commOnlySecond(str_array65);
    java.lang.String str67 = calApplication62.printCalForYear(str_array65);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array70 = new java.lang.String[] { "hi!" };
    java.lang.String str71 = commApplication68.commOnlySecond(str_array70);
    java.lang.String str72 = calApplication62.printCalForYear(str_array70);
    java.util.List list73 = sortApplication56.sortNumbersSpecialChars(str_array70);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication74 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication75 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array77 = new java.lang.String[] { "" };
    java.lang.String str78 = calApplication75.printCalForYearMondayFirst(str_array77);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication79 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array81 = new java.lang.String[] { "" };
    java.lang.String str82 = calApplication79.printCalForYearMondayFirst(str_array81);
    java.lang.String str83 = calApplication75.printCal(str_array81);
    java.lang.String str84 = calApplication74.printCal(str_array81);
    java.util.List list85 = sortApplication56.numericalSortCapitalNumbersSpecialChars(str_array81);
    java.util.List list86 = sortApplication50.numericalSortCapitalNumbersSpecialChars(str_array81);
    java.lang.String[] str_array88 = new java.lang.String[] { "comm: terminated with error message comm: file is not readable" };
    java.util.List list89 = sortApplication50.numericalSortAll(str_array88);
    java.lang.String str90 = bcApplication49.bracket(str_array88);
    java.io.InputStream inputStream91 = null;
    java.io.OutputStream outputStream92 = null;
    calApplication1.run(str_array88, inputStream91, outputStream92);
    java.lang.String str94 = bcApplication0.pow(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str30.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str35.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str38.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str44.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str66.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str71.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str94);

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test058"); }


    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication0 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication5 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "hi!" };
    java.lang.String str9 = commApplication6.commOnlySecond(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array14 = new java.lang.String[] { "hi!" };
    java.lang.String str15 = commApplication12.commOnlySecond(str_array14);
    java.lang.String str16 = calApplication11.printCalForYear(str_array14);
    java.lang.String str17 = commApplication10.commOnlySecond(str_array14);
    java.lang.String str18 = commApplication6.commOnlySecond(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication19 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication20 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array23 = new java.lang.String[] { "" };
    java.lang.String str24 = calApplication21.printCalForYearMondayFirst(str_array23);
    java.util.List list25 = sortApplication20.sortCapitalNumbersSpecialChars(str_array23);
    java.util.List list26 = sortApplication19.sortSimpleSpecialChars(str_array23);
    java.lang.String str27 = commApplication6.commAllMatches(str_array23);
    java.lang.String str28 = bcApplication5.lessThan(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication29 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "" };
    java.lang.String str33 = calApplication30.printCalForYearMondayFirst(str_array32);
    java.util.List list34 = sortApplication29.sortCapitalNumbersSpecialChars(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array38 = new java.lang.String[] { "hi!" };
    java.lang.String str39 = commApplication36.commOnlySecond(str_array38);
    java.lang.String str40 = calApplication35.printCalForYear(str_array38);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "hi!" };
    java.lang.String str44 = commApplication41.commOnlySecond(str_array43);
    java.lang.String str45 = calApplication35.printCalForYear(str_array43);
    java.util.List list46 = sortApplication29.sortNumbersSpecialChars(str_array43);
    java.lang.String str47 = bcApplication5.negate(str_array43);
    java.lang.String str48 = commApplication1.commOnlyFirst(str_array43);
    java.io.InputStream inputStream49 = null;
    java.io.OutputStream outputStream50 = null;
    // The following exception was thrown during execution in test generation
    try {
      echoApplication0.run(str_array43, inputStream49, outputStream50);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.EchoException");
    } catch (sg.edu.nus.comp.cs4218.exception.EchoException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.EchoException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.EchoException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str9.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str15.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str17.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str27.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str44.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str48.equals("comm: terminated with error message comm: file is not readable"));

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test059"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array2 = new java.lang.String[] { "" };
    java.lang.String str3 = calApplication0.printCalForYearMondayFirst(str_array2);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication4 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array7 = new java.lang.String[] { "hi!" };
    java.lang.String str8 = commApplication5.commOnlySecond(str_array7);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array13 = new java.lang.String[] { "hi!" };
    java.lang.String str14 = commApplication11.commOnlySecond(str_array13);
    java.lang.String str15 = calApplication10.printCalForYear(str_array13);
    java.lang.String str16 = commApplication9.commOnlySecond(str_array13);
    java.lang.String str17 = commApplication5.commOnlySecond(str_array13);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication18 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = calApplication19.printCalForYearMondayFirst(str_array21);
    java.util.List list23 = sortApplication18.sortCapitalNumbersSpecialChars(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "hi!" };
    java.lang.String str28 = commApplication25.commOnlySecond(str_array27);
    java.lang.String str29 = calApplication24.printCalForYear(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "hi!" };
    java.lang.String str33 = commApplication30.commOnlySecond(str_array32);
    java.lang.String str34 = calApplication24.printCalForYear(str_array32);
    java.util.List list35 = sortApplication18.sortNumbersSpecialChars(str_array32);
    java.lang.String str36 = commApplication5.commBothMathches(str_array32);
    java.lang.String str37 = bcApplication4.add(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication38 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication39 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array42 = new java.lang.String[] { "" };
    java.lang.String str43 = calApplication40.printCalForYearMondayFirst(str_array42);
    java.util.List list44 = sortApplication39.sortCapitalNumbersSpecialChars(str_array42);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication45 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array48 = new java.lang.String[] { "" };
    java.lang.String str49 = calApplication46.printCalForYearMondayFirst(str_array48);
    java.util.List list50 = sortApplication45.sortCapitalNumbersSpecialChars(str_array48);
    java.util.List list51 = sortApplication39.numericalSortSimpleSpecialChars(str_array48);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array56 = new java.lang.String[] { "hi!" };
    java.lang.String str57 = commApplication54.commOnlySecond(str_array56);
    java.lang.String str58 = calApplication53.printCalForYear(str_array56);
    java.lang.String str59 = commApplication52.commOnlySecond(str_array56);
    java.util.List list60 = sortApplication39.sortAll(str_array56);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication61 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication62 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication63 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array65 = new java.lang.String[] { "" };
    java.lang.String str66 = calApplication63.printCalForYearMondayFirst(str_array65);
    java.util.List list67 = sortApplication62.sortCapitalNumbersSpecialChars(str_array65);
    java.util.List list68 = sortApplication61.sortSimpleSpecialChars(str_array65);
    java.util.List list69 = sortApplication39.numericalSortCapitalSpecialChars(str_array65);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication70 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication71 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication72 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array74 = new java.lang.String[] { "hi!" };
    java.lang.String str75 = commApplication72.commOnlySecond(str_array74);
    java.lang.String str76 = calApplication71.printCalForYear(str_array74);
    java.lang.String str77 = commApplication70.commOnlySecond(str_array74);
    java.util.List list78 = sortApplication39.sortAll(str_array74);
    java.lang.String str79 = bcApplication38.equalEqual(str_array74);
    java.lang.String str80 = bcApplication4.greaterThanOrEqual(str_array74);
    java.lang.String str81 = calApplication0.printCalForMonthYear(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str8.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str14.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str17.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str28.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str33.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str36.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str57.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str59.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str75.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str77.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str81);

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test060"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = calApplication8.printCalForYearMondayFirst(str_array10);
    java.util.List list12 = sortApplication7.sortCapitalNumbersSpecialChars(str_array10);
    java.util.List list13 = sortApplication1.numericalSortSimpleSpecialChars(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "hi!" };
    java.lang.String str19 = commApplication16.commOnlySecond(str_array18);
    java.lang.String str20 = calApplication15.printCalForYear(str_array18);
    java.lang.String str21 = commApplication14.commOnlySecond(str_array18);
    java.util.List list22 = sortApplication1.sortAll(str_array18);
    java.util.List list23 = sortApplication0.sortSimpleCapitalSpecialChars(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "hi!" };
    java.lang.String str28 = commApplication25.commOnlySecond(str_array27);
    java.lang.String str29 = calApplication24.printCalForYear(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "hi!" };
    java.lang.String str33 = commApplication30.commOnlySecond(str_array32);
    java.lang.String str34 = calApplication24.printCalForYear(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication35 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array38 = new java.lang.String[] { "" };
    java.lang.String str39 = calApplication36.printCalForYearMondayFirst(str_array38);
    java.util.List list40 = sortApplication35.sortCapitalNumbersSpecialChars(str_array38);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array44 = new java.lang.String[] { "hi!" };
    java.lang.String str45 = commApplication42.commOnlySecond(str_array44);
    java.lang.String str46 = calApplication41.printCalForYear(str_array44);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array49 = new java.lang.String[] { "hi!" };
    java.lang.String str50 = commApplication47.commOnlySecond(str_array49);
    java.lang.String str51 = calApplication41.printCalForYear(str_array49);
    java.util.List list52 = sortApplication35.sortNumbersSpecialChars(str_array49);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array56 = new java.lang.String[] { "" };
    java.lang.String str57 = calApplication54.printCalForYearMondayFirst(str_array56);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array60 = new java.lang.String[] { "" };
    java.lang.String str61 = calApplication58.printCalForYearMondayFirst(str_array60);
    java.lang.String str62 = calApplication54.printCal(str_array60);
    java.lang.String str63 = calApplication53.printCal(str_array60);
    java.util.List list64 = sortApplication35.numericalSortCapitalNumbersSpecialChars(str_array60);
    java.io.InputStream inputStream65 = null;
    java.io.OutputStream outputStream66 = null;
    calApplication24.run(str_array60, inputStream65, outputStream66);
    java.util.List list68 = sortApplication0.numericalSortNumbersSpecialChars(str_array60);
    java.lang.String[] str_array69 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list70 = sortApplication0.sortCapitalNumbersSpecialChars(str_array69);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str28.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str33.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str45.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str50.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test061"); }


    sg.edu.nus.comp.cs4218.impl.app.FmtApplication fmtApplication0 = new sg.edu.nus.comp.cs4218.impl.app.FmtApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    java.util.List list6 = sortApplication1.sortSimpleCapitalSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array13 = new java.lang.String[] { "hi!" };
    java.lang.String str14 = commApplication11.commOnlySecond(str_array13);
    java.lang.String str15 = calApplication7.printCalWithMondayFirst(str_array13);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication16 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "" };
    java.lang.String str20 = calApplication17.printCalForYearMondayFirst(str_array19);
    java.util.List list21 = sortApplication16.sortCapitalNumbersSpecialChars(str_array19);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication22 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array25 = new java.lang.String[] { "" };
    java.lang.String str26 = calApplication23.printCalForYearMondayFirst(str_array25);
    java.util.List list27 = sortApplication22.sortCapitalNumbersSpecialChars(str_array25);
    java.util.List list28 = sortApplication16.numericalSortSimpleSpecialChars(str_array25);
    java.lang.String str29 = calApplication7.printCalForYear(str_array25);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "hi!" };
    java.lang.String str34 = commApplication31.commOnlySecond(str_array33);
    java.lang.String str35 = calApplication30.printCalForYear(str_array33);
    java.lang.String str36 = calApplication7.printCalForYearMondayFirst(str_array33);
    java.util.List list37 = sortApplication1.sortCapitalNumbersSpecialChars(str_array33);
    java.io.InputStream inputStream38 = null;
    java.io.OutputStream outputStream39 = null;
    // The following exception was thrown during execution in test generation
    try {
      fmtApplication0.run(str_array33, inputStream38, outputStream39);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.FmtException");
    } catch (sg.edu.nus.comp.cs4218.exception.FmtException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.FmtException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.FmtException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str14.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test062"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = calApplication8.printCalForYearMondayFirst(str_array10);
    java.util.List list12 = sortApplication7.sortCapitalNumbersSpecialChars(str_array10);
    java.util.List list13 = sortApplication1.numericalSortSimpleSpecialChars(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "hi!" };
    java.lang.String str19 = commApplication16.commOnlySecond(str_array18);
    java.lang.String str20 = calApplication15.printCalForYear(str_array18);
    java.lang.String str21 = commApplication14.commOnlySecond(str_array18);
    java.util.List list22 = sortApplication1.sortAll(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication24 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = calApplication25.printCalForYearMondayFirst(str_array27);
    java.util.List list29 = sortApplication24.sortCapitalNumbersSpecialChars(str_array27);
    java.util.List list30 = sortApplication23.sortSimpleSpecialChars(str_array27);
    java.util.List list31 = sortApplication1.numericalSortCapitalSpecialChars(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "hi!" };
    java.lang.String str37 = commApplication34.commOnlySecond(str_array36);
    java.lang.String str38 = calApplication33.printCalForYear(str_array36);
    java.lang.String str39 = commApplication32.commOnlySecond(str_array36);
    java.util.List list40 = sortApplication1.sortAll(str_array36);
    java.lang.String str41 = bcApplication0.equalEqual(str_array36);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array45 = new java.lang.String[] { "hi!" };
    java.lang.String str46 = commApplication43.commOnlySecond(str_array45);
    java.lang.String str47 = calApplication42.printCalForYear(str_array45);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array50 = new java.lang.String[] { "hi!" };
    java.lang.String str51 = commApplication48.commOnlySecond(str_array50);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array56 = new java.lang.String[] { "hi!" };
    java.lang.String str57 = commApplication54.commOnlySecond(str_array56);
    java.lang.String str58 = calApplication53.printCalForYear(str_array56);
    java.lang.String str59 = commApplication52.commOnlySecond(str_array56);
    java.lang.String str60 = commApplication48.commOnlySecond(str_array56);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication61 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array64 = new java.lang.String[] { "" };
    java.lang.String str65 = calApplication62.printCalForYearMondayFirst(str_array64);
    java.util.List list66 = sortApplication61.sortCapitalNumbersSpecialChars(str_array64);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication67 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array70 = new java.lang.String[] { "hi!" };
    java.lang.String str71 = commApplication68.commOnlySecond(str_array70);
    java.lang.String str72 = calApplication67.printCalForYear(str_array70);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication73 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array75 = new java.lang.String[] { "hi!" };
    java.lang.String str76 = commApplication73.commOnlySecond(str_array75);
    java.lang.String str77 = calApplication67.printCalForYear(str_array75);
    java.util.List list78 = sortApplication61.sortNumbersSpecialChars(str_array75);
    java.lang.String str79 = commApplication48.commBothMathches(str_array75);
    java.lang.String str80 = calApplication42.printCalForMonthYearMondayFirst(str_array75);
    java.lang.String str81 = bcApplication0.greaterThanOrEqual(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str37.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str46.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str51.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str57.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str59.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str60.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str71.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str76.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str79.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str81);

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test063"); }


    sg.edu.nus.comp.cs4218.impl.app.DateApplication dateApplication0 = new sg.edu.nus.comp.cs4218.impl.app.DateApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array7 = new java.lang.String[] { "" };
    java.lang.String str8 = calApplication5.printCalForYearMondayFirst(str_array7);
    java.lang.String str9 = calApplication1.printCal(str_array7);
    java.io.InputStream inputStream10 = null;
    java.io.OutputStream outputStream11 = null;
    // The following exception was thrown during execution in test generation
    try {
      dateApplication0.run(str_array7, inputStream10, outputStream11);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException");
    } catch (sg.edu.nus.comp.cs4218.exception.DateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.DateException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test064"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    java.util.List list5 = sortApplication0.sortSimpleCapitalSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "" };
    java.lang.String str9 = calApplication6.printCalForYearMondayFirst(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array12 = new java.lang.String[] { "hi!" };
    java.lang.String str13 = commApplication10.commOnlySecond(str_array12);
    java.lang.String str14 = calApplication6.printCalWithMondayFirst(str_array12);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication15 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "" };
    java.lang.String str19 = calApplication16.printCalForYearMondayFirst(str_array18);
    java.util.List list20 = sortApplication15.sortCapitalNumbersSpecialChars(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication21 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array24 = new java.lang.String[] { "" };
    java.lang.String str25 = calApplication22.printCalForYearMondayFirst(str_array24);
    java.util.List list26 = sortApplication21.sortCapitalNumbersSpecialChars(str_array24);
    java.util.List list27 = sortApplication15.numericalSortSimpleSpecialChars(str_array24);
    java.lang.String str28 = calApplication6.printCalForYear(str_array24);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "hi!" };
    java.lang.String str33 = commApplication30.commOnlySecond(str_array32);
    java.lang.String str34 = calApplication29.printCalForYear(str_array32);
    java.lang.String str35 = calApplication6.printCalForYearMondayFirst(str_array32);
    java.util.List list36 = sortApplication0.sortCapitalNumbersSpecialChars(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication37 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication38 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array41 = new java.lang.String[] { "" };
    java.lang.String str42 = calApplication39.printCalForYearMondayFirst(str_array41);
    java.util.List list43 = sortApplication38.sortCapitalNumbersSpecialChars(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication44 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array47 = new java.lang.String[] { "" };
    java.lang.String str48 = calApplication45.printCalForYearMondayFirst(str_array47);
    java.util.List list49 = sortApplication44.sortCapitalNumbersSpecialChars(str_array47);
    java.util.List list50 = sortApplication38.numericalSortSimpleSpecialChars(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array55 = new java.lang.String[] { "hi!" };
    java.lang.String str56 = commApplication53.commOnlySecond(str_array55);
    java.lang.String str57 = calApplication52.printCalForYear(str_array55);
    java.lang.String str58 = commApplication51.commOnlySecond(str_array55);
    java.util.List list59 = sortApplication38.sortAll(str_array55);
    java.util.List list60 = sortApplication37.sortSimpleCapitalSpecialChars(str_array55);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication61 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array64 = new java.lang.String[] { "" };
    java.lang.String str65 = calApplication62.printCalForYearMondayFirst(str_array64);
    java.util.List list66 = sortApplication61.sortCapitalNumbersSpecialChars(str_array64);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication67 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array70 = new java.lang.String[] { "" };
    java.lang.String str71 = calApplication68.printCalForYearMondayFirst(str_array70);
    java.util.List list72 = sortApplication67.sortCapitalNumbersSpecialChars(str_array70);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication73 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication74 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array76 = new java.lang.String[] { "hi!" };
    java.lang.String str77 = commApplication74.commOnlySecond(str_array76);
    java.lang.String str78 = calApplication73.printCalForYear(str_array76);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication79 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array81 = new java.lang.String[] { "hi!" };
    java.lang.String str82 = commApplication79.commOnlySecond(str_array81);
    java.lang.String str83 = calApplication73.printCalForYear(str_array81);
    java.util.List list84 = sortApplication67.sortNumbersSpecialChars(str_array81);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication85 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication86 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array88 = new java.lang.String[] { "" };
    java.lang.String str89 = calApplication86.printCalForYearMondayFirst(str_array88);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication90 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array92 = new java.lang.String[] { "" };
    java.lang.String str93 = calApplication90.printCalForYearMondayFirst(str_array92);
    java.lang.String str94 = calApplication86.printCal(str_array92);
    java.lang.String str95 = calApplication85.printCal(str_array92);
    java.util.List list96 = sortApplication67.numericalSortCapitalNumbersSpecialChars(str_array92);
    java.util.List list97 = sortApplication61.numericalSortCapitalNumbersSpecialChars(str_array92);
    java.util.List list98 = sortApplication37.sortSimpleCapitalNumber(str_array92);
    java.util.List list99 = sortApplication0.sortCapitalSpecialChars(str_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str33.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str56.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str58.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str77.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str82.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list99);

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test065"); }


    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    java.lang.String str6 = calApplication1.printCalForYear(str_array4);
    java.lang.String str7 = commApplication0.commOnlySecond(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array12 = new java.lang.String[] { "hi!" };
    java.lang.String str13 = commApplication10.commOnlySecond(str_array12);
    java.lang.String str14 = calApplication9.printCalForYear(str_array12);
    java.lang.String str15 = commApplication8.commOnlySecond(str_array12);
    java.lang.String str16 = commApplication0.commAllMatches(str_array12);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication17 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!" };
    java.lang.String str21 = commApplication18.commOnlySecond(str_array20);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "hi!" };
    java.lang.String str27 = commApplication24.commOnlySecond(str_array26);
    java.lang.String str28 = calApplication23.printCalForYear(str_array26);
    java.lang.String str29 = commApplication22.commOnlySecond(str_array26);
    java.lang.String str30 = commApplication18.commOnlySecond(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication31 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication32 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "" };
    java.lang.String str36 = calApplication33.printCalForYearMondayFirst(str_array35);
    java.util.List list37 = sortApplication32.sortCapitalNumbersSpecialChars(str_array35);
    java.util.List list38 = sortApplication31.sortSimpleSpecialChars(str_array35);
    java.lang.String str39 = commApplication18.commAllMatches(str_array35);
    java.lang.String str40 = bcApplication17.lessThan(str_array35);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication41 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array44 = new java.lang.String[] { "" };
    java.lang.String str45 = calApplication42.printCalForYearMondayFirst(str_array44);
    java.util.List list46 = sortApplication41.sortCapitalNumbersSpecialChars(str_array44);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array50 = new java.lang.String[] { "hi!" };
    java.lang.String str51 = commApplication48.commOnlySecond(str_array50);
    java.lang.String str52 = calApplication47.printCalForYear(str_array50);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array55 = new java.lang.String[] { "hi!" };
    java.lang.String str56 = commApplication53.commOnlySecond(str_array55);
    java.lang.String str57 = calApplication47.printCalForYear(str_array55);
    java.util.List list58 = sortApplication41.sortNumbersSpecialChars(str_array55);
    java.lang.String str59 = bcApplication17.negate(str_array55);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication60 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array63 = new java.lang.String[] { "" };
    java.lang.String str64 = calApplication61.printCalForYearMondayFirst(str_array63);
    java.util.List list65 = sortApplication60.sortCapitalNumbersSpecialChars(str_array63);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication66 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication67 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array69 = new java.lang.String[] { "" };
    java.lang.String str70 = calApplication67.printCalForYearMondayFirst(str_array69);
    java.util.List list71 = sortApplication66.sortCapitalNumbersSpecialChars(str_array69);
    java.util.List list72 = sortApplication60.numericalSortSimpleSpecialChars(str_array69);
    java.lang.String[] str_array74 = new java.lang.String[] { "" };
    java.util.List list75 = sortApplication60.sortSimpleCapitalSpecialChars(str_array74);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication76 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication77 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array79 = new java.lang.String[] { "hi!" };
    java.lang.String str80 = commApplication77.commOnlySecond(str_array79);
    java.util.List list81 = sortApplication76.sortSimpleCapitalSpecialChars(str_array79);
    java.util.List list82 = sortApplication60.numericalSortSimpleCapitalSpecialChars(str_array79);
    java.lang.String str83 = bcApplication17.bracket(str_array79);
    java.lang.String str84 = commApplication0.commOnlyFirst(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str7.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str15.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str27.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str30.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str39.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str51.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str56.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str80.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str84.equals("comm: terminated with error message comm: file is not readable"));

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test066"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array14 = new java.lang.String[] { "hi!" };
    java.lang.String str15 = commApplication12.commOnlySecond(str_array14);
    java.lang.String str16 = calApplication6.printCalForYear(str_array14);
    java.util.List list17 = sortApplication0.sortNumbersSpecialChars(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = calApplication19.printCalForYearMondayFirst(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array25 = new java.lang.String[] { "" };
    java.lang.String str26 = calApplication23.printCalForYearMondayFirst(str_array25);
    java.lang.String str27 = calApplication19.printCal(str_array25);
    java.lang.String str28 = calApplication18.printCal(str_array25);
    java.util.List list29 = sortApplication0.numericalSortCapitalNumbersSpecialChars(str_array25);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication30 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "" };
    java.lang.String str34 = calApplication31.printCalForYearMondayFirst(str_array33);
    java.util.List list35 = sortApplication30.sortCapitalNumbersSpecialChars(str_array33);
    java.util.List list36 = sortApplication0.numericalSortNumbersSpecialChars(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication37 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "" };
    java.lang.String str41 = calApplication38.printCalForYearMondayFirst(str_array40);
    java.util.List list42 = sortApplication37.sortCapitalNumbersSpecialChars(str_array40);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "hi!" };
    java.lang.String str47 = commApplication44.commOnlySecond(str_array46);
    java.lang.String str48 = calApplication43.printCalForYear(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array51 = new java.lang.String[] { "hi!" };
    java.lang.String str52 = commApplication49.commOnlySecond(str_array51);
    java.lang.String str53 = calApplication43.printCalForYear(str_array51);
    java.util.List list54 = sortApplication37.sortNumbersSpecialChars(str_array51);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication55 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication56 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array59 = new java.lang.String[] { "" };
    java.lang.String str60 = calApplication57.printCalForYearMondayFirst(str_array59);
    java.util.List list61 = sortApplication56.sortCapitalNumbersSpecialChars(str_array59);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication63 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array65 = new java.lang.String[] { "hi!" };
    java.lang.String str66 = commApplication63.commOnlySecond(str_array65);
    java.lang.String str67 = calApplication62.printCalForYear(str_array65);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array70 = new java.lang.String[] { "hi!" };
    java.lang.String str71 = commApplication68.commOnlySecond(str_array70);
    java.lang.String str72 = calApplication62.printCalForYear(str_array70);
    java.util.List list73 = sortApplication56.sortNumbersSpecialChars(str_array70);
    java.lang.String str74 = bcApplication55.notEqual(str_array70);
    java.util.List list75 = sortApplication37.sortSimpleNumbers(str_array70);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication76 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array78 = new java.lang.String[] { "" };
    java.lang.String str79 = calApplication76.printCalForYearMondayFirst(str_array78);
    java.util.List list80 = sortApplication37.numericalSortCapitalNumbers(str_array78);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication81 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication82 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication83 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array85 = new java.lang.String[] { "hi!" };
    java.lang.String str86 = commApplication83.commOnlySecond(str_array85);
    java.lang.String str87 = calApplication82.printCalForYear(str_array85);
    java.lang.String str88 = commApplication81.commOnlySecond(str_array85);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication89 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication90 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication91 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array93 = new java.lang.String[] { "hi!" };
    java.lang.String str94 = commApplication91.commOnlySecond(str_array93);
    java.lang.String str95 = calApplication90.printCalForYear(str_array93);
    java.lang.String str96 = commApplication89.commOnlySecond(str_array93);
    java.lang.String str97 = commApplication81.commAllMatches(str_array93);
    java.util.List list98 = sortApplication37.sortSimpleCapitalNumber(str_array93);
    java.util.List list99 = sortApplication0.numericalSortSimpleCapital(str_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str15.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str47.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str52.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str66.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str71.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str86.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str88.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str94 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str94.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str96 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str96.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str97 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str97.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list99);

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test067"); }


    sg.edu.nus.comp.cs4218.impl.app.TailApplication tailApplication0 = new sg.edu.nus.comp.cs4218.impl.app.TailApplication();
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication1 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    java.lang.String str13 = commApplication6.commOnlySecond(str_array10);
    java.lang.String str14 = commApplication2.commOnlySecond(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication15 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication16 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "" };
    java.lang.String str20 = calApplication17.printCalForYearMondayFirst(str_array19);
    java.util.List list21 = sortApplication16.sortCapitalNumbersSpecialChars(str_array19);
    java.util.List list22 = sortApplication15.sortSimpleSpecialChars(str_array19);
    java.lang.String str23 = commApplication2.commAllMatches(str_array19);
    java.lang.String str24 = bcApplication1.lessThan(str_array19);
    java.io.InputStream inputStream25 = null;
    java.io.OutputStream outputStream26 = null;
    // The following exception was thrown during execution in test generation
    try {
      tailApplication0.run(str_array19, inputStream25, outputStream26);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException");
    } catch (sg.edu.nus.comp.cs4218.exception.TailException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.TailException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str14.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str23.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test068"); }


    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array2 = new java.lang.String[] { "hi!" };
    java.lang.String str3 = commApplication0.commOnlySecond(str_array2);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication4 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "hi!" };
    java.lang.String str9 = commApplication6.commOnlySecond(str_array8);
    java.lang.String str10 = calApplication5.printCalForYear(str_array8);
    java.lang.String str11 = commApplication4.commOnlySecond(str_array8);
    java.lang.String str12 = commApplication0.commOnlySecond(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication13 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "" };
    java.lang.String str17 = calApplication14.printCalForYearMondayFirst(str_array16);
    java.util.List list18 = sortApplication13.sortCapitalNumbersSpecialChars(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "hi!" };
    java.lang.String str23 = commApplication20.commOnlySecond(str_array22);
    java.lang.String str24 = calApplication19.printCalForYear(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "hi!" };
    java.lang.String str28 = commApplication25.commOnlySecond(str_array27);
    java.lang.String str29 = calApplication19.printCalForYear(str_array27);
    java.util.List list30 = sortApplication13.sortNumbersSpecialChars(str_array27);
    java.lang.String str31 = commApplication0.commBothMathches(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "hi!" };
    java.lang.String str35 = commApplication32.commOnlySecond(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "hi!" };
    java.lang.String str41 = commApplication38.commOnlySecond(str_array40);
    java.lang.String str42 = calApplication37.printCalForYear(str_array40);
    java.lang.String str43 = commApplication36.commOnlySecond(str_array40);
    java.lang.String str44 = commApplication32.commOnlySecond(str_array40);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication45 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication46 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array49 = new java.lang.String[] { "" };
    java.lang.String str50 = calApplication47.printCalForYearMondayFirst(str_array49);
    java.util.List list51 = sortApplication46.sortCapitalNumbersSpecialChars(str_array49);
    java.util.List list52 = sortApplication45.sortSimpleSpecialChars(str_array49);
    java.lang.String str53 = commApplication32.commAllMatches(str_array49);
    java.lang.String str54 = commApplication0.commNoMatches(str_array49);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array59 = new java.lang.String[] { "hi!" };
    java.lang.String str60 = commApplication57.commOnlySecond(str_array59);
    java.lang.String str61 = calApplication56.printCalForYear(str_array59);
    java.lang.String str62 = commApplication55.commOnlySecond(str_array59);
    java.lang.String str63 = commApplication0.commOnlySecond(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str3.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str9.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str23.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str28.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str31.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str35.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str41.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str43.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str44.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str53.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str54.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str60.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str62.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str63.equals("comm: terminated with error message comm: file is not readable"));

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test069"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array2 = new java.lang.String[] { "" };
    java.lang.String str3 = calApplication0.printCalForYearMondayFirst(str_array2);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication4 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array6 = new java.lang.String[] { "" };
    java.lang.String str7 = calApplication4.printCalForYearMondayFirst(str_array6);
    java.lang.String str8 = calApplication0.printCal(str_array6);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array12 = new java.lang.String[] { "hi!" };
    java.lang.String str13 = commApplication10.commOnlySecond(str_array12);
    java.lang.String str14 = calApplication9.printCalForYear(str_array12);
    java.lang.String str15 = calApplication0.printCalForYearMondayFirst(str_array12);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication16 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "" };
    java.lang.String str20 = calApplication17.printCalForYearMondayFirst(str_array19);
    java.util.List list21 = sortApplication16.sortCapitalNumbersSpecialChars(str_array19);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array25 = new java.lang.String[] { "hi!" };
    java.lang.String str26 = commApplication23.commOnlySecond(str_array25);
    java.lang.String str27 = calApplication22.printCalForYear(str_array25);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array30 = new java.lang.String[] { "hi!" };
    java.lang.String str31 = commApplication28.commOnlySecond(str_array30);
    java.lang.String str32 = calApplication22.printCalForYear(str_array30);
    java.util.List list33 = sortApplication16.sortNumbersSpecialChars(str_array30);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication34 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array37 = new java.lang.String[] { "" };
    java.lang.String str38 = calApplication35.printCalForYearMondayFirst(str_array37);
    java.util.List list39 = sortApplication34.sortCapitalNumbersSpecialChars(str_array37);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication40 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "" };
    java.lang.String str44 = calApplication41.printCalForYearMondayFirst(str_array43);
    java.util.List list45 = sortApplication40.sortCapitalNumbersSpecialChars(str_array43);
    java.util.List list46 = sortApplication34.numericalSortSimpleSpecialChars(str_array43);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array51 = new java.lang.String[] { "hi!" };
    java.lang.String str52 = commApplication49.commOnlySecond(str_array51);
    java.lang.String str53 = calApplication48.printCalForYear(str_array51);
    java.lang.String str54 = commApplication47.commOnlySecond(str_array51);
    java.util.List list55 = sortApplication34.sortAll(str_array51);
    java.util.List list56 = sortApplication16.numericalSortNumbersSpecialChars(str_array51);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array59 = new java.lang.String[] { "" };
    java.lang.String str60 = calApplication57.printCalForYearMondayFirst(str_array59);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array63 = new java.lang.String[] { "hi!" };
    java.lang.String str64 = commApplication61.commOnlySecond(str_array63);
    java.lang.String str65 = calApplication57.printCalWithMondayFirst(str_array63);
    java.util.List list66 = sortApplication16.numericalSortSimpleSpecialChars(str_array63);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication67 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array70 = new java.lang.String[] { "" };
    java.lang.String str71 = calApplication68.printCalForYearMondayFirst(str_array70);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication72 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array74 = new java.lang.String[] { "" };
    java.lang.String str75 = calApplication72.printCalForYearMondayFirst(str_array74);
    java.lang.String str76 = calApplication68.printCal(str_array74);
    java.lang.String str77 = calApplication67.printCal(str_array74);
    java.util.List list78 = sortApplication16.numericalSortSimpleSpecialChars(str_array74);
    java.io.InputStream inputStream79 = null;
    java.io.OutputStream outputStream80 = null;
    calApplication0.run(str_array74, inputStream79, outputStream80);
    java.lang.String[] str_array82 = null;
    java.io.InputStream inputStream83 = null;
    java.io.OutputStream outputStream84 = null;
    calApplication0.run(str_array82, inputStream83, outputStream84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str26.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str31.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str52.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str54.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str64.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test070"); }


    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array2 = new java.lang.String[] { "hi!" };
    java.lang.String str3 = commApplication0.commOnlySecond(str_array2);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication4 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "hi!" };
    java.lang.String str9 = commApplication6.commOnlySecond(str_array8);
    java.lang.String str10 = calApplication5.printCalForYear(str_array8);
    java.lang.String str11 = commApplication4.commOnlySecond(str_array8);
    java.lang.String str12 = commApplication0.commOnlySecond(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication13 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "" };
    java.lang.String str17 = calApplication14.printCalForYearMondayFirst(str_array16);
    java.util.List list18 = sortApplication13.sortCapitalNumbersSpecialChars(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "hi!" };
    java.lang.String str23 = commApplication20.commOnlySecond(str_array22);
    java.lang.String str24 = calApplication19.printCalForYear(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "hi!" };
    java.lang.String str28 = commApplication25.commOnlySecond(str_array27);
    java.lang.String str29 = calApplication19.printCalForYear(str_array27);
    java.util.List list30 = sortApplication13.sortNumbersSpecialChars(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "hi!" };
    java.lang.String str35 = commApplication32.commOnlySecond(str_array34);
    java.lang.String str36 = calApplication31.printCalForYear(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "hi!" };
    java.lang.String str40 = commApplication37.commOnlySecond(str_array39);
    java.lang.String str41 = calApplication31.printCalForYear(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication42 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication43 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = calApplication44.printCalForYearMondayFirst(str_array46);
    java.util.List list48 = sortApplication43.sortCapitalNumbersSpecialChars(str_array46);
    java.util.List list49 = sortApplication42.sortSimpleSpecialChars(str_array46);
    java.lang.String str50 = calApplication31.printCal(str_array46);
    java.util.List list51 = sortApplication13.sortStringsSimple(str_array46);
    java.lang.String str52 = commApplication0.commOnlyFirst(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array56 = new java.lang.String[] { "hi!" };
    java.lang.String str57 = commApplication54.commOnlySecond(str_array56);
    java.lang.String str58 = calApplication53.printCalForYear(str_array56);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication59 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array63 = new java.lang.String[] { "hi!" };
    java.lang.String str64 = commApplication61.commOnlySecond(str_array63);
    java.lang.String str65 = calApplication60.printCalForYear(str_array63);
    java.lang.String str66 = commApplication59.commOnlySecond(str_array63);
    java.lang.String str67 = calApplication53.printCalForMonthYearMondayFirst(str_array63);
    java.lang.String str68 = commApplication0.commNoMatches(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str3.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str9.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str23.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str28.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str35.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str40.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str52.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str57.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str64.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str66.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str68.equals("comm: terminated with error message comm: file is not readable"));

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test071"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    java.lang.String str12 = commApplication5.commOnlySecond(str_array9);
    java.lang.String str13 = commApplication1.commOnlySecond(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication14 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "" };
    java.lang.String str18 = calApplication15.printCalForYearMondayFirst(str_array17);
    java.util.List list19 = sortApplication14.sortCapitalNumbersSpecialChars(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array23 = new java.lang.String[] { "hi!" };
    java.lang.String str24 = commApplication21.commOnlySecond(str_array23);
    java.lang.String str25 = calApplication20.printCalForYear(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!" };
    java.lang.String str29 = commApplication26.commOnlySecond(str_array28);
    java.lang.String str30 = calApplication20.printCalForYear(str_array28);
    java.util.List list31 = sortApplication14.sortNumbersSpecialChars(str_array28);
    java.lang.String str32 = commApplication1.commBothMathches(str_array28);
    java.lang.String str33 = bcApplication0.add(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "hi!" };
    java.lang.String str37 = commApplication34.commOnlySecond(str_array36);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array41 = new java.lang.String[] { "hi!" };
    java.lang.String str42 = commApplication39.commOnlySecond(str_array41);
    java.lang.String str43 = calApplication38.printCalForYear(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "hi!" };
    java.lang.String str47 = commApplication44.commOnlySecond(str_array46);
    java.lang.String str48 = calApplication38.printCalForYear(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication49 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication50 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array53 = new java.lang.String[] { "" };
    java.lang.String str54 = calApplication51.printCalForYearMondayFirst(str_array53);
    java.util.List list55 = sortApplication50.sortCapitalNumbersSpecialChars(str_array53);
    java.util.List list56 = sortApplication49.sortSimpleSpecialChars(str_array53);
    java.lang.String str57 = calApplication38.printCal(str_array53);
    java.lang.String str58 = commApplication34.commOnlySecond(str_array53);
    java.lang.String str59 = bcApplication0.number(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array62 = new java.lang.String[] { "hi!" };
    java.lang.String str63 = commApplication60.commOnlySecond(str_array62);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication65 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication66 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array68 = new java.lang.String[] { "hi!" };
    java.lang.String str69 = commApplication66.commOnlySecond(str_array68);
    java.lang.String str70 = calApplication65.printCalForYear(str_array68);
    java.lang.String str71 = commApplication64.commOnlySecond(str_array68);
    java.lang.String str72 = commApplication60.commOnlySecond(str_array68);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication73 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication74 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication75 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array77 = new java.lang.String[] { "" };
    java.lang.String str78 = calApplication75.printCalForYearMondayFirst(str_array77);
    java.util.List list79 = sortApplication74.sortCapitalNumbersSpecialChars(str_array77);
    java.util.List list80 = sortApplication73.sortSimpleSpecialChars(str_array77);
    java.lang.String str81 = commApplication60.commAllMatches(str_array77);
    java.lang.String str82 = bcApplication0.equalEqual(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str24.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str32.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str37.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str42.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str47.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str58.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str63.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str69.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str71.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str72.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str81.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str82);

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test072"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array14 = new java.lang.String[] { "hi!" };
    java.lang.String str15 = commApplication12.commOnlySecond(str_array14);
    java.lang.String str16 = calApplication6.printCalForYear(str_array14);
    java.util.List list17 = sortApplication0.sortNumbersSpecialChars(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication18 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = calApplication19.printCalForYearMondayFirst(str_array21);
    java.util.List list23 = sortApplication18.sortCapitalNumbersSpecialChars(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication24 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = calApplication25.printCalForYearMondayFirst(str_array27);
    java.util.List list29 = sortApplication24.sortCapitalNumbersSpecialChars(str_array27);
    java.util.List list30 = sortApplication18.numericalSortSimpleSpecialChars(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "hi!" };
    java.lang.String str36 = commApplication33.commOnlySecond(str_array35);
    java.lang.String str37 = calApplication32.printCalForYear(str_array35);
    java.lang.String str38 = commApplication31.commOnlySecond(str_array35);
    java.util.List list39 = sortApplication18.sortAll(str_array35);
    java.util.List list40 = sortApplication0.numericalSortNumbersSpecialChars(str_array35);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "" };
    java.lang.String str44 = calApplication41.printCalForYearMondayFirst(str_array43);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array47 = new java.lang.String[] { "hi!" };
    java.lang.String str48 = commApplication45.commOnlySecond(str_array47);
    java.lang.String str49 = calApplication41.printCalWithMondayFirst(str_array47);
    java.util.List list50 = sortApplication0.numericalSortSimpleSpecialChars(str_array47);
    java.lang.String[] str_array51 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list52 = sortApplication0.sortAll(str_array51);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str15.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str36.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str38.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str48.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test073"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    java.lang.String str5 = calApplication0.printCalForYear(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "hi!" };
    java.lang.String str9 = commApplication6.commOnlySecond(str_array8);
    java.lang.String str10 = calApplication0.printCalForYear(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication11 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication12 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "" };
    java.lang.String str16 = calApplication13.printCalForYearMondayFirst(str_array15);
    java.util.List list17 = sortApplication12.sortCapitalNumbersSpecialChars(str_array15);
    java.util.List list18 = sortApplication11.sortSimpleSpecialChars(str_array15);
    java.lang.String str19 = calApplication0.printCal(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = calApplication20.printCalForYearMondayFirst(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = calApplication24.printCalForYearMondayFirst(str_array26);
    java.lang.String str28 = calApplication20.printCal(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "hi!" };
    java.lang.String str33 = commApplication30.commOnlySecond(str_array32);
    java.lang.String str34 = calApplication29.printCalForYear(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array37 = new java.lang.String[] { "hi!" };
    java.lang.String str38 = commApplication35.commOnlySecond(str_array37);
    java.lang.String str39 = calApplication29.printCalForYear(str_array37);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication40 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication41 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array44 = new java.lang.String[] { "" };
    java.lang.String str45 = calApplication42.printCalForYearMondayFirst(str_array44);
    java.util.List list46 = sortApplication41.sortCapitalNumbersSpecialChars(str_array44);
    java.util.List list47 = sortApplication40.sortSimpleSpecialChars(str_array44);
    java.lang.String str48 = calApplication29.printCal(str_array44);
    java.lang.String str49 = calApplication20.printCalForMonthYear(str_array44);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array52 = new java.lang.String[] { "hi!" };
    java.lang.String str53 = commApplication50.commOnlySecond(str_array52);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "hi!" };
    java.lang.String str58 = commApplication55.commOnlySecond(str_array57);
    java.lang.String str59 = calApplication54.printCalForYear(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array62 = new java.lang.String[] { "hi!" };
    java.lang.String str63 = commApplication60.commOnlySecond(str_array62);
    java.lang.String str64 = calApplication54.printCalForYear(str_array62);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication65 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication66 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication67 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array69 = new java.lang.String[] { "" };
    java.lang.String str70 = calApplication67.printCalForYearMondayFirst(str_array69);
    java.util.List list71 = sortApplication66.sortCapitalNumbersSpecialChars(str_array69);
    java.util.List list72 = sortApplication65.sortSimpleSpecialChars(str_array69);
    java.lang.String str73 = calApplication54.printCal(str_array69);
    java.lang.String str74 = commApplication50.commOnlySecond(str_array69);
    java.lang.String str75 = calApplication20.printCalForMonthYearMondayFirst(str_array69);
    java.lang.String str76 = calApplication0.printCalForYearMondayFirst(str_array69);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication77 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication78 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array80 = new java.lang.String[] { "hi!" };
    java.lang.String str81 = commApplication78.commOnlySecond(str_array80);
    java.lang.String str82 = calApplication77.printCalForYear(str_array80);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication83 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array85 = new java.lang.String[] { "hi!" };
    java.lang.String str86 = commApplication83.commOnlySecond(str_array85);
    java.lang.String str87 = calApplication77.printCalForYear(str_array85);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication88 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication89 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication90 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array92 = new java.lang.String[] { "" };
    java.lang.String str93 = calApplication90.printCalForYearMondayFirst(str_array92);
    java.util.List list94 = sortApplication89.sortCapitalNumbersSpecialChars(str_array92);
    java.util.List list95 = sortApplication88.sortSimpleSpecialChars(str_array92);
    java.lang.String str96 = calApplication77.printCal(str_array92);
    java.lang.String str97 = calApplication0.printCalForMonthYear(str_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str9.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str33.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str38.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str53.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str58.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str63.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str74.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str81.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str86.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str97);

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test074"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    java.lang.String str12 = commApplication5.commOnlySecond(str_array9);
    java.lang.String str13 = commApplication1.commOnlySecond(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication14 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "" };
    java.lang.String str18 = calApplication15.printCalForYearMondayFirst(str_array17);
    java.util.List list19 = sortApplication14.sortCapitalNumbersSpecialChars(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array23 = new java.lang.String[] { "hi!" };
    java.lang.String str24 = commApplication21.commOnlySecond(str_array23);
    java.lang.String str25 = calApplication20.printCalForYear(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!" };
    java.lang.String str29 = commApplication26.commOnlySecond(str_array28);
    java.lang.String str30 = calApplication20.printCalForYear(str_array28);
    java.util.List list31 = sortApplication14.sortNumbersSpecialChars(str_array28);
    java.lang.String str32 = commApplication1.commBothMathches(str_array28);
    java.lang.String str33 = bcApplication0.add(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication34 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication35 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication36 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "" };
    java.lang.String str40 = calApplication37.printCalForYearMondayFirst(str_array39);
    java.util.List list41 = sortApplication36.sortCapitalNumbersSpecialChars(str_array39);
    java.util.List list42 = sortApplication35.sortSimpleSpecialChars(str_array39);
    java.io.InputStream inputStream43 = null;
    java.io.OutputStream outputStream44 = null;
    bcApplication34.run(str_array39, inputStream43, outputStream44);
    java.lang.String str46 = bcApplication0.equalEqual(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication47 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array50 = new java.lang.String[] { "" };
    java.lang.String str51 = calApplication48.printCalForYearMondayFirst(str_array50);
    java.util.List list52 = sortApplication47.sortCapitalNumbersSpecialChars(str_array50);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array55 = new java.lang.String[] { "" };
    java.lang.String str56 = calApplication53.printCalForYearMondayFirst(str_array55);
    java.util.List list57 = sortApplication47.numericalSortSimpleCapitalNumber(str_array55);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication58 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication59 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array61 = new java.lang.String[] { "" };
    java.lang.String str62 = calApplication59.printCalForYearMondayFirst(str_array61);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication63 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array65 = new java.lang.String[] { "hi!" };
    java.lang.String str66 = commApplication63.commOnlySecond(str_array65);
    java.lang.String str67 = calApplication59.printCalWithMondayFirst(str_array65);
    java.util.List list68 = sortApplication58.sortCapitalNumbers(str_array65);
    java.util.List list69 = sortApplication47.sortCapitalSpecialChars(str_array65);
    java.lang.String str70 = bcApplication0.greaterThan(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str24.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str32.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str66.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test075"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array14 = new java.lang.String[] { "hi!" };
    java.lang.String str15 = commApplication12.commOnlySecond(str_array14);
    java.lang.String str16 = calApplication6.printCalForYear(str_array14);
    java.util.List list17 = sortApplication0.sortNumbersSpecialChars(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "hi!" };
    java.lang.String str22 = commApplication19.commOnlySecond(str_array21);
    java.lang.String str23 = calApplication18.printCalForYear(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "hi!" };
    java.lang.String str27 = commApplication24.commOnlySecond(str_array26);
    java.lang.String str28 = calApplication18.printCalForYear(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication29 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication30 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "" };
    java.lang.String str34 = calApplication31.printCalForYearMondayFirst(str_array33);
    java.util.List list35 = sortApplication30.sortCapitalNumbersSpecialChars(str_array33);
    java.util.List list36 = sortApplication29.sortSimpleSpecialChars(str_array33);
    java.lang.String str37 = calApplication18.printCal(str_array33);
    java.util.List list38 = sortApplication0.sortStringsSimple(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication39 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array42 = new java.lang.String[] { "" };
    java.lang.String str43 = calApplication40.printCalForYearMondayFirst(str_array42);
    java.util.List list44 = sortApplication39.sortCapitalNumbersSpecialChars(str_array42);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication45 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array48 = new java.lang.String[] { "" };
    java.lang.String str49 = calApplication46.printCalForYearMondayFirst(str_array48);
    java.util.List list50 = sortApplication45.sortCapitalNumbersSpecialChars(str_array48);
    java.util.List list51 = sortApplication39.numericalSortSimpleSpecialChars(str_array48);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array56 = new java.lang.String[] { "hi!" };
    java.lang.String str57 = commApplication54.commOnlySecond(str_array56);
    java.lang.String str58 = calApplication53.printCalForYear(str_array56);
    java.lang.String str59 = commApplication52.commOnlySecond(str_array56);
    java.util.List list60 = sortApplication39.sortAll(str_array56);
    java.util.List list61 = sortApplication0.numericalSortSimpleNumbers(str_array56);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array64 = new java.lang.String[] { "hi!" };
    java.lang.String str65 = commApplication62.commOnlySecond(str_array64);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication66 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication67 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array69 = new java.lang.String[] { "" };
    java.lang.String str70 = calApplication67.printCalForYearMondayFirst(str_array69);
    java.util.List list71 = sortApplication66.sortCapitalNumbersSpecialChars(str_array69);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication72 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication73 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array75 = new java.lang.String[] { "" };
    java.lang.String str76 = calApplication73.printCalForYearMondayFirst(str_array75);
    java.util.List list77 = sortApplication72.sortCapitalNumbersSpecialChars(str_array75);
    java.util.List list78 = sortApplication66.numericalSortSimpleSpecialChars(str_array75);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication79 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication80 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication81 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array83 = new java.lang.String[] { "hi!" };
    java.lang.String str84 = commApplication81.commOnlySecond(str_array83);
    java.lang.String str85 = calApplication80.printCalForYear(str_array83);
    java.lang.String str86 = commApplication79.commOnlySecond(str_array83);
    java.util.List list87 = sortApplication66.sortAll(str_array83);
    java.lang.String str88 = commApplication62.commOnlyFirst(str_array83);
    java.util.List list89 = sortApplication0.sortNumbersSpecialChars(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str15.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str22.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str27.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str57.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str59.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str65.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str84.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str86.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str88.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list89);

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test076"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    java.util.List list12 = sortApplication0.numericalSortSimpleSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "hi!" };
    java.lang.String str17 = commApplication14.commOnlySecond(str_array16);
    java.lang.String str18 = calApplication13.printCalForYear(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = calApplication19.printCalForYearMondayFirst(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array25 = new java.lang.String[] { "hi!" };
    java.lang.String str26 = commApplication23.commOnlySecond(str_array25);
    java.lang.String str27 = calApplication19.printCalWithMondayFirst(str_array25);
    java.lang.String str28 = calApplication13.printCalWithMondayFirst(str_array25);
    java.util.List list29 = sortApplication0.numericalSortStringsSimple(str_array25);
    java.lang.String[] str_array30 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list31 = sortApplication0.sortCapitalNumbersSpecialChars(str_array30);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str17.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str26.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test077"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication2 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = calApplication3.printCalForYearMondayFirst(str_array5);
    java.util.List list7 = sortApplication2.sortCapitalNumbersSpecialChars(str_array5);
    java.util.List list8 = sortApplication1.sortSimpleSpecialChars(str_array5);
    java.io.InputStream inputStream9 = null;
    java.io.OutputStream outputStream10 = null;
    bcApplication0.run(str_array5, inputStream9, outputStream10);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication12 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "" };
    java.lang.String str16 = calApplication13.printCalForYearMondayFirst(str_array15);
    java.util.List list17 = sortApplication12.sortCapitalNumbersSpecialChars(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "hi!" };
    java.lang.String str22 = commApplication19.commOnlySecond(str_array21);
    java.lang.String str23 = calApplication18.printCalForYear(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "hi!" };
    java.lang.String str27 = commApplication24.commOnlySecond(str_array26);
    java.lang.String str28 = calApplication18.printCalForYear(str_array26);
    java.util.List list29 = sortApplication12.sortNumbersSpecialChars(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "hi!" };
    java.lang.String str34 = commApplication31.commOnlySecond(str_array33);
    java.lang.String str35 = calApplication30.printCalForYear(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array38 = new java.lang.String[] { "hi!" };
    java.lang.String str39 = commApplication36.commOnlySecond(str_array38);
    java.lang.String str40 = calApplication30.printCalForYear(str_array38);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication41 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication42 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array45 = new java.lang.String[] { "" };
    java.lang.String str46 = calApplication43.printCalForYearMondayFirst(str_array45);
    java.util.List list47 = sortApplication42.sortCapitalNumbersSpecialChars(str_array45);
    java.util.List list48 = sortApplication41.sortSimpleSpecialChars(str_array45);
    java.lang.String str49 = calApplication30.printCal(str_array45);
    java.util.List list50 = sortApplication12.sortStringsSimple(str_array45);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication51 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array54 = new java.lang.String[] { "" };
    java.lang.String str55 = calApplication52.printCalForYearMondayFirst(str_array54);
    java.util.List list56 = sortApplication51.sortCapitalNumbersSpecialChars(str_array54);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array60 = new java.lang.String[] { "hi!" };
    java.lang.String str61 = commApplication58.commOnlySecond(str_array60);
    java.lang.String str62 = calApplication57.printCalForYear(str_array60);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication63 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array65 = new java.lang.String[] { "hi!" };
    java.lang.String str66 = commApplication63.commOnlySecond(str_array65);
    java.lang.String str67 = calApplication57.printCalForYear(str_array65);
    java.util.List list68 = sortApplication51.sortNumbersSpecialChars(str_array65);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication69 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication70 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array72 = new java.lang.String[] { "" };
    java.lang.String str73 = calApplication70.printCalForYearMondayFirst(str_array72);
    java.util.List list74 = sortApplication69.sortCapitalNumbersSpecialChars(str_array72);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication75 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication76 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array78 = new java.lang.String[] { "" };
    java.lang.String str79 = calApplication76.printCalForYearMondayFirst(str_array78);
    java.util.List list80 = sortApplication75.sortCapitalNumbersSpecialChars(str_array78);
    java.util.List list81 = sortApplication69.numericalSortSimpleSpecialChars(str_array78);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication82 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication83 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication84 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array86 = new java.lang.String[] { "hi!" };
    java.lang.String str87 = commApplication84.commOnlySecond(str_array86);
    java.lang.String str88 = calApplication83.printCalForYear(str_array86);
    java.lang.String str89 = commApplication82.commOnlySecond(str_array86);
    java.util.List list90 = sortApplication69.sortAll(str_array86);
    java.util.List list91 = sortApplication51.numericalSortNumbersSpecialChars(str_array86);
    java.util.List list92 = sortApplication12.numericalSortCapitalNumbers(str_array86);
    java.lang.String str93 = bcApplication0.notEqual(str_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str22.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str27.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str61.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str66.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str87.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str89.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str93);

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test078"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    java.util.List list12 = sortApplication0.numericalSortSimpleSpecialChars(str_array9);
    java.lang.String[] str_array14 = new java.lang.String[] { "" };
    java.util.List list15 = sortApplication0.sortSimpleCapitalSpecialChars(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication16 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication17 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array20 = new java.lang.String[] { "" };
    java.lang.String str21 = calApplication18.printCalForYearMondayFirst(str_array20);
    java.util.List list22 = sortApplication17.sortCapitalNumbersSpecialChars(str_array20);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = calApplication24.printCalForYearMondayFirst(str_array26);
    java.util.List list28 = sortApplication23.sortCapitalNumbersSpecialChars(str_array26);
    java.util.List list29 = sortApplication17.numericalSortSimpleSpecialChars(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "hi!" };
    java.lang.String str35 = commApplication32.commOnlySecond(str_array34);
    java.lang.String str36 = calApplication31.printCalForYear(str_array34);
    java.lang.String str37 = commApplication30.commOnlySecond(str_array34);
    java.util.List list38 = sortApplication17.sortAll(str_array34);
    java.util.List list39 = sortApplication16.sortSimpleCapitalSpecialChars(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication40 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "hi!" };
    java.lang.String str44 = commApplication41.commOnlySecond(str_array43);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array49 = new java.lang.String[] { "hi!" };
    java.lang.String str50 = commApplication47.commOnlySecond(str_array49);
    java.lang.String str51 = calApplication46.printCalForYear(str_array49);
    java.lang.String str52 = commApplication45.commOnlySecond(str_array49);
    java.lang.String str53 = commApplication41.commOnlySecond(str_array49);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication54 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication55 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array58 = new java.lang.String[] { "" };
    java.lang.String str59 = calApplication56.printCalForYearMondayFirst(str_array58);
    java.util.List list60 = sortApplication55.sortCapitalNumbersSpecialChars(str_array58);
    java.util.List list61 = sortApplication54.sortSimpleSpecialChars(str_array58);
    java.lang.String str62 = commApplication41.commAllMatches(str_array58);
    java.lang.String str63 = bcApplication40.lessThan(str_array58);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array66 = new java.lang.String[] { "" };
    java.lang.String str67 = calApplication64.printCalForYearMondayFirst(str_array66);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array70 = new java.lang.String[] { "" };
    java.lang.String str71 = calApplication68.printCalForYearMondayFirst(str_array70);
    java.lang.String str72 = calApplication64.printCal(str_array70);
    java.lang.String str73 = bcApplication40.and(str_array70);
    java.util.List list74 = sortApplication16.numericalSortSimpleCapital(str_array70);
    java.util.List list75 = sortApplication0.numericalSortCapitalNumbersSpecialChars(str_array70);
    java.lang.String[] str_array76 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list77 = sortApplication0.sortStringsSimple(str_array76);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str35.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str37.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str44.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str50.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str52.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str53.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str62.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test079"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    java.lang.String str12 = commApplication5.commOnlySecond(str_array9);
    java.lang.String str13 = commApplication1.commOnlySecond(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication14 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication15 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "" };
    java.lang.String str19 = calApplication16.printCalForYearMondayFirst(str_array18);
    java.util.List list20 = sortApplication15.sortCapitalNumbersSpecialChars(str_array18);
    java.util.List list21 = sortApplication14.sortSimpleSpecialChars(str_array18);
    java.lang.String str22 = commApplication1.commAllMatches(str_array18);
    java.lang.String str23 = bcApplication0.lessThan(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "hi!" };
    java.lang.String str28 = commApplication25.commOnlySecond(str_array27);
    java.lang.String str29 = calApplication24.printCalForYear(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "hi!" };
    java.lang.String str33 = commApplication30.commOnlySecond(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array38 = new java.lang.String[] { "hi!" };
    java.lang.String str39 = commApplication36.commOnlySecond(str_array38);
    java.lang.String str40 = calApplication35.printCalForYear(str_array38);
    java.lang.String str41 = commApplication34.commOnlySecond(str_array38);
    java.lang.String str42 = commApplication30.commOnlySecond(str_array38);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication43 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = calApplication44.printCalForYearMondayFirst(str_array46);
    java.util.List list48 = sortApplication43.sortCapitalNumbersSpecialChars(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array52 = new java.lang.String[] { "hi!" };
    java.lang.String str53 = commApplication50.commOnlySecond(str_array52);
    java.lang.String str54 = calApplication49.printCalForYear(str_array52);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "hi!" };
    java.lang.String str58 = commApplication55.commOnlySecond(str_array57);
    java.lang.String str59 = calApplication49.printCalForYear(str_array57);
    java.util.List list60 = sortApplication43.sortNumbersSpecialChars(str_array57);
    java.lang.String str61 = commApplication30.commBothMathches(str_array57);
    java.lang.String str62 = calApplication24.printCalForMonthYearMondayFirst(str_array57);
    java.lang.String str63 = bcApplication0.number(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array66 = new java.lang.String[] { "hi!" };
    java.lang.String str67 = commApplication64.commOnlySecond(str_array66);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication69 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication70 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array72 = new java.lang.String[] { "hi!" };
    java.lang.String str73 = commApplication70.commOnlySecond(str_array72);
    java.lang.String str74 = calApplication69.printCalForYear(str_array72);
    java.lang.String str75 = commApplication68.commOnlySecond(str_array72);
    java.lang.String str76 = commApplication64.commOnlySecond(str_array72);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication77 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication78 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication79 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array81 = new java.lang.String[] { "" };
    java.lang.String str82 = calApplication79.printCalForYearMondayFirst(str_array81);
    java.util.List list83 = sortApplication78.sortCapitalNumbersSpecialChars(str_array81);
    java.util.List list84 = sortApplication77.sortSimpleSpecialChars(str_array81);
    java.lang.String str85 = commApplication64.commAllMatches(str_array81);
    java.lang.String str86 = bcApplication0.or(str_array81);
    java.lang.String[] str_array87 = null;
    java.lang.String str88 = bcApplication0.negate(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str22.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str28.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str33.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str41.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str42.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str53.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str58.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str61.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str67.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str73.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str75.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str76.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str85.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str88);

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test080"); }


    sg.edu.nus.comp.cs4218.impl.app.DateApplication dateApplication0 = new sg.edu.nus.comp.cs4218.impl.app.DateApplication();
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication1 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication2 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = calApplication3.printCalForYearMondayFirst(str_array5);
    java.util.List list7 = sortApplication2.sortCapitalNumbersSpecialChars(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication8 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array11 = new java.lang.String[] { "" };
    java.lang.String str12 = calApplication9.printCalForYearMondayFirst(str_array11);
    java.util.List list13 = sortApplication8.sortCapitalNumbersSpecialChars(str_array11);
    java.util.List list14 = sortApplication2.numericalSortSimpleSpecialChars(str_array11);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "hi!" };
    java.lang.String str20 = commApplication17.commOnlySecond(str_array19);
    java.lang.String str21 = calApplication16.printCalForYear(str_array19);
    java.lang.String str22 = commApplication15.commOnlySecond(str_array19);
    java.util.List list23 = sortApplication2.sortAll(str_array19);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication24 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication25 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "" };
    java.lang.String str29 = calApplication26.printCalForYearMondayFirst(str_array28);
    java.util.List list30 = sortApplication25.sortCapitalNumbersSpecialChars(str_array28);
    java.util.List list31 = sortApplication24.sortSimpleSpecialChars(str_array28);
    java.util.List list32 = sortApplication2.numericalSortCapitalSpecialChars(str_array28);
    java.lang.String str33 = bcApplication1.subtract(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array37 = new java.lang.String[] { "hi!" };
    java.lang.String str38 = commApplication35.commOnlySecond(str_array37);
    java.lang.String str39 = calApplication34.printCalForYear(str_array37);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array42 = new java.lang.String[] { "hi!" };
    java.lang.String str43 = commApplication40.commOnlySecond(str_array42);
    java.lang.String str44 = calApplication34.printCalForYear(str_array42);
    java.lang.String str45 = bcApplication1.and(str_array42);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array48 = new java.lang.String[] { "hi!" };
    java.lang.String str49 = commApplication46.commOnlySecond(str_array48);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array54 = new java.lang.String[] { "hi!" };
    java.lang.String str55 = commApplication52.commOnlySecond(str_array54);
    java.lang.String str56 = calApplication51.printCalForYear(str_array54);
    java.lang.String str57 = commApplication50.commOnlySecond(str_array54);
    java.lang.String str58 = commApplication46.commOnlySecond(str_array54);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication59 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication60 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array63 = new java.lang.String[] { "" };
    java.lang.String str64 = calApplication61.printCalForYearMondayFirst(str_array63);
    java.util.List list65 = sortApplication60.sortCapitalNumbersSpecialChars(str_array63);
    java.util.List list66 = sortApplication59.sortSimpleSpecialChars(str_array63);
    java.lang.String str67 = commApplication46.commAllMatches(str_array63);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication68 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication69 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication70 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array72 = new java.lang.String[] { "" };
    java.lang.String str73 = calApplication70.printCalForYearMondayFirst(str_array72);
    java.util.List list74 = sortApplication69.sortCapitalNumbersSpecialChars(str_array72);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication75 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication76 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array78 = new java.lang.String[] { "hi!" };
    java.lang.String str79 = commApplication76.commOnlySecond(str_array78);
    java.lang.String str80 = calApplication75.printCalForYear(str_array78);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication81 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array83 = new java.lang.String[] { "hi!" };
    java.lang.String str84 = commApplication81.commOnlySecond(str_array83);
    java.lang.String str85 = calApplication75.printCalForYear(str_array83);
    java.util.List list86 = sortApplication69.sortNumbersSpecialChars(str_array83);
    java.lang.String str87 = bcApplication68.notEqual(str_array83);
    java.lang.String str88 = commApplication46.commNoMatches(str_array83);
    java.lang.String str89 = bcApplication1.lessThanOrEqual(str_array83);
    java.io.InputStream inputStream90 = null;
    java.io.OutputStream outputStream91 = null;
    // The following exception was thrown during execution in test generation
    try {
      dateApplication0.run(str_array83, inputStream90, outputStream91);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException");
    } catch (sg.edu.nus.comp.cs4218.exception.DateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.DateException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str22.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str38.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str43.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str49.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str55.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str57.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str58.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str67.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str79.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str84.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str88.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str89);

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test081"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    java.lang.String str5 = calApplication0.printCalForYear(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "" };
    java.lang.String str9 = calApplication6.printCalForYearMondayFirst(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array12 = new java.lang.String[] { "hi!" };
    java.lang.String str13 = commApplication10.commOnlySecond(str_array12);
    java.lang.String str14 = calApplication6.printCalWithMondayFirst(str_array12);
    java.lang.String str15 = calApplication0.printCalWithMondayFirst(str_array12);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "" };
    java.lang.String str19 = calApplication16.printCalForYearMondayFirst(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = calApplication20.printCalForYearMondayFirst(str_array22);
    java.lang.String str24 = calApplication16.printCal(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!" };
    java.lang.String str29 = commApplication26.commOnlySecond(str_array28);
    java.lang.String str30 = calApplication25.printCalForYear(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "hi!" };
    java.lang.String str34 = commApplication31.commOnlySecond(str_array33);
    java.lang.String str35 = calApplication25.printCalForYear(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication36 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication37 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "" };
    java.lang.String str41 = calApplication38.printCalForYearMondayFirst(str_array40);
    java.util.List list42 = sortApplication37.sortCapitalNumbersSpecialChars(str_array40);
    java.util.List list43 = sortApplication36.sortSimpleSpecialChars(str_array40);
    java.lang.String str44 = calApplication25.printCal(str_array40);
    java.lang.String str45 = calApplication16.printCalForMonthYear(str_array40);
    java.lang.String str46 = calApplication0.printCal(str_array40);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array49 = new java.lang.String[] { "hi!" };
    java.lang.String str50 = commApplication47.commOnlySecond(str_array49);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array55 = new java.lang.String[] { "hi!" };
    java.lang.String str56 = commApplication53.commOnlySecond(str_array55);
    java.lang.String str57 = calApplication52.printCalForYear(str_array55);
    java.lang.String str58 = commApplication51.commOnlySecond(str_array55);
    java.lang.String str59 = commApplication47.commOnlySecond(str_array55);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication60 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication61 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array64 = new java.lang.String[] { "" };
    java.lang.String str65 = calApplication62.printCalForYearMondayFirst(str_array64);
    java.util.List list66 = sortApplication61.sortCapitalNumbersSpecialChars(str_array64);
    java.util.List list67 = sortApplication60.sortSimpleSpecialChars(str_array64);
    java.lang.String str68 = commApplication47.commAllMatches(str_array64);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication69 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication70 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication71 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array73 = new java.lang.String[] { "" };
    java.lang.String str74 = calApplication71.printCalForYearMondayFirst(str_array73);
    java.util.List list75 = sortApplication70.sortCapitalNumbersSpecialChars(str_array73);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication76 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication77 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array79 = new java.lang.String[] { "hi!" };
    java.lang.String str80 = commApplication77.commOnlySecond(str_array79);
    java.lang.String str81 = calApplication76.printCalForYear(str_array79);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication82 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array84 = new java.lang.String[] { "hi!" };
    java.lang.String str85 = commApplication82.commOnlySecond(str_array84);
    java.lang.String str86 = calApplication76.printCalForYear(str_array84);
    java.util.List list87 = sortApplication70.sortNumbersSpecialChars(str_array84);
    java.lang.String str88 = bcApplication69.notEqual(str_array84);
    java.lang.String str89 = commApplication47.commNoMatches(str_array84);
    java.lang.String str90 = calApplication0.printCalForMonthYear(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str50.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str56.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str58.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str59.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str68.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str80.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str85.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str89.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str90);

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test082"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    java.util.List list7 = sortApplication0.sortSimpleSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "hi!" };
    java.lang.String str17 = commApplication14.commOnlySecond(str_array16);
    java.lang.String str18 = calApplication13.printCalForYear(str_array16);
    java.lang.String str19 = commApplication12.commOnlySecond(str_array16);
    java.lang.String str20 = commApplication8.commOnlySecond(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication21 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array24 = new java.lang.String[] { "" };
    java.lang.String str25 = calApplication22.printCalForYearMondayFirst(str_array24);
    java.util.List list26 = sortApplication21.sortCapitalNumbersSpecialChars(str_array24);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array30 = new java.lang.String[] { "hi!" };
    java.lang.String str31 = commApplication28.commOnlySecond(str_array30);
    java.lang.String str32 = calApplication27.printCalForYear(str_array30);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "hi!" };
    java.lang.String str36 = commApplication33.commOnlySecond(str_array35);
    java.lang.String str37 = calApplication27.printCalForYear(str_array35);
    java.util.List list38 = sortApplication21.sortNumbersSpecialChars(str_array35);
    java.lang.String str39 = commApplication8.commBothMathches(str_array35);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array42 = new java.lang.String[] { "hi!" };
    java.lang.String str43 = commApplication40.commOnlySecond(str_array42);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array48 = new java.lang.String[] { "hi!" };
    java.lang.String str49 = commApplication46.commOnlySecond(str_array48);
    java.lang.String str50 = calApplication45.printCalForYear(str_array48);
    java.lang.String str51 = commApplication44.commOnlySecond(str_array48);
    java.lang.String str52 = commApplication40.commOnlySecond(str_array48);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication53 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication54 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "" };
    java.lang.String str58 = calApplication55.printCalForYearMondayFirst(str_array57);
    java.util.List list59 = sortApplication54.sortCapitalNumbersSpecialChars(str_array57);
    java.util.List list60 = sortApplication53.sortSimpleSpecialChars(str_array57);
    java.lang.String str61 = commApplication40.commAllMatches(str_array57);
    java.lang.String str62 = commApplication8.commNoMatches(str_array57);
    java.util.List list63 = sortApplication0.sortSimpleCapitalSpecialChars(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str17.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str31.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str36.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str43.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str49.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str51.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str52.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str61.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str62.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test083"); }


    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array2 = new java.lang.String[] { "hi!" };
    java.lang.String str3 = commApplication0.commOnlySecond(str_array2);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication4 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "hi!" };
    java.lang.String str9 = commApplication6.commOnlySecond(str_array8);
    java.lang.String str10 = calApplication5.printCalForYear(str_array8);
    java.lang.String str11 = commApplication4.commOnlySecond(str_array8);
    java.lang.String str12 = commApplication0.commOnlySecond(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication13 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication14 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "" };
    java.lang.String str18 = calApplication15.printCalForYearMondayFirst(str_array17);
    java.util.List list19 = sortApplication14.sortCapitalNumbersSpecialChars(str_array17);
    java.util.List list20 = sortApplication13.sortSimpleSpecialChars(str_array17);
    java.lang.String str21 = commApplication0.commAllMatches(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array24 = new java.lang.String[] { "" };
    java.lang.String str25 = calApplication22.printCalForYearMondayFirst(str_array24);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "" };
    java.lang.String str29 = calApplication26.printCalForYearMondayFirst(str_array28);
    java.lang.String str30 = calApplication22.printCal(str_array28);
    java.lang.String str31 = commApplication0.commNoMatches(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str3.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str9.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str21.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str31.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test084"); }


    sg.edu.nus.comp.cs4218.impl.app.FmtApplication fmtApplication0 = new sg.edu.nus.comp.cs4218.impl.app.FmtApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = calApplication8.printCalForYearMondayFirst(str_array10);
    java.util.List list12 = sortApplication7.sortCapitalNumbersSpecialChars(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "hi!" };
    java.lang.String str17 = commApplication14.commOnlySecond(str_array16);
    java.lang.String str18 = calApplication13.printCalForYear(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "hi!" };
    java.lang.String str22 = commApplication19.commOnlySecond(str_array21);
    java.lang.String str23 = calApplication13.printCalForYear(str_array21);
    java.util.List list24 = sortApplication7.sortNumbersSpecialChars(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "" };
    java.lang.String str29 = calApplication26.printCalForYearMondayFirst(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "" };
    java.lang.String str33 = calApplication30.printCalForYearMondayFirst(str_array32);
    java.lang.String str34 = calApplication26.printCal(str_array32);
    java.lang.String str35 = calApplication25.printCal(str_array32);
    java.util.List list36 = sortApplication7.numericalSortCapitalNumbersSpecialChars(str_array32);
    java.util.List list37 = sortApplication1.numericalSortCapitalNumbersSpecialChars(str_array32);
    java.io.InputStream inputStream38 = null;
    java.io.OutputStream outputStream39 = null;
    // The following exception was thrown during execution in test generation
    try {
      fmtApplication0.run(str_array32, inputStream38, outputStream39);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.FmtException");
    } catch (sg.edu.nus.comp.cs4218.exception.FmtException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.FmtException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.FmtException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str17.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str22.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test085"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    java.lang.String str12 = commApplication5.commOnlySecond(str_array9);
    java.lang.String str13 = commApplication1.commOnlySecond(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication14 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "" };
    java.lang.String str18 = calApplication15.printCalForYearMondayFirst(str_array17);
    java.util.List list19 = sortApplication14.sortCapitalNumbersSpecialChars(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array23 = new java.lang.String[] { "hi!" };
    java.lang.String str24 = commApplication21.commOnlySecond(str_array23);
    java.lang.String str25 = calApplication20.printCalForYear(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!" };
    java.lang.String str29 = commApplication26.commOnlySecond(str_array28);
    java.lang.String str30 = calApplication20.printCalForYear(str_array28);
    java.util.List list31 = sortApplication14.sortNumbersSpecialChars(str_array28);
    java.lang.String str32 = commApplication1.commBothMathches(str_array28);
    java.lang.String str33 = bcApplication0.add(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication34 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication35 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication36 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "" };
    java.lang.String str40 = calApplication37.printCalForYearMondayFirst(str_array39);
    java.util.List list41 = sortApplication36.sortCapitalNumbersSpecialChars(str_array39);
    java.util.List list42 = sortApplication35.sortSimpleSpecialChars(str_array39);
    java.io.InputStream inputStream43 = null;
    java.io.OutputStream outputStream44 = null;
    bcApplication34.run(str_array39, inputStream43, outputStream44);
    java.lang.String str46 = bcApplication0.equalEqual(str_array39);
    java.lang.String[] str_array47 = null;
    java.lang.String str48 = bcApplication0.equalEqual(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication49 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array52 = new java.lang.String[] { "" };
    java.lang.String str53 = calApplication50.printCalForYearMondayFirst(str_array52);
    java.util.List list54 = sortApplication49.sortCapitalNumbersSpecialChars(str_array52);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "" };
    java.lang.String str58 = calApplication55.printCalForYearMondayFirst(str_array57);
    java.util.List list59 = sortApplication49.numericalSortSimpleCapitalNumber(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication60 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array63 = new java.lang.String[] { "" };
    java.lang.String str64 = calApplication61.printCalForYearMondayFirst(str_array63);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication65 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array67 = new java.lang.String[] { "hi!" };
    java.lang.String str68 = commApplication65.commOnlySecond(str_array67);
    java.lang.String str69 = calApplication61.printCalWithMondayFirst(str_array67);
    java.util.List list70 = sortApplication60.sortCapitalNumbers(str_array67);
    java.util.List list71 = sortApplication49.sortCapitalSpecialChars(str_array67);
    java.lang.String str72 = bcApplication0.or(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str24.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str32.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str68.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test086"); }


    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    java.lang.String str6 = calApplication1.printCalForYear(str_array4);
    java.lang.String str7 = commApplication0.commOnlySecond(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication8 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array11 = new java.lang.String[] { "" };
    java.lang.String str12 = calApplication9.printCalForYearMondayFirst(str_array11);
    java.util.List list13 = sortApplication8.sortCapitalNumbersSpecialChars(str_array11);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "" };
    java.lang.String str17 = calApplication14.printCalForYearMondayFirst(str_array16);
    java.util.List list18 = sortApplication8.numericalSortSimpleCapitalNumber(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication19 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = calApplication20.printCalForYearMondayFirst(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "hi!" };
    java.lang.String str27 = commApplication24.commOnlySecond(str_array26);
    java.lang.String str28 = calApplication20.printCalWithMondayFirst(str_array26);
    java.util.List list29 = sortApplication19.sortCapitalNumbers(str_array26);
    java.util.List list30 = sortApplication8.sortCapitalSpecialChars(str_array26);
    java.io.InputStream inputStream31 = null;
    java.io.OutputStream outputStream32 = null;
    // The following exception was thrown during execution in test generation
    try {
      commApplication0.run(str_array26, inputStream31, outputStream32);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CommException");
    } catch (sg.edu.nus.comp.cs4218.exception.CommException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.CommException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CommException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str7.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str27.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test087"); }


    sg.edu.nus.comp.cs4218.impl.app.CatApplication catApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CatApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    java.lang.String str12 = commApplication5.commOnlySecond(str_array9);
    java.lang.String str13 = commApplication1.commOnlySecond(str_array9);
    java.io.InputStream inputStream14 = null;
    java.io.OutputStream outputStream15 = null;
    // The following exception was thrown during execution in test generation
    try {
      catApplication0.run(str_array9, inputStream14, outputStream15);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CatException");
    } catch (sg.edu.nus.comp.cs4218.exception.CatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.CatException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CatException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test088"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    java.util.List list12 = sortApplication0.numericalSortSimpleSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!" };
    java.lang.String str18 = commApplication15.commOnlySecond(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    java.lang.String str20 = commApplication13.commOnlySecond(str_array17);
    java.util.List list21 = sortApplication0.sortAll(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication22 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = calApplication24.printCalForYearMondayFirst(str_array26);
    java.util.List list28 = sortApplication23.sortCapitalNumbersSpecialChars(str_array26);
    java.util.List list29 = sortApplication22.sortSimpleSpecialChars(str_array26);
    java.util.List list30 = sortApplication0.numericalSortCapitalSpecialChars(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "hi!" };
    java.lang.String str36 = commApplication33.commOnlySecond(str_array35);
    java.lang.String str37 = calApplication32.printCalForYear(str_array35);
    java.lang.String str38 = commApplication31.commOnlySecond(str_array35);
    java.util.List list39 = sortApplication0.sortAll(str_array35);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array42 = new java.lang.String[] { "hi!" };
    java.lang.String str43 = commApplication40.commOnlySecond(str_array42);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array48 = new java.lang.String[] { "hi!" };
    java.lang.String str49 = commApplication46.commOnlySecond(str_array48);
    java.lang.String str50 = calApplication45.printCalForYear(str_array48);
    java.lang.String str51 = commApplication44.commOnlySecond(str_array48);
    java.lang.String str52 = commApplication40.commOnlySecond(str_array48);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication53 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication54 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "" };
    java.lang.String str58 = calApplication55.printCalForYearMondayFirst(str_array57);
    java.util.List list59 = sortApplication54.sortCapitalNumbersSpecialChars(str_array57);
    java.util.List list60 = sortApplication53.sortSimpleSpecialChars(str_array57);
    java.lang.String str61 = commApplication40.commAllMatches(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication62 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication63 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array66 = new java.lang.String[] { "" };
    java.lang.String str67 = calApplication64.printCalForYearMondayFirst(str_array66);
    java.util.List list68 = sortApplication63.sortCapitalNumbersSpecialChars(str_array66);
    java.util.List list69 = sortApplication62.sortSimpleSpecialChars(str_array66);
    java.lang.String str70 = commApplication40.commAllMatches(str_array66);
    java.util.List list71 = sortApplication0.numericalSortAll(str_array66);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication72 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication73 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array75 = new java.lang.String[] { "" };
    java.lang.String str76 = calApplication73.printCalForYearMondayFirst(str_array75);
    java.util.List list77 = sortApplication72.sortCapitalNumbersSpecialChars(str_array75);
    java.util.List list78 = sortApplication0.sortCapitalSpecialChars(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str36.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str38.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str43.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str49.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str51.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str52.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str61.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str70.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test089"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array2 = new java.lang.String[] { "" };
    java.lang.String str3 = calApplication0.printCalForYearMondayFirst(str_array2);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication4 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array7 = new java.lang.String[] { "" };
    java.lang.String str8 = calApplication5.printCalForYearMondayFirst(str_array7);
    java.util.List list9 = sortApplication4.sortCapitalNumbersSpecialChars(str_array7);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array13 = new java.lang.String[] { "hi!" };
    java.lang.String str14 = commApplication11.commOnlySecond(str_array13);
    java.lang.String str15 = calApplication10.printCalForYear(str_array13);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "hi!" };
    java.lang.String str19 = commApplication16.commOnlySecond(str_array18);
    java.lang.String str20 = calApplication10.printCalForYear(str_array18);
    java.util.List list21 = sortApplication4.sortNumbersSpecialChars(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication22 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array25 = new java.lang.String[] { "" };
    java.lang.String str26 = calApplication23.printCalForYearMondayFirst(str_array25);
    java.util.List list27 = sortApplication22.sortCapitalNumbersSpecialChars(str_array25);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array31 = new java.lang.String[] { "hi!" };
    java.lang.String str32 = commApplication29.commOnlySecond(str_array31);
    java.lang.String str33 = calApplication28.printCalForYear(str_array31);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "hi!" };
    java.lang.String str37 = commApplication34.commOnlySecond(str_array36);
    java.lang.String str38 = calApplication28.printCalForYear(str_array36);
    java.util.List list39 = sortApplication22.sortNumbersSpecialChars(str_array36);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication40 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "" };
    java.lang.String str44 = calApplication41.printCalForYearMondayFirst(str_array43);
    java.util.List list45 = sortApplication40.sortCapitalNumbersSpecialChars(str_array43);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication46 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array49 = new java.lang.String[] { "" };
    java.lang.String str50 = calApplication47.printCalForYearMondayFirst(str_array49);
    java.util.List list51 = sortApplication46.sortCapitalNumbersSpecialChars(str_array49);
    java.util.List list52 = sortApplication40.numericalSortSimpleSpecialChars(str_array49);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "hi!" };
    java.lang.String str58 = commApplication55.commOnlySecond(str_array57);
    java.lang.String str59 = calApplication54.printCalForYear(str_array57);
    java.lang.String str60 = commApplication53.commOnlySecond(str_array57);
    java.util.List list61 = sortApplication40.sortAll(str_array57);
    java.util.List list62 = sortApplication22.numericalSortNumbersSpecialChars(str_array57);
    java.util.List list63 = sortApplication4.numericalSortNumbersSpecialChars(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication64 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication65 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication66 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array68 = new java.lang.String[] { "" };
    java.lang.String str69 = calApplication66.printCalForYearMondayFirst(str_array68);
    java.util.List list70 = sortApplication65.sortCapitalNumbersSpecialChars(str_array68);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication71 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication72 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array74 = new java.lang.String[] { "" };
    java.lang.String str75 = calApplication72.printCalForYearMondayFirst(str_array74);
    java.util.List list76 = sortApplication71.sortCapitalNumbersSpecialChars(str_array74);
    java.util.List list77 = sortApplication65.numericalSortSimpleSpecialChars(str_array74);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication78 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication79 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication80 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array82 = new java.lang.String[] { "hi!" };
    java.lang.String str83 = commApplication80.commOnlySecond(str_array82);
    java.lang.String str84 = calApplication79.printCalForYear(str_array82);
    java.lang.String str85 = commApplication78.commOnlySecond(str_array82);
    java.util.List list86 = sortApplication65.sortAll(str_array82);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication87 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication88 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication89 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array91 = new java.lang.String[] { "" };
    java.lang.String str92 = calApplication89.printCalForYearMondayFirst(str_array91);
    java.util.List list93 = sortApplication88.sortCapitalNumbersSpecialChars(str_array91);
    java.util.List list94 = sortApplication87.sortSimpleSpecialChars(str_array91);
    java.util.List list95 = sortApplication65.numericalSortCapitalSpecialChars(str_array91);
    java.lang.String str96 = bcApplication64.subtract(str_array91);
    java.util.List list97 = sortApplication4.sortNumbers(str_array91);
    java.lang.String str98 = calApplication0.printCalForYearMondayFirst(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str14.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str32.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str37.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str58.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str60.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str83.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str85.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str98);

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test090"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication12.printCalForYear(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!" };
    java.lang.String str21 = commApplication18.commOnlySecond(str_array20);
    java.lang.String str22 = calApplication12.printCalForYear(str_array20);
    java.util.List list23 = sortApplication6.sortNumbersSpecialChars(str_array20);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = calApplication25.printCalForYearMondayFirst(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array31 = new java.lang.String[] { "" };
    java.lang.String str32 = calApplication29.printCalForYearMondayFirst(str_array31);
    java.lang.String str33 = calApplication25.printCal(str_array31);
    java.lang.String str34 = calApplication24.printCal(str_array31);
    java.util.List list35 = sortApplication6.numericalSortCapitalNumbersSpecialChars(str_array31);
    java.util.List list36 = sortApplication0.numericalSortCapitalNumbersSpecialChars(str_array31);
    java.lang.String[] str_array38 = new java.lang.String[] { "comm: terminated with error message comm: file is not readable" };
    java.util.List list39 = sortApplication0.numericalSortAll(str_array38);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication40 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication41 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array44 = new java.lang.String[] { "" };
    java.lang.String str45 = calApplication42.printCalForYearMondayFirst(str_array44);
    java.util.List list46 = sortApplication41.sortCapitalNumbersSpecialChars(str_array44);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication47 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array50 = new java.lang.String[] { "" };
    java.lang.String str51 = calApplication48.printCalForYearMondayFirst(str_array50);
    java.util.List list52 = sortApplication47.sortCapitalNumbersSpecialChars(str_array50);
    java.util.List list53 = sortApplication41.numericalSortSimpleSpecialChars(str_array50);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array58 = new java.lang.String[] { "hi!" };
    java.lang.String str59 = commApplication56.commOnlySecond(str_array58);
    java.lang.String str60 = calApplication55.printCalForYear(str_array58);
    java.lang.String str61 = commApplication54.commOnlySecond(str_array58);
    java.util.List list62 = sortApplication41.sortAll(str_array58);
    java.util.List list63 = sortApplication40.sortSimpleCapitalSpecialChars(str_array58);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication64 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication65 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array67 = new java.lang.String[] { "hi!" };
    java.lang.String str68 = commApplication65.commOnlySecond(str_array67);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication69 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication70 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication71 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array73 = new java.lang.String[] { "hi!" };
    java.lang.String str74 = commApplication71.commOnlySecond(str_array73);
    java.lang.String str75 = calApplication70.printCalForYear(str_array73);
    java.lang.String str76 = commApplication69.commOnlySecond(str_array73);
    java.lang.String str77 = commApplication65.commOnlySecond(str_array73);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication78 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication79 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication80 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array82 = new java.lang.String[] { "" };
    java.lang.String str83 = calApplication80.printCalForYearMondayFirst(str_array82);
    java.util.List list84 = sortApplication79.sortCapitalNumbersSpecialChars(str_array82);
    java.util.List list85 = sortApplication78.sortSimpleSpecialChars(str_array82);
    java.lang.String str86 = commApplication65.commAllMatches(str_array82);
    java.lang.String str87 = bcApplication64.lessThan(str_array82);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication88 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array90 = new java.lang.String[] { "" };
    java.lang.String str91 = calApplication88.printCalForYearMondayFirst(str_array90);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication92 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array94 = new java.lang.String[] { "" };
    java.lang.String str95 = calApplication92.printCalForYearMondayFirst(str_array94);
    java.lang.String str96 = calApplication88.printCal(str_array94);
    java.lang.String str97 = bcApplication64.and(str_array94);
    java.util.List list98 = sortApplication40.numericalSortSimpleCapital(str_array94);
    java.util.List list99 = sortApplication0.sortSimpleCapitalNumber(str_array94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str59.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str61.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str68.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str74.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str76.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str77.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str86.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list99);

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test091"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    java.util.List list5 = sortApplication0.sortSimpleCapitalSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication6 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication12.printCalForYear(str_array15);
    java.lang.String str18 = commApplication11.commOnlySecond(str_array15);
    java.lang.String str19 = commApplication7.commOnlySecond(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication20 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication21 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array24 = new java.lang.String[] { "" };
    java.lang.String str25 = calApplication22.printCalForYearMondayFirst(str_array24);
    java.util.List list26 = sortApplication21.sortCapitalNumbersSpecialChars(str_array24);
    java.util.List list27 = sortApplication20.sortSimpleSpecialChars(str_array24);
    java.lang.String str28 = commApplication7.commAllMatches(str_array24);
    java.lang.String str29 = bcApplication6.lessThan(str_array24);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "hi!" };
    java.lang.String str34 = commApplication31.commOnlySecond(str_array33);
    java.lang.String str35 = calApplication30.printCalForYear(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array38 = new java.lang.String[] { "hi!" };
    java.lang.String str39 = commApplication36.commOnlySecond(str_array38);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array44 = new java.lang.String[] { "hi!" };
    java.lang.String str45 = commApplication42.commOnlySecond(str_array44);
    java.lang.String str46 = calApplication41.printCalForYear(str_array44);
    java.lang.String str47 = commApplication40.commOnlySecond(str_array44);
    java.lang.String str48 = commApplication36.commOnlySecond(str_array44);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication49 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array52 = new java.lang.String[] { "" };
    java.lang.String str53 = calApplication50.printCalForYearMondayFirst(str_array52);
    java.util.List list54 = sortApplication49.sortCapitalNumbersSpecialChars(str_array52);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array58 = new java.lang.String[] { "hi!" };
    java.lang.String str59 = commApplication56.commOnlySecond(str_array58);
    java.lang.String str60 = calApplication55.printCalForYear(str_array58);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array63 = new java.lang.String[] { "hi!" };
    java.lang.String str64 = commApplication61.commOnlySecond(str_array63);
    java.lang.String str65 = calApplication55.printCalForYear(str_array63);
    java.util.List list66 = sortApplication49.sortNumbersSpecialChars(str_array63);
    java.lang.String str67 = commApplication36.commBothMathches(str_array63);
    java.lang.String str68 = calApplication30.printCalForMonthYearMondayFirst(str_array63);
    java.lang.String str69 = bcApplication6.number(str_array63);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication70 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array72 = new java.lang.String[] { "hi!" };
    java.lang.String str73 = commApplication70.commOnlySecond(str_array72);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication74 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication75 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication76 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array78 = new java.lang.String[] { "hi!" };
    java.lang.String str79 = commApplication76.commOnlySecond(str_array78);
    java.lang.String str80 = calApplication75.printCalForYear(str_array78);
    java.lang.String str81 = commApplication74.commOnlySecond(str_array78);
    java.lang.String str82 = commApplication70.commOnlySecond(str_array78);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication83 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication84 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication85 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array87 = new java.lang.String[] { "" };
    java.lang.String str88 = calApplication85.printCalForYearMondayFirst(str_array87);
    java.util.List list89 = sortApplication84.sortCapitalNumbersSpecialChars(str_array87);
    java.util.List list90 = sortApplication83.sortSimpleSpecialChars(str_array87);
    java.lang.String str91 = commApplication70.commAllMatches(str_array87);
    java.lang.String str92 = bcApplication6.or(str_array87);
    java.util.List list93 = sortApplication0.numericalSortSimpleCapitalSpecialChars(str_array87);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication94 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array96 = new java.lang.String[] { "" };
    java.lang.String str97 = calApplication94.printCalForYearMondayFirst(str_array96);
    java.util.List list98 = sortApplication0.sortCapitalSpecialChars(str_array96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str28.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str45.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str47.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str48.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str59.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str64.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str67.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str73.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str79.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str81.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str82.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str91 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str91.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list98);

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test092"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array14 = new java.lang.String[] { "hi!" };
    java.lang.String str15 = commApplication12.commOnlySecond(str_array14);
    java.lang.String str16 = calApplication6.printCalForYear(str_array14);
    java.util.List list17 = sortApplication0.sortNumbersSpecialChars(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication18 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = calApplication19.printCalForYearMondayFirst(str_array21);
    java.util.List list23 = sortApplication18.sortCapitalNumbersSpecialChars(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication24 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = calApplication25.printCalForYearMondayFirst(str_array27);
    java.util.List list29 = sortApplication24.sortCapitalNumbersSpecialChars(str_array27);
    java.util.List list30 = sortApplication18.numericalSortSimpleSpecialChars(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "hi!" };
    java.lang.String str36 = commApplication33.commOnlySecond(str_array35);
    java.lang.String str37 = calApplication32.printCalForYear(str_array35);
    java.lang.String str38 = commApplication31.commOnlySecond(str_array35);
    java.util.List list39 = sortApplication18.sortAll(str_array35);
    java.util.List list40 = sortApplication0.numericalSortNumbersSpecialChars(str_array35);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication41 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array44 = new java.lang.String[] { "" };
    java.lang.String str45 = calApplication42.printCalForYearMondayFirst(str_array44);
    java.util.List list46 = sortApplication41.sortCapitalNumbersSpecialChars(str_array44);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication47 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array50 = new java.lang.String[] { "" };
    java.lang.String str51 = calApplication48.printCalForYearMondayFirst(str_array50);
    java.util.List list52 = sortApplication47.sortCapitalNumbersSpecialChars(str_array50);
    java.util.List list53 = sortApplication41.numericalSortSimpleSpecialChars(str_array50);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication54 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication55 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array58 = new java.lang.String[] { "" };
    java.lang.String str59 = calApplication56.printCalForYearMondayFirst(str_array58);
    java.util.List list60 = sortApplication55.sortCapitalNumbersSpecialChars(str_array58);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication61 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array64 = new java.lang.String[] { "" };
    java.lang.String str65 = calApplication62.printCalForYearMondayFirst(str_array64);
    java.util.List list66 = sortApplication61.sortCapitalNumbersSpecialChars(str_array64);
    java.util.List list67 = sortApplication55.numericalSortSimpleSpecialChars(str_array64);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication69 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication70 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array72 = new java.lang.String[] { "hi!" };
    java.lang.String str73 = commApplication70.commOnlySecond(str_array72);
    java.lang.String str74 = calApplication69.printCalForYear(str_array72);
    java.lang.String str75 = commApplication68.commOnlySecond(str_array72);
    java.util.List list76 = sortApplication55.sortAll(str_array72);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication77 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication78 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication79 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array81 = new java.lang.String[] { "" };
    java.lang.String str82 = calApplication79.printCalForYearMondayFirst(str_array81);
    java.util.List list83 = sortApplication78.sortCapitalNumbersSpecialChars(str_array81);
    java.util.List list84 = sortApplication77.sortSimpleSpecialChars(str_array81);
    java.util.List list85 = sortApplication55.numericalSortCapitalSpecialChars(str_array81);
    java.lang.String str86 = bcApplication54.subtract(str_array81);
    java.util.List list87 = sortApplication41.numericalSortSimpleCapitalSpecialChars(str_array81);
    java.util.List list88 = sortApplication0.numericalSortSimpleNumbers(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str15.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str36.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str38.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str73.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str75.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list88);

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test093"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array14 = new java.lang.String[] { "hi!" };
    java.lang.String str15 = commApplication12.commOnlySecond(str_array14);
    java.lang.String str16 = calApplication6.printCalForYear(str_array14);
    java.util.List list17 = sortApplication0.sortNumbersSpecialChars(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication18 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication19 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = calApplication20.printCalForYearMondayFirst(str_array22);
    java.util.List list24 = sortApplication19.sortCapitalNumbersSpecialChars(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!" };
    java.lang.String str29 = commApplication26.commOnlySecond(str_array28);
    java.lang.String str30 = calApplication25.printCalForYear(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "hi!" };
    java.lang.String str34 = commApplication31.commOnlySecond(str_array33);
    java.lang.String str35 = calApplication25.printCalForYear(str_array33);
    java.util.List list36 = sortApplication19.sortNumbersSpecialChars(str_array33);
    java.lang.String str37 = bcApplication18.notEqual(str_array33);
    java.util.List list38 = sortApplication0.sortSimpleNumbers(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array42 = new java.lang.String[] { "hi!" };
    java.lang.String str43 = commApplication40.commOnlySecond(str_array42);
    java.lang.String str44 = calApplication39.printCalForYear(str_array42);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array47 = new java.lang.String[] { "hi!" };
    java.lang.String str48 = commApplication45.commOnlySecond(str_array47);
    java.lang.String str49 = calApplication39.printCalForYear(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication50 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication51 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array54 = new java.lang.String[] { "" };
    java.lang.String str55 = calApplication52.printCalForYearMondayFirst(str_array54);
    java.util.List list56 = sortApplication51.sortCapitalNumbersSpecialChars(str_array54);
    java.util.List list57 = sortApplication50.sortSimpleSpecialChars(str_array54);
    java.lang.String str58 = calApplication39.printCal(str_array54);
    java.util.List list59 = sortApplication0.sortStringsCapital(str_array54);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array63 = new java.lang.String[] { "hi!" };
    java.lang.String str64 = commApplication61.commOnlySecond(str_array63);
    java.lang.String str65 = calApplication60.printCalForYear(str_array63);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication66 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array68 = new java.lang.String[] { "hi!" };
    java.lang.String str69 = commApplication66.commOnlySecond(str_array68);
    java.lang.String str70 = calApplication60.printCalForYear(str_array68);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication71 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication72 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication73 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array75 = new java.lang.String[] { "" };
    java.lang.String str76 = calApplication73.printCalForYearMondayFirst(str_array75);
    java.util.List list77 = sortApplication72.sortCapitalNumbersSpecialChars(str_array75);
    java.util.List list78 = sortApplication71.sortSimpleSpecialChars(str_array75);
    java.lang.String str79 = calApplication60.printCal(str_array75);
    java.util.List list80 = sortApplication0.numericalSortAll(str_array75);
    java.lang.String[] str_array81 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list82 = sortApplication0.numericalSortNumbersSpecialChars(str_array81);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str15.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str43.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str48.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str64.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str69.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test094"); }


    sg.edu.nus.comp.cs4218.impl.app.TailApplication tailApplication0 = new sg.edu.nus.comp.cs4218.impl.app.TailApplication();
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication1 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication2 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = calApplication3.printCalForYearMondayFirst(str_array5);
    java.util.List list7 = sortApplication2.sortCapitalNumbersSpecialChars(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication8 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array11 = new java.lang.String[] { "" };
    java.lang.String str12 = calApplication9.printCalForYearMondayFirst(str_array11);
    java.util.List list13 = sortApplication8.sortCapitalNumbersSpecialChars(str_array11);
    java.util.List list14 = sortApplication2.numericalSortSimpleSpecialChars(str_array11);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "hi!" };
    java.lang.String str20 = commApplication17.commOnlySecond(str_array19);
    java.lang.String str21 = calApplication16.printCalForYear(str_array19);
    java.lang.String str22 = commApplication15.commOnlySecond(str_array19);
    java.util.List list23 = sortApplication2.sortAll(str_array19);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication24 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication25 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "" };
    java.lang.String str29 = calApplication26.printCalForYearMondayFirst(str_array28);
    java.util.List list30 = sortApplication25.sortCapitalNumbersSpecialChars(str_array28);
    java.util.List list31 = sortApplication24.sortSimpleSpecialChars(str_array28);
    java.util.List list32 = sortApplication2.numericalSortCapitalSpecialChars(str_array28);
    java.lang.String str33 = bcApplication1.subtract(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array37 = new java.lang.String[] { "hi!" };
    java.lang.String str38 = commApplication35.commOnlySecond(str_array37);
    java.lang.String str39 = calApplication34.printCalForYear(str_array37);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array42 = new java.lang.String[] { "hi!" };
    java.lang.String str43 = commApplication40.commOnlySecond(str_array42);
    java.lang.String str44 = calApplication34.printCalForYear(str_array42);
    java.lang.String str45 = bcApplication1.and(str_array42);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array48 = new java.lang.String[] { "hi!" };
    java.lang.String str49 = commApplication46.commOnlySecond(str_array48);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array54 = new java.lang.String[] { "hi!" };
    java.lang.String str55 = commApplication52.commOnlySecond(str_array54);
    java.lang.String str56 = calApplication51.printCalForYear(str_array54);
    java.lang.String str57 = commApplication50.commOnlySecond(str_array54);
    java.lang.String str58 = commApplication46.commOnlySecond(str_array54);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication59 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication60 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array63 = new java.lang.String[] { "" };
    java.lang.String str64 = calApplication61.printCalForYearMondayFirst(str_array63);
    java.util.List list65 = sortApplication60.sortCapitalNumbersSpecialChars(str_array63);
    java.util.List list66 = sortApplication59.sortSimpleSpecialChars(str_array63);
    java.lang.String str67 = commApplication46.commAllMatches(str_array63);
    java.lang.String str68 = bcApplication1.lessThanOrEqual(str_array63);
    java.io.InputStream inputStream69 = null;
    java.io.OutputStream outputStream70 = null;
    // The following exception was thrown during execution in test generation
    try {
      tailApplication0.run(str_array63, inputStream69, outputStream70);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException");
    } catch (sg.edu.nus.comp.cs4218.exception.TailException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.TailException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str22.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str38.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str43.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str49.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str55.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str57.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str58.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str67.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str68);

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test095"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication7.printCalForYear(str_array15);
    java.util.List list18 = sortApplication1.sortNumbersSpecialChars(str_array15);
    java.lang.String str19 = bcApplication0.notEqual(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array23 = new java.lang.String[] { "hi!" };
    java.lang.String str24 = commApplication21.commOnlySecond(str_array23);
    java.lang.String str25 = calApplication20.printCalForYear(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!" };
    java.lang.String str29 = commApplication26.commOnlySecond(str_array28);
    java.lang.String str30 = calApplication20.printCalForYear(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication31 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication32 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "" };
    java.lang.String str36 = calApplication33.printCalForYearMondayFirst(str_array35);
    java.util.List list37 = sortApplication32.sortCapitalNumbersSpecialChars(str_array35);
    java.util.List list38 = sortApplication31.sortSimpleSpecialChars(str_array35);
    java.lang.String str39 = calApplication20.printCal(str_array35);
    java.lang.String str40 = bcApplication0.lessThanOrEqual(str_array35);
    java.lang.String[] str_array41 = null;
    java.lang.String str42 = bcApplication0.greaterThanOrEqual(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication43 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = calApplication44.printCalForYearMondayFirst(str_array46);
    java.util.List list48 = sortApplication43.sortCapitalNumbersSpecialChars(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication49 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array52 = new java.lang.String[] { "" };
    java.lang.String str53 = calApplication50.printCalForYearMondayFirst(str_array52);
    java.util.List list54 = sortApplication49.sortCapitalNumbersSpecialChars(str_array52);
    java.util.List list55 = sortApplication43.numericalSortSimpleSpecialChars(str_array52);
    java.lang.String str56 = bcApplication0.subtract(str_array52);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array59 = new java.lang.String[] { "hi!" };
    java.lang.String str60 = commApplication57.commOnlySecond(str_array59);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication63 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array65 = new java.lang.String[] { "hi!" };
    java.lang.String str66 = commApplication63.commOnlySecond(str_array65);
    java.lang.String str67 = calApplication62.printCalForYear(str_array65);
    java.lang.String str68 = commApplication61.commOnlySecond(str_array65);
    java.lang.String str69 = commApplication57.commOnlySecond(str_array65);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication70 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication71 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication72 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array74 = new java.lang.String[] { "" };
    java.lang.String str75 = calApplication72.printCalForYearMondayFirst(str_array74);
    java.util.List list76 = sortApplication71.sortCapitalNumbersSpecialChars(str_array74);
    java.util.List list77 = sortApplication70.sortSimpleSpecialChars(str_array74);
    java.lang.String str78 = commApplication57.commAllMatches(str_array74);
    java.lang.String str79 = bcApplication0.bracket(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str24.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str60.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str66.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str68.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str69.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str78.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str79);

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test096"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication1 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    java.lang.String str13 = commApplication6.commOnlySecond(str_array10);
    java.lang.String str14 = commApplication2.commOnlySecond(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication15 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication16 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "" };
    java.lang.String str20 = calApplication17.printCalForYearMondayFirst(str_array19);
    java.util.List list21 = sortApplication16.sortCapitalNumbersSpecialChars(str_array19);
    java.util.List list22 = sortApplication15.sortSimpleSpecialChars(str_array19);
    java.lang.String str23 = commApplication2.commAllMatches(str_array19);
    java.lang.String str24 = bcApplication1.lessThan(str_array19);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication25 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "" };
    java.lang.String str29 = calApplication26.printCalForYearMondayFirst(str_array28);
    java.util.List list30 = sortApplication25.sortCapitalNumbersSpecialChars(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "hi!" };
    java.lang.String str35 = commApplication32.commOnlySecond(str_array34);
    java.lang.String str36 = calApplication31.printCalForYear(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "hi!" };
    java.lang.String str40 = commApplication37.commOnlySecond(str_array39);
    java.lang.String str41 = calApplication31.printCalForYear(str_array39);
    java.util.List list42 = sortApplication25.sortNumbersSpecialChars(str_array39);
    java.lang.String str43 = bcApplication1.negate(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication44 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array47 = new java.lang.String[] { "" };
    java.lang.String str48 = calApplication45.printCalForYearMondayFirst(str_array47);
    java.util.List list49 = sortApplication44.sortCapitalNumbersSpecialChars(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication50 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array53 = new java.lang.String[] { "" };
    java.lang.String str54 = calApplication51.printCalForYearMondayFirst(str_array53);
    java.util.List list55 = sortApplication50.sortCapitalNumbersSpecialChars(str_array53);
    java.util.List list56 = sortApplication44.numericalSortSimpleSpecialChars(str_array53);
    java.lang.String[] str_array58 = new java.lang.String[] { "" };
    java.util.List list59 = sortApplication44.sortSimpleCapitalSpecialChars(str_array58);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication60 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array63 = new java.lang.String[] { "hi!" };
    java.lang.String str64 = commApplication61.commOnlySecond(str_array63);
    java.util.List list65 = sortApplication60.sortSimpleCapitalSpecialChars(str_array63);
    java.util.List list66 = sortApplication44.numericalSortSimpleCapitalSpecialChars(str_array63);
    java.lang.String str67 = bcApplication1.bracket(str_array63);
    java.util.List list68 = sortApplication0.numericalSortNumbersSpecialChars(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str14.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str23.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str35.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str40.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str64.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test097"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array7 = new java.lang.String[] { "" };
    java.lang.String str8 = calApplication5.printCalForYearMondayFirst(str_array7);
    java.lang.String str9 = calApplication1.printCal(str_array7);
    java.lang.String str10 = calApplication0.printCal(str_array7);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication11 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array14 = new java.lang.String[] { "" };
    java.lang.String str15 = calApplication12.printCalForYearMondayFirst(str_array14);
    java.util.List list16 = sortApplication11.sortCapitalNumbersSpecialChars(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication17 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array20 = new java.lang.String[] { "" };
    java.lang.String str21 = calApplication18.printCalForYearMondayFirst(str_array20);
    java.util.List list22 = sortApplication17.sortCapitalNumbersSpecialChars(str_array20);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "hi!" };
    java.lang.String str27 = commApplication24.commOnlySecond(str_array26);
    java.lang.String str28 = calApplication23.printCalForYear(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array31 = new java.lang.String[] { "hi!" };
    java.lang.String str32 = commApplication29.commOnlySecond(str_array31);
    java.lang.String str33 = calApplication23.printCalForYear(str_array31);
    java.util.List list34 = sortApplication17.sortNumbersSpecialChars(str_array31);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array38 = new java.lang.String[] { "" };
    java.lang.String str39 = calApplication36.printCalForYearMondayFirst(str_array38);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array42 = new java.lang.String[] { "" };
    java.lang.String str43 = calApplication40.printCalForYearMondayFirst(str_array42);
    java.lang.String str44 = calApplication36.printCal(str_array42);
    java.lang.String str45 = calApplication35.printCal(str_array42);
    java.util.List list46 = sortApplication17.numericalSortCapitalNumbersSpecialChars(str_array42);
    java.util.List list47 = sortApplication11.numericalSortCapitalNumbersSpecialChars(str_array42);
    java.lang.String[] str_array49 = new java.lang.String[] { "comm: terminated with error message comm: file is not readable" };
    java.util.List list50 = sortApplication11.numericalSortAll(str_array49);
    java.io.InputStream inputStream51 = null;
    java.io.OutputStream outputStream52 = null;
    calApplication0.run(str_array49, inputStream51, outputStream52);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication54 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication55 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array58 = new java.lang.String[] { "" };
    java.lang.String str59 = calApplication56.printCalForYearMondayFirst(str_array58);
    java.util.List list60 = sortApplication55.sortCapitalNumbersSpecialChars(str_array58);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication61 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array64 = new java.lang.String[] { "" };
    java.lang.String str65 = calApplication62.printCalForYearMondayFirst(str_array64);
    java.util.List list66 = sortApplication61.sortCapitalNumbersSpecialChars(str_array64);
    java.util.List list67 = sortApplication55.numericalSortSimpleSpecialChars(str_array64);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication69 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication70 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array72 = new java.lang.String[] { "hi!" };
    java.lang.String str73 = commApplication70.commOnlySecond(str_array72);
    java.lang.String str74 = calApplication69.printCalForYear(str_array72);
    java.lang.String str75 = commApplication68.commOnlySecond(str_array72);
    java.util.List list76 = sortApplication55.sortAll(str_array72);
    java.util.List list77 = sortApplication54.sortSimpleCapitalSpecialChars(str_array72);
    java.lang.String str78 = calApplication0.printCalForMonthYear(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str27.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str32.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str73.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str75.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str78);

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test098"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array14 = new java.lang.String[] { "hi!" };
    java.lang.String str15 = commApplication12.commOnlySecond(str_array14);
    java.lang.String str16 = calApplication6.printCalForYear(str_array14);
    java.util.List list17 = sortApplication0.sortNumbersSpecialChars(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication18 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "hi!" };
    java.lang.String str22 = commApplication19.commOnlySecond(str_array21);
    java.util.List list23 = sortApplication18.sortSimpleCapitalSpecialChars(str_array21);
    java.util.List list24 = sortApplication0.sortSimpleNumbersSpecialChars(str_array21);
    java.lang.String[] str_array25 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list26 = sortApplication0.numericalSortNumbers(str_array25);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str15.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str22.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test099"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = calApplication8.printCalForYearMondayFirst(str_array10);
    java.util.List list12 = sortApplication7.sortCapitalNumbersSpecialChars(str_array10);
    java.util.List list13 = sortApplication1.numericalSortSimpleSpecialChars(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "hi!" };
    java.lang.String str19 = commApplication16.commOnlySecond(str_array18);
    java.lang.String str20 = calApplication15.printCalForYear(str_array18);
    java.lang.String str21 = commApplication14.commOnlySecond(str_array18);
    java.util.List list22 = sortApplication1.sortAll(str_array18);
    java.util.List list23 = sortApplication0.sortSimpleCapitalSpecialChars(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = calApplication24.printCalForYearMondayFirst(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array30 = new java.lang.String[] { "hi!" };
    java.lang.String str31 = commApplication28.commOnlySecond(str_array30);
    java.lang.String str32 = calApplication24.printCalWithMondayFirst(str_array30);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication33 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "" };
    java.lang.String str37 = calApplication34.printCalForYearMondayFirst(str_array36);
    java.util.List list38 = sortApplication33.sortCapitalNumbersSpecialChars(str_array36);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication39 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array42 = new java.lang.String[] { "" };
    java.lang.String str43 = calApplication40.printCalForYearMondayFirst(str_array42);
    java.util.List list44 = sortApplication39.sortCapitalNumbersSpecialChars(str_array42);
    java.util.List list45 = sortApplication33.numericalSortSimpleSpecialChars(str_array42);
    java.lang.String str46 = calApplication24.printCalForYear(str_array42);
    java.util.List list47 = sortApplication0.sortNumbers(str_array42);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication48 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array51 = new java.lang.String[] { "" };
    java.lang.String str52 = calApplication49.printCalForYearMondayFirst(str_array51);
    java.util.List list53 = sortApplication48.sortCapitalNumbersSpecialChars(str_array51);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication54 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "" };
    java.lang.String str58 = calApplication55.printCalForYearMondayFirst(str_array57);
    java.util.List list59 = sortApplication54.sortCapitalNumbersSpecialChars(str_array57);
    java.util.List list60 = sortApplication48.numericalSortSimpleSpecialChars(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array64 = new java.lang.String[] { "hi!" };
    java.lang.String str65 = commApplication62.commOnlySecond(str_array64);
    java.lang.String str66 = calApplication61.printCalForYear(str_array64);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication67 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array69 = new java.lang.String[] { "" };
    java.lang.String str70 = calApplication67.printCalForYearMondayFirst(str_array69);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication71 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array73 = new java.lang.String[] { "hi!" };
    java.lang.String str74 = commApplication71.commOnlySecond(str_array73);
    java.lang.String str75 = calApplication67.printCalWithMondayFirst(str_array73);
    java.lang.String str76 = calApplication61.printCalWithMondayFirst(str_array73);
    java.util.List list77 = sortApplication48.numericalSortStringsSimple(str_array73);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication78 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication79 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication80 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array82 = new java.lang.String[] { "" };
    java.lang.String str83 = calApplication80.printCalForYearMondayFirst(str_array82);
    java.util.List list84 = sortApplication79.sortCapitalNumbersSpecialChars(str_array82);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication85 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication86 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array88 = new java.lang.String[] { "hi!" };
    java.lang.String str89 = commApplication86.commOnlySecond(str_array88);
    java.lang.String str90 = calApplication85.printCalForYear(str_array88);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication91 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array93 = new java.lang.String[] { "hi!" };
    java.lang.String str94 = commApplication91.commOnlySecond(str_array93);
    java.lang.String str95 = calApplication85.printCalForYear(str_array93);
    java.util.List list96 = sortApplication79.sortNumbersSpecialChars(str_array93);
    java.lang.String str97 = bcApplication78.notEqual(str_array93);
    java.util.List list98 = sortApplication48.numericalSortSimpleCapital(str_array93);
    java.util.List list99 = sortApplication0.numericalSortSimpleCapitalSpecialChars(str_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str31.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str65.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str74.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str89.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str94 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str94.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list99);

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test100"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    java.util.List list12 = sortApplication0.numericalSortSimpleSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "hi!" };
    java.lang.String str17 = commApplication14.commOnlySecond(str_array16);
    java.lang.String str18 = calApplication13.printCalForYear(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = calApplication19.printCalForYearMondayFirst(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array25 = new java.lang.String[] { "hi!" };
    java.lang.String str26 = commApplication23.commOnlySecond(str_array25);
    java.lang.String str27 = calApplication19.printCalWithMondayFirst(str_array25);
    java.lang.String str28 = calApplication13.printCalWithMondayFirst(str_array25);
    java.util.List list29 = sortApplication0.numericalSortStringsSimple(str_array25);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication30 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "hi!" };
    java.lang.String str34 = commApplication31.commOnlySecond(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "hi!" };
    java.lang.String str40 = commApplication37.commOnlySecond(str_array39);
    java.lang.String str41 = calApplication36.printCalForYear(str_array39);
    java.lang.String str42 = commApplication35.commOnlySecond(str_array39);
    java.lang.String str43 = commApplication31.commOnlySecond(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication44 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication45 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array48 = new java.lang.String[] { "" };
    java.lang.String str49 = calApplication46.printCalForYearMondayFirst(str_array48);
    java.util.List list50 = sortApplication45.sortCapitalNumbersSpecialChars(str_array48);
    java.util.List list51 = sortApplication44.sortSimpleSpecialChars(str_array48);
    java.lang.String str52 = commApplication31.commAllMatches(str_array48);
    java.lang.String str53 = bcApplication30.lessThan(str_array48);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication54 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "" };
    java.lang.String str58 = calApplication55.printCalForYearMondayFirst(str_array57);
    java.util.List list59 = sortApplication54.sortCapitalNumbersSpecialChars(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array63 = new java.lang.String[] { "hi!" };
    java.lang.String str64 = commApplication61.commOnlySecond(str_array63);
    java.lang.String str65 = calApplication60.printCalForYear(str_array63);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication66 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array68 = new java.lang.String[] { "hi!" };
    java.lang.String str69 = commApplication66.commOnlySecond(str_array68);
    java.lang.String str70 = calApplication60.printCalForYear(str_array68);
    java.util.List list71 = sortApplication54.sortNumbersSpecialChars(str_array68);
    java.lang.String str72 = bcApplication30.negate(str_array68);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication73 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication74 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication75 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array77 = new java.lang.String[] { "" };
    java.lang.String str78 = calApplication75.printCalForYearMondayFirst(str_array77);
    java.util.List list79 = sortApplication74.sortCapitalNumbersSpecialChars(str_array77);
    java.util.List list80 = sortApplication73.sortSimpleSpecialChars(str_array77);
    java.lang.String str81 = bcApplication30.greaterThanOrEqual(str_array77);
    java.util.List list82 = sortApplication0.sortSimpleCapital(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str17.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str26.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str40.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str42.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str43.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str52.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str64.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str69.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list82);

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test101"); }


    sg.edu.nus.comp.cs4218.impl.app.HeadApplication headApplication0 = new sg.edu.nus.comp.cs4218.impl.app.HeadApplication();
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication1 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    java.lang.String str13 = commApplication6.commOnlySecond(str_array10);
    java.lang.String str14 = commApplication2.commOnlySecond(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication15 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "" };
    java.lang.String str19 = calApplication16.printCalForYearMondayFirst(str_array18);
    java.util.List list20 = sortApplication15.sortCapitalNumbersSpecialChars(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array24 = new java.lang.String[] { "hi!" };
    java.lang.String str25 = commApplication22.commOnlySecond(str_array24);
    java.lang.String str26 = calApplication21.printCalForYear(str_array24);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array29 = new java.lang.String[] { "hi!" };
    java.lang.String str30 = commApplication27.commOnlySecond(str_array29);
    java.lang.String str31 = calApplication21.printCalForYear(str_array29);
    java.util.List list32 = sortApplication15.sortNumbersSpecialChars(str_array29);
    java.lang.String str33 = commApplication2.commBothMathches(str_array29);
    java.lang.String str34 = bcApplication1.add(str_array29);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication35 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication36 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication37 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "" };
    java.lang.String str41 = calApplication38.printCalForYearMondayFirst(str_array40);
    java.util.List list42 = sortApplication37.sortCapitalNumbersSpecialChars(str_array40);
    java.util.List list43 = sortApplication36.sortSimpleSpecialChars(str_array40);
    java.io.InputStream inputStream44 = null;
    java.io.OutputStream outputStream45 = null;
    bcApplication35.run(str_array40, inputStream44, outputStream45);
    java.lang.String str47 = bcApplication1.equalEqual(str_array40);
    java.lang.String[] str_array48 = null;
    java.lang.String str49 = bcApplication1.equalEqual(str_array48);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array52 = new java.lang.String[] { "hi!" };
    java.lang.String str53 = commApplication50.commOnlySecond(str_array52);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array58 = new java.lang.String[] { "hi!" };
    java.lang.String str59 = commApplication56.commOnlySecond(str_array58);
    java.lang.String str60 = calApplication55.printCalForYear(str_array58);
    java.lang.String str61 = commApplication54.commOnlySecond(str_array58);
    java.lang.String str62 = commApplication50.commOnlySecond(str_array58);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication63 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication64 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication65 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array67 = new java.lang.String[] { "" };
    java.lang.String str68 = calApplication65.printCalForYearMondayFirst(str_array67);
    java.util.List list69 = sortApplication64.sortCapitalNumbersSpecialChars(str_array67);
    java.util.List list70 = sortApplication63.sortSimpleSpecialChars(str_array67);
    java.lang.String str71 = commApplication50.commAllMatches(str_array67);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication72 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication73 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication74 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array76 = new java.lang.String[] { "" };
    java.lang.String str77 = calApplication74.printCalForYearMondayFirst(str_array76);
    java.util.List list78 = sortApplication73.sortCapitalNumbersSpecialChars(str_array76);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication79 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication80 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array82 = new java.lang.String[] { "hi!" };
    java.lang.String str83 = commApplication80.commOnlySecond(str_array82);
    java.lang.String str84 = calApplication79.printCalForYear(str_array82);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication85 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array87 = new java.lang.String[] { "hi!" };
    java.lang.String str88 = commApplication85.commOnlySecond(str_array87);
    java.lang.String str89 = calApplication79.printCalForYear(str_array87);
    java.util.List list90 = sortApplication73.sortNumbersSpecialChars(str_array87);
    java.lang.String str91 = bcApplication72.notEqual(str_array87);
    java.lang.String str92 = commApplication50.commNoMatches(str_array87);
    java.lang.String str93 = bcApplication1.divide(str_array87);
    java.io.InputStream inputStream94 = null;
    java.io.OutputStream outputStream95 = null;
    // The following exception was thrown during execution in test generation
    try {
      headApplication0.run(str_array87, inputStream94, outputStream95);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.HeadException");
    } catch (sg.edu.nus.comp.cs4218.exception.HeadException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.HeadException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.HeadException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str14.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str25.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str30.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str33.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str53.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str59.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str61.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str62.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str71.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str83.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str88.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str92 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str92.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str93);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test102"); }


    sg.edu.nus.comp.cs4218.impl.app.TailApplication tailApplication0 = new sg.edu.nus.comp.cs4218.impl.app.TailApplication();
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication1 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication2 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication3 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication4 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array6 = new java.lang.String[] { "" };
    java.lang.String str7 = calApplication4.printCalForYearMondayFirst(str_array6);
    java.util.List list8 = sortApplication3.sortCapitalNumbersSpecialChars(str_array6);
    java.util.List list9 = sortApplication2.sortSimpleSpecialChars(str_array6);
    java.io.InputStream inputStream10 = null;
    java.io.OutputStream outputStream11 = null;
    bcApplication1.run(str_array6, inputStream10, outputStream11);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication13 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication14 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "" };
    java.lang.String str18 = calApplication15.printCalForYearMondayFirst(str_array17);
    java.util.List list19 = sortApplication14.sortCapitalNumbersSpecialChars(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication20 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array23 = new java.lang.String[] { "" };
    java.lang.String str24 = calApplication21.printCalForYearMondayFirst(str_array23);
    java.util.List list25 = sortApplication20.sortCapitalNumbersSpecialChars(str_array23);
    java.util.List list26 = sortApplication14.numericalSortSimpleSpecialChars(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array31 = new java.lang.String[] { "hi!" };
    java.lang.String str32 = commApplication29.commOnlySecond(str_array31);
    java.lang.String str33 = calApplication28.printCalForYear(str_array31);
    java.lang.String str34 = commApplication27.commOnlySecond(str_array31);
    java.util.List list35 = sortApplication14.sortAll(str_array31);
    java.util.List list36 = sortApplication13.sortSimpleCapitalSpecialChars(str_array31);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "" };
    java.lang.String str40 = calApplication37.printCalForYearMondayFirst(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "hi!" };
    java.lang.String str44 = commApplication41.commOnlySecond(str_array43);
    java.lang.String str45 = calApplication37.printCalWithMondayFirst(str_array43);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication46 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array49 = new java.lang.String[] { "" };
    java.lang.String str50 = calApplication47.printCalForYearMondayFirst(str_array49);
    java.util.List list51 = sortApplication46.sortCapitalNumbersSpecialChars(str_array49);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication52 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array55 = new java.lang.String[] { "" };
    java.lang.String str56 = calApplication53.printCalForYearMondayFirst(str_array55);
    java.util.List list57 = sortApplication52.sortCapitalNumbersSpecialChars(str_array55);
    java.util.List list58 = sortApplication46.numericalSortSimpleSpecialChars(str_array55);
    java.lang.String str59 = calApplication37.printCalForYear(str_array55);
    java.util.List list60 = sortApplication13.sortNumbers(str_array55);
    java.lang.String str61 = bcApplication1.pow(str_array55);
    java.io.InputStream inputStream62 = null;
    java.io.OutputStream outputStream63 = null;
    // The following exception was thrown during execution in test generation
    try {
      tailApplication0.run(str_array55, inputStream62, outputStream63);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException");
    } catch (sg.edu.nus.comp.cs4218.exception.TailException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.TailException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str32.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str44.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test103"); }


    sg.edu.nus.comp.cs4218.impl.app.HeadApplication headApplication0 = new sg.edu.nus.comp.cs4218.impl.app.HeadApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = calApplication8.printCalForYearMondayFirst(str_array10);
    java.util.List list12 = sortApplication7.sortCapitalNumbersSpecialChars(str_array10);
    java.util.List list13 = sortApplication1.numericalSortSimpleSpecialChars(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!" };
    java.lang.String str18 = commApplication15.commOnlySecond(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = calApplication20.printCalForYearMondayFirst(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "hi!" };
    java.lang.String str27 = commApplication24.commOnlySecond(str_array26);
    java.lang.String str28 = calApplication20.printCalWithMondayFirst(str_array26);
    java.lang.String str29 = calApplication14.printCalWithMondayFirst(str_array26);
    java.util.List list30 = sortApplication1.numericalSortStringsSimple(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication31 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication32 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "" };
    java.lang.String str36 = calApplication33.printCalForYearMondayFirst(str_array35);
    java.util.List list37 = sortApplication32.sortCapitalNumbersSpecialChars(str_array35);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array41 = new java.lang.String[] { "hi!" };
    java.lang.String str42 = commApplication39.commOnlySecond(str_array41);
    java.lang.String str43 = calApplication38.printCalForYear(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "hi!" };
    java.lang.String str47 = commApplication44.commOnlySecond(str_array46);
    java.lang.String str48 = calApplication38.printCalForYear(str_array46);
    java.util.List list49 = sortApplication32.sortNumbersSpecialChars(str_array46);
    java.lang.String str50 = bcApplication31.notEqual(str_array46);
    java.util.List list51 = sortApplication1.numericalSortSimpleCapital(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication52 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array55 = new java.lang.String[] { "" };
    java.lang.String str56 = calApplication53.printCalForYearMondayFirst(str_array55);
    java.util.List list57 = sortApplication52.sortCapitalNumbersSpecialChars(str_array55);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication59 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array61 = new java.lang.String[] { "hi!" };
    java.lang.String str62 = commApplication59.commOnlySecond(str_array61);
    java.lang.String str63 = calApplication58.printCalForYear(str_array61);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array66 = new java.lang.String[] { "hi!" };
    java.lang.String str67 = commApplication64.commOnlySecond(str_array66);
    java.lang.String str68 = calApplication58.printCalForYear(str_array66);
    java.util.List list69 = sortApplication52.sortNumbersSpecialChars(str_array66);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication70 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication71 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication72 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array74 = new java.lang.String[] { "" };
    java.lang.String str75 = calApplication72.printCalForYearMondayFirst(str_array74);
    java.util.List list76 = sortApplication71.sortCapitalNumbersSpecialChars(str_array74);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication77 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication78 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array80 = new java.lang.String[] { "hi!" };
    java.lang.String str81 = commApplication78.commOnlySecond(str_array80);
    java.lang.String str82 = calApplication77.printCalForYear(str_array80);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication83 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array85 = new java.lang.String[] { "hi!" };
    java.lang.String str86 = commApplication83.commOnlySecond(str_array85);
    java.lang.String str87 = calApplication77.printCalForYear(str_array85);
    java.util.List list88 = sortApplication71.sortNumbersSpecialChars(str_array85);
    java.lang.String str89 = bcApplication70.notEqual(str_array85);
    java.util.List list90 = sortApplication52.sortSimpleNumbers(str_array85);
    java.util.List list91 = sortApplication1.sortSimpleCapitalNumber(str_array85);
    java.io.InputStream inputStream92 = null;
    java.io.OutputStream outputStream93 = null;
    // The following exception was thrown during execution in test generation
    try {
      headApplication0.run(str_array85, inputStream92, outputStream93);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.HeadException");
    } catch (sg.edu.nus.comp.cs4218.exception.HeadException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.HeadException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.HeadException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str27.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str42.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str47.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str62.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str67.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str81.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str86.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list91);

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test104"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    java.lang.String str12 = commApplication5.commOnlySecond(str_array9);
    java.lang.String str13 = commApplication1.commOnlySecond(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication14 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication15 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "" };
    java.lang.String str19 = calApplication16.printCalForYearMondayFirst(str_array18);
    java.util.List list20 = sortApplication15.sortCapitalNumbersSpecialChars(str_array18);
    java.util.List list21 = sortApplication14.sortSimpleSpecialChars(str_array18);
    java.lang.String str22 = commApplication1.commAllMatches(str_array18);
    java.lang.String str23 = bcApplication0.lessThan(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication24 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication25 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "" };
    java.lang.String str29 = calApplication26.printCalForYearMondayFirst(str_array28);
    java.util.List list30 = sortApplication25.sortCapitalNumbersSpecialChars(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication31 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "" };
    java.lang.String str35 = calApplication32.printCalForYearMondayFirst(str_array34);
    java.util.List list36 = sortApplication31.sortCapitalNumbersSpecialChars(str_array34);
    java.util.List list37 = sortApplication25.numericalSortSimpleSpecialChars(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array42 = new java.lang.String[] { "hi!" };
    java.lang.String str43 = commApplication40.commOnlySecond(str_array42);
    java.lang.String str44 = calApplication39.printCalForYear(str_array42);
    java.lang.String str45 = commApplication38.commOnlySecond(str_array42);
    java.util.List list46 = sortApplication25.sortAll(str_array42);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication47 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication48 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array51 = new java.lang.String[] { "" };
    java.lang.String str52 = calApplication49.printCalForYearMondayFirst(str_array51);
    java.util.List list53 = sortApplication48.sortCapitalNumbersSpecialChars(str_array51);
    java.util.List list54 = sortApplication47.sortSimpleSpecialChars(str_array51);
    java.util.List list55 = sortApplication25.numericalSortCapitalSpecialChars(str_array51);
    java.lang.String str56 = bcApplication24.subtract(str_array51);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication57 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array60 = new java.lang.String[] { "" };
    java.lang.String str61 = calApplication58.printCalForYearMondayFirst(str_array60);
    java.util.List list62 = sortApplication57.sortCapitalNumbersSpecialChars(str_array60);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication63 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array66 = new java.lang.String[] { "" };
    java.lang.String str67 = calApplication64.printCalForYearMondayFirst(str_array66);
    java.util.List list68 = sortApplication63.sortCapitalNumbersSpecialChars(str_array66);
    java.util.List list69 = sortApplication57.numericalSortSimpleSpecialChars(str_array66);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication70 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication71 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication72 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array74 = new java.lang.String[] { "hi!" };
    java.lang.String str75 = commApplication72.commOnlySecond(str_array74);
    java.lang.String str76 = calApplication71.printCalForYear(str_array74);
    java.lang.String str77 = commApplication70.commOnlySecond(str_array74);
    java.util.List list78 = sortApplication57.sortAll(str_array74);
    java.lang.String str79 = bcApplication24.add(str_array74);
    java.lang.String str80 = bcApplication0.or(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str22.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str43.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str45.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str75.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str77.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str80);

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test105"); }


    sg.edu.nus.comp.cs4218.impl.app.TailApplication tailApplication0 = new sg.edu.nus.comp.cs4218.impl.app.TailApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = calApplication8.printCalForYearMondayFirst(str_array10);
    java.util.List list12 = sortApplication7.sortCapitalNumbersSpecialChars(str_array10);
    java.util.List list13 = sortApplication1.numericalSortSimpleSpecialChars(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "hi!" };
    java.lang.String str19 = commApplication16.commOnlySecond(str_array18);
    java.lang.String str20 = calApplication15.printCalForYear(str_array18);
    java.lang.String str21 = commApplication14.commOnlySecond(str_array18);
    java.util.List list22 = sortApplication1.sortAll(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = calApplication24.printCalForYearMondayFirst(str_array26);
    java.util.List list28 = sortApplication23.sortCapitalNumbersSpecialChars(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication29 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "" };
    java.lang.String str33 = calApplication30.printCalForYearMondayFirst(str_array32);
    java.util.List list34 = sortApplication29.sortCapitalNumbersSpecialChars(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array38 = new java.lang.String[] { "hi!" };
    java.lang.String str39 = commApplication36.commOnlySecond(str_array38);
    java.lang.String str40 = calApplication35.printCalForYear(str_array38);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "hi!" };
    java.lang.String str44 = commApplication41.commOnlySecond(str_array43);
    java.lang.String str45 = calApplication35.printCalForYear(str_array43);
    java.util.List list46 = sortApplication29.sortNumbersSpecialChars(str_array43);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array50 = new java.lang.String[] { "" };
    java.lang.String str51 = calApplication48.printCalForYearMondayFirst(str_array50);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array54 = new java.lang.String[] { "" };
    java.lang.String str55 = calApplication52.printCalForYearMondayFirst(str_array54);
    java.lang.String str56 = calApplication48.printCal(str_array54);
    java.lang.String str57 = calApplication47.printCal(str_array54);
    java.util.List list58 = sortApplication29.numericalSortCapitalNumbersSpecialChars(str_array54);
    java.util.List list59 = sortApplication23.numericalSortCapitalNumbersSpecialChars(str_array54);
    java.util.List list60 = sortApplication1.numericalSortCapitalSpecialChars(str_array54);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication61 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication63 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array65 = new java.lang.String[] { "" };
    java.lang.String str66 = calApplication63.printCalForYearMondayFirst(str_array65);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication67 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array69 = new java.lang.String[] { "" };
    java.lang.String str70 = calApplication67.printCalForYearMondayFirst(str_array69);
    java.lang.String str71 = calApplication63.printCal(str_array69);
    java.lang.String str72 = calApplication62.printCal(str_array69);
    java.lang.String str73 = bcApplication61.negate(str_array69);
    java.util.List list74 = sortApplication1.numericalSortCapitalNumbersSpecialChars(str_array69);
    java.io.InputStream inputStream75 = null;
    java.io.OutputStream outputStream76 = null;
    // The following exception was thrown during execution in test generation
    try {
      tailApplication0.run(str_array69, inputStream75, outputStream76);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException");
    } catch (sg.edu.nus.comp.cs4218.exception.TailException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.TailException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str44.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test106"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication7.printCalForYear(str_array15);
    java.util.List list18 = sortApplication1.sortNumbersSpecialChars(str_array15);
    java.lang.String str19 = bcApplication0.notEqual(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array23 = new java.lang.String[] { "hi!" };
    java.lang.String str24 = commApplication21.commOnlySecond(str_array23);
    java.lang.String str25 = calApplication20.printCalForYear(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!" };
    java.lang.String str29 = commApplication26.commOnlySecond(str_array28);
    java.lang.String str30 = calApplication20.printCalForYear(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication31 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication32 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "" };
    java.lang.String str36 = calApplication33.printCalForYearMondayFirst(str_array35);
    java.util.List list37 = sortApplication32.sortCapitalNumbersSpecialChars(str_array35);
    java.util.List list38 = sortApplication31.sortSimpleSpecialChars(str_array35);
    java.lang.String str39 = calApplication20.printCal(str_array35);
    java.lang.String str40 = bcApplication0.lessThanOrEqual(str_array35);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication41 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication42 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array45 = new java.lang.String[] { "" };
    java.lang.String str46 = calApplication43.printCalForYearMondayFirst(str_array45);
    java.util.List list47 = sortApplication42.sortCapitalNumbersSpecialChars(str_array45);
    java.util.List list48 = sortApplication41.sortSimpleSpecialChars(str_array45);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication49 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array52 = new java.lang.String[] { "hi!" };
    java.lang.String str53 = commApplication50.commOnlySecond(str_array52);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array58 = new java.lang.String[] { "hi!" };
    java.lang.String str59 = commApplication56.commOnlySecond(str_array58);
    java.lang.String str60 = calApplication55.printCalForYear(str_array58);
    java.lang.String str61 = commApplication54.commOnlySecond(str_array58);
    java.lang.String str62 = commApplication50.commOnlySecond(str_array58);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication63 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication64 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication65 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array67 = new java.lang.String[] { "" };
    java.lang.String str68 = calApplication65.printCalForYearMondayFirst(str_array67);
    java.util.List list69 = sortApplication64.sortCapitalNumbersSpecialChars(str_array67);
    java.util.List list70 = sortApplication63.sortSimpleSpecialChars(str_array67);
    java.lang.String str71 = commApplication50.commAllMatches(str_array67);
    java.lang.String str72 = bcApplication49.lessThan(str_array67);
    java.util.List list73 = sortApplication41.sortSimpleCapital(str_array67);
    java.lang.String str74 = bcApplication0.greaterThanOrEqual(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str24.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str53.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str59.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str61.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str62.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str71.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str74);

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test107"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array2 = new java.lang.String[] { "" };
    java.lang.String str3 = calApplication0.printCalForYearMondayFirst(str_array2);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication4 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array7 = new java.lang.String[] { "" };
    java.lang.String str8 = calApplication5.printCalForYearMondayFirst(str_array7);
    java.util.List list9 = sortApplication4.sortCapitalNumbersSpecialChars(str_array7);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication10 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array13 = new java.lang.String[] { "" };
    java.lang.String str14 = calApplication11.printCalForYearMondayFirst(str_array13);
    java.util.List list15 = sortApplication10.sortCapitalNumbersSpecialChars(str_array13);
    java.util.List list16 = sortApplication4.numericalSortSimpleSpecialChars(str_array13);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "hi!" };
    java.lang.String str22 = commApplication19.commOnlySecond(str_array21);
    java.lang.String str23 = calApplication18.printCalForYear(str_array21);
    java.lang.String str24 = commApplication17.commOnlySecond(str_array21);
    java.util.List list25 = sortApplication4.sortAll(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication26 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array29 = new java.lang.String[] { "" };
    java.lang.String str30 = calApplication27.printCalForYearMondayFirst(str_array29);
    java.util.List list31 = sortApplication26.sortCapitalNumbersSpecialChars(str_array29);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication32 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "" };
    java.lang.String str36 = calApplication33.printCalForYearMondayFirst(str_array35);
    java.util.List list37 = sortApplication32.sortCapitalNumbersSpecialChars(str_array35);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array41 = new java.lang.String[] { "hi!" };
    java.lang.String str42 = commApplication39.commOnlySecond(str_array41);
    java.lang.String str43 = calApplication38.printCalForYear(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "hi!" };
    java.lang.String str47 = commApplication44.commOnlySecond(str_array46);
    java.lang.String str48 = calApplication38.printCalForYear(str_array46);
    java.util.List list49 = sortApplication32.sortNumbersSpecialChars(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array53 = new java.lang.String[] { "" };
    java.lang.String str54 = calApplication51.printCalForYearMondayFirst(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "" };
    java.lang.String str58 = calApplication55.printCalForYearMondayFirst(str_array57);
    java.lang.String str59 = calApplication51.printCal(str_array57);
    java.lang.String str60 = calApplication50.printCal(str_array57);
    java.util.List list61 = sortApplication32.numericalSortCapitalNumbersSpecialChars(str_array57);
    java.util.List list62 = sortApplication26.numericalSortCapitalNumbersSpecialChars(str_array57);
    java.util.List list63 = sortApplication4.numericalSortCapitalSpecialChars(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication64 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication65 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication66 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array68 = new java.lang.String[] { "" };
    java.lang.String str69 = calApplication66.printCalForYearMondayFirst(str_array68);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication70 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array72 = new java.lang.String[] { "" };
    java.lang.String str73 = calApplication70.printCalForYearMondayFirst(str_array72);
    java.lang.String str74 = calApplication66.printCal(str_array72);
    java.lang.String str75 = calApplication65.printCal(str_array72);
    java.lang.String str76 = bcApplication64.negate(str_array72);
    java.util.List list77 = sortApplication4.numericalSortCapitalNumbersSpecialChars(str_array72);
    java.lang.String str78 = calApplication0.printCalForMonthYear(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str22.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str24.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str42.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str47.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str78);

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test108"); }


    sg.edu.nus.comp.cs4218.impl.app.TailApplication tailApplication0 = new sg.edu.nus.comp.cs4218.impl.app.TailApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication7.printCalForYear(str_array15);
    java.util.List list18 = sortApplication1.sortNumbersSpecialChars(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication19 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = calApplication20.printCalForYearMondayFirst(str_array22);
    java.util.List list24 = sortApplication19.sortCapitalNumbersSpecialChars(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication25 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "" };
    java.lang.String str29 = calApplication26.printCalForYearMondayFirst(str_array28);
    java.util.List list30 = sortApplication25.sortCapitalNumbersSpecialChars(str_array28);
    java.util.List list31 = sortApplication19.numericalSortSimpleSpecialChars(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "hi!" };
    java.lang.String str37 = commApplication34.commOnlySecond(str_array36);
    java.lang.String str38 = calApplication33.printCalForYear(str_array36);
    java.lang.String str39 = commApplication32.commOnlySecond(str_array36);
    java.util.List list40 = sortApplication19.sortAll(str_array36);
    java.util.List list41 = sortApplication1.numericalSortNumbersSpecialChars(str_array36);
    java.io.InputStream inputStream42 = null;
    java.io.OutputStream outputStream43 = null;
    // The following exception was thrown during execution in test generation
    try {
      tailApplication0.run(str_array36, inputStream42, outputStream43);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException");
    } catch (sg.edu.nus.comp.cs4218.exception.TailException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.TailException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str37.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test109"); }


    sg.edu.nus.comp.cs4218.impl.app.HeadApplication headApplication0 = new sg.edu.nus.comp.cs4218.impl.app.HeadApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication5 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "" };
    java.lang.String str9 = calApplication6.printCalForYearMondayFirst(str_array8);
    java.util.List list10 = sortApplication5.sortCapitalNumbersSpecialChars(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array14 = new java.lang.String[] { "hi!" };
    java.lang.String str15 = commApplication12.commOnlySecond(str_array14);
    java.lang.String str16 = calApplication11.printCalForYear(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "hi!" };
    java.lang.String str20 = commApplication17.commOnlySecond(str_array19);
    java.lang.String str21 = calApplication11.printCalForYear(str_array19);
    java.util.List list22 = sortApplication5.sortNumbersSpecialChars(str_array19);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = calApplication24.printCalForYearMondayFirst(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array30 = new java.lang.String[] { "" };
    java.lang.String str31 = calApplication28.printCalForYearMondayFirst(str_array30);
    java.lang.String str32 = calApplication24.printCal(str_array30);
    java.lang.String str33 = calApplication23.printCal(str_array30);
    java.util.List list34 = sortApplication5.numericalSortCapitalNumbersSpecialChars(str_array30);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication35 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array38 = new java.lang.String[] { "" };
    java.lang.String str39 = calApplication36.printCalForYearMondayFirst(str_array38);
    java.util.List list40 = sortApplication35.sortCapitalNumbersSpecialChars(str_array38);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication41 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array44 = new java.lang.String[] { "" };
    java.lang.String str45 = calApplication42.printCalForYearMondayFirst(str_array44);
    java.util.List list46 = sortApplication41.sortCapitalNumbersSpecialChars(str_array44);
    java.util.List list47 = sortApplication35.numericalSortSimpleSpecialChars(str_array44);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array52 = new java.lang.String[] { "hi!" };
    java.lang.String str53 = commApplication50.commOnlySecond(str_array52);
    java.lang.String str54 = calApplication49.printCalForYear(str_array52);
    java.lang.String str55 = commApplication48.commOnlySecond(str_array52);
    java.util.List list56 = sortApplication35.sortAll(str_array52);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication57 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array60 = new java.lang.String[] { "" };
    java.lang.String str61 = calApplication58.printCalForYearMondayFirst(str_array60);
    java.util.List list62 = sortApplication57.sortCapitalNumbersSpecialChars(str_array60);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication63 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array66 = new java.lang.String[] { "" };
    java.lang.String str67 = calApplication64.printCalForYearMondayFirst(str_array66);
    java.util.List list68 = sortApplication63.sortCapitalNumbersSpecialChars(str_array66);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication69 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication70 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array72 = new java.lang.String[] { "hi!" };
    java.lang.String str73 = commApplication70.commOnlySecond(str_array72);
    java.lang.String str74 = calApplication69.printCalForYear(str_array72);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication75 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array77 = new java.lang.String[] { "hi!" };
    java.lang.String str78 = commApplication75.commOnlySecond(str_array77);
    java.lang.String str79 = calApplication69.printCalForYear(str_array77);
    java.util.List list80 = sortApplication63.sortNumbersSpecialChars(str_array77);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication81 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication82 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array84 = new java.lang.String[] { "" };
    java.lang.String str85 = calApplication82.printCalForYearMondayFirst(str_array84);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication86 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array88 = new java.lang.String[] { "" };
    java.lang.String str89 = calApplication86.printCalForYearMondayFirst(str_array88);
    java.lang.String str90 = calApplication82.printCal(str_array88);
    java.lang.String str91 = calApplication81.printCal(str_array88);
    java.util.List list92 = sortApplication63.numericalSortCapitalNumbersSpecialChars(str_array88);
    java.util.List list93 = sortApplication57.numericalSortCapitalNumbersSpecialChars(str_array88);
    java.util.List list94 = sortApplication35.numericalSortCapitalSpecialChars(str_array88);
    java.util.List list95 = sortApplication5.numericalSortAll(str_array88);
    java.lang.String str96 = calApplication1.printCalForMonthYear(str_array88);
    java.io.InputStream inputStream97 = null;
    java.io.OutputStream outputStream98 = null;
    // The following exception was thrown during execution in test generation
    try {
      headApplication0.run(str_array88, inputStream97, outputStream98);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.HeadException");
    } catch (sg.edu.nus.comp.cs4218.exception.HeadException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.HeadException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.HeadException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str15.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str53.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str55.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str73.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str78.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str96);

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test110"); }


    sg.edu.nus.comp.cs4218.impl.app.CatApplication catApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CatApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    java.lang.String str12 = commApplication5.commOnlySecond(str_array9);
    java.lang.String str13 = commApplication1.commOnlySecond(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication14 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "" };
    java.lang.String str18 = calApplication15.printCalForYearMondayFirst(str_array17);
    java.util.List list19 = sortApplication14.sortCapitalNumbersSpecialChars(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array23 = new java.lang.String[] { "hi!" };
    java.lang.String str24 = commApplication21.commOnlySecond(str_array23);
    java.lang.String str25 = calApplication20.printCalForYear(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!" };
    java.lang.String str29 = commApplication26.commOnlySecond(str_array28);
    java.lang.String str30 = calApplication20.printCalForYear(str_array28);
    java.util.List list31 = sortApplication14.sortNumbersSpecialChars(str_array28);
    java.lang.String str32 = commApplication1.commBothMathches(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication33 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication34 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array37 = new java.lang.String[] { "" };
    java.lang.String str38 = calApplication35.printCalForYearMondayFirst(str_array37);
    java.util.List list39 = sortApplication34.sortCapitalNumbersSpecialChars(str_array37);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "hi!" };
    java.lang.String str44 = commApplication41.commOnlySecond(str_array43);
    java.lang.String str45 = calApplication40.printCalForYear(str_array43);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array48 = new java.lang.String[] { "hi!" };
    java.lang.String str49 = commApplication46.commOnlySecond(str_array48);
    java.lang.String str50 = calApplication40.printCalForYear(str_array48);
    java.util.List list51 = sortApplication34.sortNumbersSpecialChars(str_array48);
    java.lang.String str52 = bcApplication33.notEqual(str_array48);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array56 = new java.lang.String[] { "hi!" };
    java.lang.String str57 = commApplication54.commOnlySecond(str_array56);
    java.lang.String str58 = calApplication53.printCalForYear(str_array56);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication59 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array61 = new java.lang.String[] { "hi!" };
    java.lang.String str62 = commApplication59.commOnlySecond(str_array61);
    java.lang.String str63 = calApplication53.printCalForYear(str_array61);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication64 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication65 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication66 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array68 = new java.lang.String[] { "" };
    java.lang.String str69 = calApplication66.printCalForYearMondayFirst(str_array68);
    java.util.List list70 = sortApplication65.sortCapitalNumbersSpecialChars(str_array68);
    java.util.List list71 = sortApplication64.sortSimpleSpecialChars(str_array68);
    java.lang.String str72 = calApplication53.printCal(str_array68);
    java.lang.String str73 = bcApplication33.lessThanOrEqual(str_array68);
    java.lang.String str74 = commApplication1.commNoMatches(str_array68);
    java.io.InputStream inputStream75 = null;
    java.io.OutputStream outputStream76 = null;
    // The following exception was thrown during execution in test generation
    try {
      catApplication0.run(str_array68, inputStream75, outputStream76);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CatException");
    } catch (sg.edu.nus.comp.cs4218.exception.CatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.CatException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CatException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str24.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str32.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str44.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str49.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str57.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str62.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str74.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test111"); }


    sg.edu.nus.comp.cs4218.impl.app.TailApplication tailApplication0 = new sg.edu.nus.comp.cs4218.impl.app.TailApplication();
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication1 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication2 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = calApplication3.printCalForYearMondayFirst(str_array5);
    java.util.List list7 = sortApplication2.sortCapitalNumbersSpecialChars(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication8 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array11 = new java.lang.String[] { "" };
    java.lang.String str12 = calApplication9.printCalForYearMondayFirst(str_array11);
    java.util.List list13 = sortApplication8.sortCapitalNumbersSpecialChars(str_array11);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!" };
    java.lang.String str18 = commApplication15.commOnlySecond(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "hi!" };
    java.lang.String str23 = commApplication20.commOnlySecond(str_array22);
    java.lang.String str24 = calApplication14.printCalForYear(str_array22);
    java.util.List list25 = sortApplication8.sortNumbersSpecialChars(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array29 = new java.lang.String[] { "" };
    java.lang.String str30 = calApplication27.printCalForYearMondayFirst(str_array29);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "" };
    java.lang.String str34 = calApplication31.printCalForYearMondayFirst(str_array33);
    java.lang.String str35 = calApplication27.printCal(str_array33);
    java.lang.String str36 = calApplication26.printCal(str_array33);
    java.util.List list37 = sortApplication8.numericalSortCapitalNumbersSpecialChars(str_array33);
    java.util.List list38 = sortApplication2.numericalSortCapitalNumbersSpecialChars(str_array33);
    java.lang.String[] str_array40 = new java.lang.String[] { "comm: terminated with error message comm: file is not readable" };
    java.util.List list41 = sortApplication2.numericalSortAll(str_array40);
    java.lang.String str42 = bcApplication1.bracket(str_array40);
    java.lang.String[] str_array43 = null;
    java.lang.String str44 = bcApplication1.not(str_array43);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array47 = new java.lang.String[] { "" };
    java.lang.String str48 = calApplication45.printCalForYearMondayFirst(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array51 = new java.lang.String[] { "" };
    java.lang.String str52 = calApplication49.printCalForYearMondayFirst(str_array51);
    java.lang.String str53 = calApplication45.printCal(str_array51);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "hi!" };
    java.lang.String str58 = commApplication55.commOnlySecond(str_array57);
    java.lang.String str59 = calApplication54.printCalForYear(str_array57);
    java.lang.String str60 = calApplication45.printCalForYearMondayFirst(str_array57);
    java.lang.String str61 = bcApplication1.add(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication62 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication63 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array66 = new java.lang.String[] { "" };
    java.lang.String str67 = calApplication64.printCalForYearMondayFirst(str_array66);
    java.util.List list68 = sortApplication63.sortCapitalNumbersSpecialChars(str_array66);
    java.util.List list69 = sortApplication62.sortSimpleSpecialChars(str_array66);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication70 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication71 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array73 = new java.lang.String[] { "hi!" };
    java.lang.String str74 = commApplication71.commOnlySecond(str_array73);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication75 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication76 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication77 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array79 = new java.lang.String[] { "hi!" };
    java.lang.String str80 = commApplication77.commOnlySecond(str_array79);
    java.lang.String str81 = calApplication76.printCalForYear(str_array79);
    java.lang.String str82 = commApplication75.commOnlySecond(str_array79);
    java.lang.String str83 = commApplication71.commOnlySecond(str_array79);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication84 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication85 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication86 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array88 = new java.lang.String[] { "" };
    java.lang.String str89 = calApplication86.printCalForYearMondayFirst(str_array88);
    java.util.List list90 = sortApplication85.sortCapitalNumbersSpecialChars(str_array88);
    java.util.List list91 = sortApplication84.sortSimpleSpecialChars(str_array88);
    java.lang.String str92 = commApplication71.commAllMatches(str_array88);
    java.lang.String str93 = bcApplication70.lessThan(str_array88);
    java.util.List list94 = sortApplication62.sortSimpleCapital(str_array88);
    java.lang.String str95 = bcApplication1.and(str_array88);
    java.io.InputStream inputStream96 = null;
    java.io.OutputStream outputStream97 = null;
    // The following exception was thrown during execution in test generation
    try {
      tailApplication0.run(str_array88, inputStream96, outputStream97);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException");
    } catch (sg.edu.nus.comp.cs4218.exception.TailException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.TailException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str23.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str58.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str74.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str80.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str82.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str83.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str92 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str92.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str95);

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test112"); }


    sg.edu.nus.comp.cs4218.impl.app.TailApplication tailApplication0 = new sg.edu.nus.comp.cs4218.impl.app.TailApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication4 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!" };
    java.lang.String str7 = commApplication4.commOnlySecond(str_array6);
    java.lang.String str8 = calApplication3.printCalForYear(str_array6);
    java.lang.String str9 = commApplication2.commOnlySecond(str_array6);
    java.lang.String str10 = commApplication1.commBothMathches(str_array6);
    java.io.InputStream inputStream11 = null;
    java.io.OutputStream outputStream12 = null;
    // The following exception was thrown during execution in test generation
    try {
      tailApplication0.run(str_array6, inputStream11, outputStream12);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException");
    } catch (sg.edu.nus.comp.cs4218.exception.TailException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.TailException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str7.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str9.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test113"); }


    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    java.lang.String str6 = calApplication1.printCalForYear(str_array4);
    java.lang.String str7 = commApplication0.commOnlySecond(str_array4);
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication0.commAllMatches(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication11 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array14 = new java.lang.String[] { "" };
    java.lang.String str15 = calApplication12.printCalForYearMondayFirst(str_array14);
    java.util.List list16 = sortApplication11.sortCapitalNumbersSpecialChars(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!" };
    java.lang.String str21 = commApplication18.commOnlySecond(str_array20);
    java.lang.String str22 = calApplication17.printCalForYear(str_array20);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array25 = new java.lang.String[] { "hi!" };
    java.lang.String str26 = commApplication23.commOnlySecond(str_array25);
    java.lang.String str27 = calApplication17.printCalForYear(str_array25);
    java.util.List list28 = sortApplication11.sortNumbersSpecialChars(str_array25);
    java.io.InputStream inputStream29 = null;
    java.io.OutputStream outputStream30 = null;
    // The following exception was thrown during execution in test generation
    try {
      commApplication0.run(str_array25, inputStream29, outputStream30);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CommException");
    } catch (sg.edu.nus.comp.cs4218.exception.CommException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.CommException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CommException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str7.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str26.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test114"); }


    sg.edu.nus.comp.cs4218.impl.app.TailApplication tailApplication0 = new sg.edu.nus.comp.cs4218.impl.app.TailApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication7.printCalForYear(str_array15);
    java.util.List list18 = sortApplication1.sortNumbersSpecialChars(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = calApplication20.printCalForYearMondayFirst(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = calApplication24.printCalForYearMondayFirst(str_array26);
    java.lang.String str28 = calApplication20.printCal(str_array26);
    java.lang.String str29 = calApplication19.printCal(str_array26);
    java.util.List list30 = sortApplication1.numericalSortCapitalNumbersSpecialChars(str_array26);
    java.io.InputStream inputStream31 = null;
    java.io.OutputStream outputStream32 = null;
    // The following exception was thrown during execution in test generation
    try {
      tailApplication0.run(str_array26, inputStream31, outputStream32);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException");
    } catch (sg.edu.nus.comp.cs4218.exception.TailException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.TailException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test115"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    java.util.List list12 = sortApplication0.numericalSortSimpleSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!" };
    java.lang.String str18 = commApplication15.commOnlySecond(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    java.lang.String str20 = commApplication13.commOnlySecond(str_array17);
    java.util.List list21 = sortApplication0.sortAll(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication22 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = calApplication24.printCalForYearMondayFirst(str_array26);
    java.util.List list28 = sortApplication23.sortCapitalNumbersSpecialChars(str_array26);
    java.util.List list29 = sortApplication22.sortSimpleSpecialChars(str_array26);
    java.util.List list30 = sortApplication0.numericalSortCapitalSpecialChars(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "hi!" };
    java.lang.String str36 = commApplication33.commOnlySecond(str_array35);
    java.lang.String str37 = calApplication32.printCalForYear(str_array35);
    java.lang.String str38 = commApplication31.commOnlySecond(str_array35);
    java.util.List list39 = sortApplication0.sortAll(str_array35);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array44 = new java.lang.String[] { "hi!" };
    java.lang.String str45 = commApplication42.commOnlySecond(str_array44);
    java.lang.String str46 = calApplication41.printCalForYear(str_array44);
    java.lang.String str47 = commApplication40.commOnlySecond(str_array44);
    java.lang.String[] str_array49 = new java.lang.String[] { "hi!" };
    java.lang.String str50 = commApplication40.commAllMatches(str_array49);
    java.util.List list51 = sortApplication0.sortStringsSimple(str_array49);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array56 = new java.lang.String[] { "hi!" };
    java.lang.String str57 = commApplication54.commOnlySecond(str_array56);
    java.lang.String str58 = calApplication53.printCalForYear(str_array56);
    java.lang.String str59 = commApplication52.commOnlySecond(str_array56);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array64 = new java.lang.String[] { "hi!" };
    java.lang.String str65 = commApplication62.commOnlySecond(str_array64);
    java.lang.String str66 = calApplication61.printCalForYear(str_array64);
    java.lang.String str67 = commApplication60.commOnlySecond(str_array64);
    java.lang.String str68 = commApplication52.commAllMatches(str_array64);
    java.util.List list69 = sortApplication0.numericalSortNumbers(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str36.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str38.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str45.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str47.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str50.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str57.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str59.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str65.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str67.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str68.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test116"); }


    sg.edu.nus.comp.cs4218.impl.app.FmtApplication fmtApplication0 = new sg.edu.nus.comp.cs4218.impl.app.FmtApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication7.printCalForYear(str_array15);
    java.util.List list18 = sortApplication1.sortNumbersSpecialChars(str_array15);
    java.io.InputStream inputStream19 = null;
    java.io.OutputStream outputStream20 = null;
    // The following exception was thrown during execution in test generation
    try {
      fmtApplication0.run(str_array15, inputStream19, outputStream20);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.FmtException");
    } catch (sg.edu.nus.comp.cs4218.exception.FmtException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.FmtException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.FmtException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test117"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "" };
    java.lang.String str9 = calApplication6.printCalForYearMondayFirst(str_array8);
    java.lang.String str10 = calApplication2.printCal(str_array8);
    java.lang.String str11 = calApplication1.printCal(str_array8);
    java.lang.String str12 = bcApplication0.negate(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication13 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "hi!" };
    java.lang.String str17 = commApplication14.commOnlySecond(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "hi!" };
    java.lang.String str23 = commApplication20.commOnlySecond(str_array22);
    java.lang.String str24 = calApplication19.printCalForYear(str_array22);
    java.lang.String str25 = commApplication18.commOnlySecond(str_array22);
    java.lang.String str26 = commApplication14.commOnlySecond(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication27 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication28 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array31 = new java.lang.String[] { "" };
    java.lang.String str32 = calApplication29.printCalForYearMondayFirst(str_array31);
    java.util.List list33 = sortApplication28.sortCapitalNumbersSpecialChars(str_array31);
    java.util.List list34 = sortApplication27.sortSimpleSpecialChars(str_array31);
    java.lang.String str35 = commApplication14.commAllMatches(str_array31);
    java.lang.String str36 = bcApplication13.lessThan(str_array31);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "hi!" };
    java.lang.String str40 = commApplication37.commOnlySecond(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array45 = new java.lang.String[] { "hi!" };
    java.lang.String str46 = commApplication43.commOnlySecond(str_array45);
    java.lang.String str47 = calApplication42.printCalForYear(str_array45);
    java.lang.String str48 = commApplication41.commOnlySecond(str_array45);
    java.lang.String str49 = commApplication37.commOnlySecond(str_array45);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication50 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array53 = new java.lang.String[] { "" };
    java.lang.String str54 = calApplication51.printCalForYearMondayFirst(str_array53);
    java.util.List list55 = sortApplication50.sortCapitalNumbersSpecialChars(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array59 = new java.lang.String[] { "hi!" };
    java.lang.String str60 = commApplication57.commOnlySecond(str_array59);
    java.lang.String str61 = calApplication56.printCalForYear(str_array59);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array64 = new java.lang.String[] { "hi!" };
    java.lang.String str65 = commApplication62.commOnlySecond(str_array64);
    java.lang.String str66 = calApplication56.printCalForYear(str_array64);
    java.util.List list67 = sortApplication50.sortNumbersSpecialChars(str_array64);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication69 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array71 = new java.lang.String[] { "hi!" };
    java.lang.String str72 = commApplication69.commOnlySecond(str_array71);
    java.lang.String str73 = calApplication68.printCalForYear(str_array71);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication74 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array76 = new java.lang.String[] { "hi!" };
    java.lang.String str77 = commApplication74.commOnlySecond(str_array76);
    java.lang.String str78 = calApplication68.printCalForYear(str_array76);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication79 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication80 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication81 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array83 = new java.lang.String[] { "" };
    java.lang.String str84 = calApplication81.printCalForYearMondayFirst(str_array83);
    java.util.List list85 = sortApplication80.sortCapitalNumbersSpecialChars(str_array83);
    java.util.List list86 = sortApplication79.sortSimpleSpecialChars(str_array83);
    java.lang.String str87 = calApplication68.printCal(str_array83);
    java.util.List list88 = sortApplication50.sortStringsSimple(str_array83);
    java.lang.String str89 = commApplication37.commOnlyFirst(str_array83);
    java.lang.String str90 = bcApplication13.greaterThanOrEqual(str_array83);
    java.lang.String str91 = bcApplication0.or(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str17.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str23.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str25.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str26.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str35.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str40.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str46.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str48.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str49.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str60.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str65.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str72.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str77.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str89.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str91);

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test118"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array14 = new java.lang.String[] { "hi!" };
    java.lang.String str15 = commApplication12.commOnlySecond(str_array14);
    java.lang.String str16 = calApplication6.printCalForYear(str_array14);
    java.util.List list17 = sortApplication0.sortNumbersSpecialChars(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication18 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = calApplication19.printCalForYearMondayFirst(str_array21);
    java.util.List list23 = sortApplication18.sortCapitalNumbersSpecialChars(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "hi!" };
    java.lang.String str28 = commApplication25.commOnlySecond(str_array27);
    java.lang.String str29 = calApplication24.printCalForYear(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "hi!" };
    java.lang.String str33 = commApplication30.commOnlySecond(str_array32);
    java.lang.String str34 = calApplication24.printCalForYear(str_array32);
    java.util.List list35 = sortApplication18.sortNumbersSpecialChars(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication36 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "" };
    java.lang.String str40 = calApplication37.printCalForYearMondayFirst(str_array39);
    java.util.List list41 = sortApplication36.sortCapitalNumbersSpecialChars(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication42 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array45 = new java.lang.String[] { "" };
    java.lang.String str46 = calApplication43.printCalForYearMondayFirst(str_array45);
    java.util.List list47 = sortApplication42.sortCapitalNumbersSpecialChars(str_array45);
    java.util.List list48 = sortApplication36.numericalSortSimpleSpecialChars(str_array45);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array53 = new java.lang.String[] { "hi!" };
    java.lang.String str54 = commApplication51.commOnlySecond(str_array53);
    java.lang.String str55 = calApplication50.printCalForYear(str_array53);
    java.lang.String str56 = commApplication49.commOnlySecond(str_array53);
    java.util.List list57 = sortApplication36.sortAll(str_array53);
    java.util.List list58 = sortApplication18.numericalSortNumbersSpecialChars(str_array53);
    java.util.List list59 = sortApplication0.numericalSortNumbersSpecialChars(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication60 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication61 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array64 = new java.lang.String[] { "" };
    java.lang.String str65 = calApplication62.printCalForYearMondayFirst(str_array64);
    java.util.List list66 = sortApplication61.sortCapitalNumbersSpecialChars(str_array64);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication67 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array70 = new java.lang.String[] { "" };
    java.lang.String str71 = calApplication68.printCalForYearMondayFirst(str_array70);
    java.util.List list72 = sortApplication67.sortCapitalNumbersSpecialChars(str_array70);
    java.util.List list73 = sortApplication61.numericalSortSimpleSpecialChars(str_array70);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication74 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication75 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication76 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array78 = new java.lang.String[] { "hi!" };
    java.lang.String str79 = commApplication76.commOnlySecond(str_array78);
    java.lang.String str80 = calApplication75.printCalForYear(str_array78);
    java.lang.String str81 = commApplication74.commOnlySecond(str_array78);
    java.util.List list82 = sortApplication61.sortAll(str_array78);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication83 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication84 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication85 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array87 = new java.lang.String[] { "" };
    java.lang.String str88 = calApplication85.printCalForYearMondayFirst(str_array87);
    java.util.List list89 = sortApplication84.sortCapitalNumbersSpecialChars(str_array87);
    java.util.List list90 = sortApplication83.sortSimpleSpecialChars(str_array87);
    java.util.List list91 = sortApplication61.numericalSortCapitalSpecialChars(str_array87);
    java.lang.String str92 = bcApplication60.subtract(str_array87);
    java.util.List list93 = sortApplication0.sortNumbers(str_array87);
    java.lang.String[] str_array94 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list95 = sortApplication0.sortSimpleNumbers(str_array94);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str15.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str28.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str33.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str54.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str56.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str79.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str81.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list93);

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test119"); }


    sg.edu.nus.comp.cs4218.impl.app.DateApplication dateApplication0 = new sg.edu.nus.comp.cs4218.impl.app.DateApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array5 = new java.lang.String[] { "hi!" };
    java.lang.String str6 = commApplication3.commOnlySecond(str_array5);
    java.lang.String str7 = calApplication2.printCalForYear(str_array5);
    java.lang.String str8 = commApplication1.commOnlySecond(str_array5);
    java.io.InputStream inputStream9 = null;
    java.io.OutputStream outputStream10 = null;
    // The following exception was thrown during execution in test generation
    try {
      dateApplication0.run(str_array5, inputStream9, outputStream10);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException");
    } catch (sg.edu.nus.comp.cs4218.exception.DateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.DateException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str6.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str8.equals("comm: terminated with error message comm: file is not readable"));

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test120"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "" };
    java.lang.String str9 = calApplication6.printCalForYearMondayFirst(str_array8);
    java.lang.String str10 = calApplication2.printCal(str_array8);
    java.lang.String str11 = calApplication1.printCal(str_array8);
    java.lang.String str12 = bcApplication0.negate(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication13 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication14 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "" };
    java.lang.String str18 = calApplication15.printCalForYearMondayFirst(str_array17);
    java.util.List list19 = sortApplication14.sortCapitalNumbersSpecialChars(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array23 = new java.lang.String[] { "hi!" };
    java.lang.String str24 = commApplication21.commOnlySecond(str_array23);
    java.lang.String str25 = calApplication20.printCalForYear(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!" };
    java.lang.String str29 = commApplication26.commOnlySecond(str_array28);
    java.lang.String str30 = calApplication20.printCalForYear(str_array28);
    java.util.List list31 = sortApplication14.sortNumbersSpecialChars(str_array28);
    java.lang.String str32 = bcApplication13.notEqual(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "hi!" };
    java.lang.String str37 = commApplication34.commOnlySecond(str_array36);
    java.lang.String str38 = calApplication33.printCalForYear(str_array36);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array41 = new java.lang.String[] { "hi!" };
    java.lang.String str42 = commApplication39.commOnlySecond(str_array41);
    java.lang.String str43 = calApplication33.printCalForYear(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication44 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication45 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array48 = new java.lang.String[] { "" };
    java.lang.String str49 = calApplication46.printCalForYearMondayFirst(str_array48);
    java.util.List list50 = sortApplication45.sortCapitalNumbersSpecialChars(str_array48);
    java.util.List list51 = sortApplication44.sortSimpleSpecialChars(str_array48);
    java.lang.String str52 = calApplication33.printCal(str_array48);
    java.lang.String str53 = bcApplication13.lessThanOrEqual(str_array48);
    java.lang.String[] str_array54 = null;
    java.lang.String str55 = bcApplication13.greaterThanOrEqual(str_array54);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication56 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array59 = new java.lang.String[] { "" };
    java.lang.String str60 = calApplication57.printCalForYearMondayFirst(str_array59);
    java.util.List list61 = sortApplication56.sortCapitalNumbersSpecialChars(str_array59);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication62 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication63 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array65 = new java.lang.String[] { "" };
    java.lang.String str66 = calApplication63.printCalForYearMondayFirst(str_array65);
    java.util.List list67 = sortApplication62.sortCapitalNumbersSpecialChars(str_array65);
    java.util.List list68 = sortApplication56.numericalSortSimpleSpecialChars(str_array65);
    java.lang.String str69 = bcApplication13.subtract(str_array65);
    java.lang.String str70 = bcApplication0.multiply(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str24.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str37.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str42.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test121"); }


    sg.edu.nus.comp.cs4218.impl.app.TailApplication tailApplication0 = new sg.edu.nus.comp.cs4218.impl.app.TailApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication7.printCalForYear(str_array15);
    java.util.List list18 = sortApplication1.sortNumbersSpecialChars(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication19 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = calApplication20.printCalForYearMondayFirst(str_array22);
    java.util.List list24 = sortApplication19.sortCapitalNumbersSpecialChars(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication25 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "" };
    java.lang.String str29 = calApplication26.printCalForYearMondayFirst(str_array28);
    java.util.List list30 = sortApplication25.sortCapitalNumbersSpecialChars(str_array28);
    java.util.List list31 = sortApplication19.numericalSortSimpleSpecialChars(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "hi!" };
    java.lang.String str37 = commApplication34.commOnlySecond(str_array36);
    java.lang.String str38 = calApplication33.printCalForYear(str_array36);
    java.lang.String str39 = commApplication32.commOnlySecond(str_array36);
    java.util.List list40 = sortApplication19.sortAll(str_array36);
    java.util.List list41 = sortApplication1.numericalSortNumbersSpecialChars(str_array36);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication42 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array45 = new java.lang.String[] { "" };
    java.lang.String str46 = calApplication43.printCalForYearMondayFirst(str_array45);
    java.util.List list47 = sortApplication42.sortCapitalNumbersSpecialChars(str_array45);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication48 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array51 = new java.lang.String[] { "" };
    java.lang.String str52 = calApplication49.printCalForYearMondayFirst(str_array51);
    java.util.List list53 = sortApplication48.sortCapitalNumbersSpecialChars(str_array51);
    java.util.List list54 = sortApplication42.numericalSortSimpleSpecialChars(str_array51);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array59 = new java.lang.String[] { "hi!" };
    java.lang.String str60 = commApplication57.commOnlySecond(str_array59);
    java.lang.String str61 = calApplication56.printCalForYear(str_array59);
    java.lang.String str62 = commApplication55.commOnlySecond(str_array59);
    java.util.List list63 = sortApplication42.sortAll(str_array59);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication64 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication65 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication66 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array68 = new java.lang.String[] { "" };
    java.lang.String str69 = calApplication66.printCalForYearMondayFirst(str_array68);
    java.util.List list70 = sortApplication65.sortCapitalNumbersSpecialChars(str_array68);
    java.util.List list71 = sortApplication64.sortSimpleSpecialChars(str_array68);
    java.util.List list72 = sortApplication42.numericalSortCapitalSpecialChars(str_array68);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication73 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication74 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication75 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array77 = new java.lang.String[] { "hi!" };
    java.lang.String str78 = commApplication75.commOnlySecond(str_array77);
    java.lang.String str79 = calApplication74.printCalForYear(str_array77);
    java.lang.String str80 = commApplication73.commOnlySecond(str_array77);
    java.util.List list81 = sortApplication42.sortAll(str_array77);
    java.util.List list82 = sortApplication1.numericalSortSpecialChars(str_array77);
    java.io.InputStream inputStream83 = null;
    java.io.OutputStream outputStream84 = null;
    // The following exception was thrown during execution in test generation
    try {
      tailApplication0.run(str_array77, inputStream83, outputStream84);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException");
    } catch (sg.edu.nus.comp.cs4218.exception.TailException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.TailException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str37.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str60.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str62.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str78.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str80.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list82);

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test122"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    java.util.List list5 = sortApplication0.sortSimpleCapitalSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication12.printCalForYear(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!" };
    java.lang.String str21 = commApplication18.commOnlySecond(str_array20);
    java.lang.String str22 = calApplication12.printCalForYear(str_array20);
    java.util.List list23 = sortApplication6.sortNumbersSpecialChars(str_array20);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "hi!" };
    java.lang.String str28 = commApplication25.commOnlySecond(str_array27);
    java.lang.String str29 = calApplication24.printCalForYear(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "hi!" };
    java.lang.String str33 = commApplication30.commOnlySecond(str_array32);
    java.lang.String str34 = calApplication24.printCalForYear(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication35 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication36 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "" };
    java.lang.String str40 = calApplication37.printCalForYearMondayFirst(str_array39);
    java.util.List list41 = sortApplication36.sortCapitalNumbersSpecialChars(str_array39);
    java.util.List list42 = sortApplication35.sortSimpleSpecialChars(str_array39);
    java.lang.String str43 = calApplication24.printCal(str_array39);
    java.util.List list44 = sortApplication6.sortStringsSimple(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication45 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array48 = new java.lang.String[] { "" };
    java.lang.String str49 = calApplication46.printCalForYearMondayFirst(str_array48);
    java.util.List list50 = sortApplication45.sortCapitalNumbersSpecialChars(str_array48);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication51 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array54 = new java.lang.String[] { "" };
    java.lang.String str55 = calApplication52.printCalForYearMondayFirst(str_array54);
    java.util.List list56 = sortApplication51.sortCapitalNumbersSpecialChars(str_array54);
    java.util.List list57 = sortApplication45.numericalSortSimpleSpecialChars(str_array54);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication59 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array62 = new java.lang.String[] { "hi!" };
    java.lang.String str63 = commApplication60.commOnlySecond(str_array62);
    java.lang.String str64 = calApplication59.printCalForYear(str_array62);
    java.lang.String str65 = commApplication58.commOnlySecond(str_array62);
    java.util.List list66 = sortApplication45.sortAll(str_array62);
    java.util.List list67 = sortApplication6.numericalSortSimpleNumbers(str_array62);
    java.util.List list68 = sortApplication0.numericalSortSimpleCapital(str_array62);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication69 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array71 = new java.lang.String[] { "" };
    java.lang.String str72 = calApplication69.printCalForYearMondayFirst(str_array71);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication73 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array75 = new java.lang.String[] { "" };
    java.lang.String str76 = calApplication73.printCalForYearMondayFirst(str_array75);
    java.lang.String str77 = calApplication69.printCal(str_array75);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication78 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication79 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array81 = new java.lang.String[] { "hi!" };
    java.lang.String str82 = commApplication79.commOnlySecond(str_array81);
    java.lang.String str83 = calApplication78.printCalForYear(str_array81);
    java.lang.String str84 = calApplication69.printCalForYearMondayFirst(str_array81);
    java.util.List list85 = sortApplication0.sortSimpleCapital(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str28.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str33.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str63.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str65.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str82.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list85);

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test123"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    java.lang.String str5 = calApplication0.printCalForYear(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    java.lang.String str13 = commApplication6.commOnlySecond(str_array10);
    java.lang.String str14 = calApplication0.printCalForMonthYearMondayFirst(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication15 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication16 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "" };
    java.lang.String str20 = calApplication17.printCalForYearMondayFirst(str_array19);
    java.util.List list21 = sortApplication16.sortCapitalNumbersSpecialChars(str_array19);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication22 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array25 = new java.lang.String[] { "" };
    java.lang.String str26 = calApplication23.printCalForYearMondayFirst(str_array25);
    java.util.List list27 = sortApplication22.sortCapitalNumbersSpecialChars(str_array25);
    java.util.List list28 = sortApplication16.numericalSortSimpleSpecialChars(str_array25);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "hi!" };
    java.lang.String str34 = commApplication31.commOnlySecond(str_array33);
    java.lang.String str35 = calApplication30.printCalForYear(str_array33);
    java.lang.String str36 = commApplication29.commOnlySecond(str_array33);
    java.util.List list37 = sortApplication16.sortAll(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication38 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication39 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array42 = new java.lang.String[] { "" };
    java.lang.String str43 = calApplication40.printCalForYearMondayFirst(str_array42);
    java.util.List list44 = sortApplication39.sortCapitalNumbersSpecialChars(str_array42);
    java.util.List list45 = sortApplication38.sortSimpleSpecialChars(str_array42);
    java.util.List list46 = sortApplication16.numericalSortCapitalSpecialChars(str_array42);
    java.lang.String str47 = bcApplication15.subtract(str_array42);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication48 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array51 = new java.lang.String[] { "" };
    java.lang.String str52 = calApplication49.printCalForYearMondayFirst(str_array51);
    java.util.List list53 = sortApplication48.sortCapitalNumbersSpecialChars(str_array51);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication54 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "" };
    java.lang.String str58 = calApplication55.printCalForYearMondayFirst(str_array57);
    java.util.List list59 = sortApplication54.sortCapitalNumbersSpecialChars(str_array57);
    java.util.List list60 = sortApplication48.numericalSortSimpleSpecialChars(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication63 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array65 = new java.lang.String[] { "hi!" };
    java.lang.String str66 = commApplication63.commOnlySecond(str_array65);
    java.lang.String str67 = calApplication62.printCalForYear(str_array65);
    java.lang.String str68 = commApplication61.commOnlySecond(str_array65);
    java.util.List list69 = sortApplication48.sortAll(str_array65);
    java.lang.String str70 = bcApplication15.add(str_array65);
    java.lang.String str71 = calApplication0.printCalForYearMondayFirst(str_array65);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication72 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication73 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array75 = new java.lang.String[] { "hi!" };
    java.lang.String str76 = commApplication73.commOnlySecond(str_array75);
    java.util.List list77 = sortApplication72.numericalSortNumbersSpecialChars(str_array75);
    java.lang.String str78 = calApplication0.printCalWithMondayFirst(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str36.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str66.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str68.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str76.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str78);

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test124"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    java.util.List list5 = sortApplication0.sortSimpleCapitalSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication6 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication12.printCalForYear(str_array15);
    java.lang.String str18 = commApplication11.commOnlySecond(str_array15);
    java.lang.String str19 = commApplication7.commOnlySecond(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication20 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication21 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array24 = new java.lang.String[] { "" };
    java.lang.String str25 = calApplication22.printCalForYearMondayFirst(str_array24);
    java.util.List list26 = sortApplication21.sortCapitalNumbersSpecialChars(str_array24);
    java.util.List list27 = sortApplication20.sortSimpleSpecialChars(str_array24);
    java.lang.String str28 = commApplication7.commAllMatches(str_array24);
    java.lang.String str29 = bcApplication6.lessThan(str_array24);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication30 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "" };
    java.lang.String str34 = calApplication31.printCalForYearMondayFirst(str_array33);
    java.util.List list35 = sortApplication30.sortCapitalNumbersSpecialChars(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "hi!" };
    java.lang.String str40 = commApplication37.commOnlySecond(str_array39);
    java.lang.String str41 = calApplication36.printCalForYear(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array44 = new java.lang.String[] { "hi!" };
    java.lang.String str45 = commApplication42.commOnlySecond(str_array44);
    java.lang.String str46 = calApplication36.printCalForYear(str_array44);
    java.util.List list47 = sortApplication30.sortNumbersSpecialChars(str_array44);
    java.lang.String str48 = bcApplication6.negate(str_array44);
    java.util.List list49 = sortApplication0.sortCapitalNumbers(str_array44);
    java.lang.String[] str_array50 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list51 = sortApplication0.sortCapitalNumbers(str_array50);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str28.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str40.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str45.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test125"); }


    sg.edu.nus.comp.cs4218.impl.app.CatApplication catApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CatApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = calApplication8.printCalForYearMondayFirst(str_array10);
    java.util.List list12 = sortApplication7.sortCapitalNumbersSpecialChars(str_array10);
    java.util.List list13 = sortApplication1.numericalSortSimpleSpecialChars(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "hi!" };
    java.lang.String str19 = commApplication16.commOnlySecond(str_array18);
    java.lang.String str20 = calApplication15.printCalForYear(str_array18);
    java.lang.String str21 = commApplication14.commOnlySecond(str_array18);
    java.util.List list22 = sortApplication1.sortAll(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication24 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = calApplication25.printCalForYearMondayFirst(str_array27);
    java.util.List list29 = sortApplication24.sortCapitalNumbersSpecialChars(str_array27);
    java.util.List list30 = sortApplication23.sortSimpleSpecialChars(str_array27);
    java.util.List list31 = sortApplication1.numericalSortCapitalSpecialChars(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "hi!" };
    java.lang.String str37 = commApplication34.commOnlySecond(str_array36);
    java.lang.String str38 = calApplication33.printCalForYear(str_array36);
    java.lang.String str39 = commApplication32.commOnlySecond(str_array36);
    java.util.List list40 = sortApplication1.sortAll(str_array36);
    java.io.InputStream inputStream41 = null;
    java.io.OutputStream outputStream42 = null;
    // The following exception was thrown during execution in test generation
    try {
      catApplication0.run(str_array36, inputStream41, outputStream42);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CatException");
    } catch (sg.edu.nus.comp.cs4218.exception.CatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.CatException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CatException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str37.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test126"); }


    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication0 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    java.lang.String str6 = calApplication1.printCalForYear(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication1.printCalForYear(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication12 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication13 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "" };
    java.lang.String str17 = calApplication14.printCalForYearMondayFirst(str_array16);
    java.util.List list18 = sortApplication13.sortCapitalNumbersSpecialChars(str_array16);
    java.util.List list19 = sortApplication12.sortSimpleSpecialChars(str_array16);
    java.lang.String str20 = calApplication1.printCal(str_array16);
    java.io.InputStream inputStream21 = null;
    java.io.OutputStream outputStream22 = null;
    // The following exception was thrown during execution in test generation
    try {
      echoApplication0.run(str_array16, inputStream21, outputStream22);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.EchoException");
    } catch (sg.edu.nus.comp.cs4218.exception.EchoException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.EchoException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.EchoException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test127"); }


    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array2 = new java.lang.String[] { "hi!" };
    java.lang.String str3 = commApplication0.commOnlySecond(str_array2);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication4 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "hi!" };
    java.lang.String str9 = commApplication6.commOnlySecond(str_array8);
    java.lang.String str10 = calApplication5.printCalForYear(str_array8);
    java.lang.String str11 = commApplication4.commOnlySecond(str_array8);
    java.lang.String str12 = commApplication0.commOnlySecond(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication13 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "hi!" };
    java.lang.String str17 = commApplication14.commOnlySecond(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "hi!" };
    java.lang.String str23 = commApplication20.commOnlySecond(str_array22);
    java.lang.String str24 = calApplication19.printCalForYear(str_array22);
    java.lang.String str25 = commApplication18.commOnlySecond(str_array22);
    java.lang.String str26 = commApplication14.commOnlySecond(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication27 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication28 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array31 = new java.lang.String[] { "" };
    java.lang.String str32 = calApplication29.printCalForYearMondayFirst(str_array31);
    java.util.List list33 = sortApplication28.sortCapitalNumbersSpecialChars(str_array31);
    java.util.List list34 = sortApplication27.sortSimpleSpecialChars(str_array31);
    java.lang.String str35 = commApplication14.commAllMatches(str_array31);
    java.lang.String str36 = bcApplication13.lessThan(str_array31);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "hi!" };
    java.lang.String str40 = commApplication37.commOnlySecond(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array45 = new java.lang.String[] { "hi!" };
    java.lang.String str46 = commApplication43.commOnlySecond(str_array45);
    java.lang.String str47 = calApplication42.printCalForYear(str_array45);
    java.lang.String str48 = commApplication41.commOnlySecond(str_array45);
    java.lang.String str49 = commApplication37.commOnlySecond(str_array45);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication50 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array53 = new java.lang.String[] { "" };
    java.lang.String str54 = calApplication51.printCalForYearMondayFirst(str_array53);
    java.util.List list55 = sortApplication50.sortCapitalNumbersSpecialChars(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array59 = new java.lang.String[] { "hi!" };
    java.lang.String str60 = commApplication57.commOnlySecond(str_array59);
    java.lang.String str61 = calApplication56.printCalForYear(str_array59);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array64 = new java.lang.String[] { "hi!" };
    java.lang.String str65 = commApplication62.commOnlySecond(str_array64);
    java.lang.String str66 = calApplication56.printCalForYear(str_array64);
    java.util.List list67 = sortApplication50.sortNumbersSpecialChars(str_array64);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication69 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array71 = new java.lang.String[] { "hi!" };
    java.lang.String str72 = commApplication69.commOnlySecond(str_array71);
    java.lang.String str73 = calApplication68.printCalForYear(str_array71);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication74 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array76 = new java.lang.String[] { "hi!" };
    java.lang.String str77 = commApplication74.commOnlySecond(str_array76);
    java.lang.String str78 = calApplication68.printCalForYear(str_array76);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication79 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication80 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication81 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array83 = new java.lang.String[] { "" };
    java.lang.String str84 = calApplication81.printCalForYearMondayFirst(str_array83);
    java.util.List list85 = sortApplication80.sortCapitalNumbersSpecialChars(str_array83);
    java.util.List list86 = sortApplication79.sortSimpleSpecialChars(str_array83);
    java.lang.String str87 = calApplication68.printCal(str_array83);
    java.util.List list88 = sortApplication50.sortStringsSimple(str_array83);
    java.lang.String str89 = commApplication37.commOnlyFirst(str_array83);
    java.lang.String str90 = bcApplication13.greaterThanOrEqual(str_array83);
    java.lang.String str91 = commApplication0.commOnlyFirst(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str3.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str9.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str17.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str23.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str25.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str26.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str35.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str40.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str46.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str48.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str49.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str60.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str65.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str72.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str77.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str89.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str91 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str91.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test128"); }


    sg.edu.nus.comp.cs4218.impl.app.TailApplication tailApplication0 = new sg.edu.nus.comp.cs4218.impl.app.TailApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "hi!" };
    java.lang.String str9 = commApplication6.commOnlySecond(str_array8);
    java.lang.String str10 = calApplication2.printCalWithMondayFirst(str_array8);
    java.util.List list11 = sortApplication1.sortCapitalNumbers(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication12 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.util.List list17 = sortApplication12.sortSimpleCapitalSpecialChars(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication18 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "hi!" };
    java.lang.String str22 = commApplication19.commOnlySecond(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "hi!" };
    java.lang.String str28 = commApplication25.commOnlySecond(str_array27);
    java.lang.String str29 = calApplication24.printCalForYear(str_array27);
    java.lang.String str30 = commApplication23.commOnlySecond(str_array27);
    java.lang.String str31 = commApplication19.commOnlySecond(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication32 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication33 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "" };
    java.lang.String str37 = calApplication34.printCalForYearMondayFirst(str_array36);
    java.util.List list38 = sortApplication33.sortCapitalNumbersSpecialChars(str_array36);
    java.util.List list39 = sortApplication32.sortSimpleSpecialChars(str_array36);
    java.lang.String str40 = commApplication19.commAllMatches(str_array36);
    java.lang.String str41 = bcApplication18.lessThan(str_array36);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication42 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array45 = new java.lang.String[] { "" };
    java.lang.String str46 = calApplication43.printCalForYearMondayFirst(str_array45);
    java.util.List list47 = sortApplication42.sortCapitalNumbersSpecialChars(str_array45);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array51 = new java.lang.String[] { "hi!" };
    java.lang.String str52 = commApplication49.commOnlySecond(str_array51);
    java.lang.String str53 = calApplication48.printCalForYear(str_array51);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array56 = new java.lang.String[] { "hi!" };
    java.lang.String str57 = commApplication54.commOnlySecond(str_array56);
    java.lang.String str58 = calApplication48.printCalForYear(str_array56);
    java.util.List list59 = sortApplication42.sortNumbersSpecialChars(str_array56);
    java.lang.String str60 = bcApplication18.negate(str_array56);
    java.util.List list61 = sortApplication12.sortCapitalNumbers(str_array56);
    java.util.List list62 = sortApplication1.numericalSortSimpleNumbersSpecialChars(str_array56);
    java.io.InputStream inputStream63 = null;
    java.io.OutputStream outputStream64 = null;
    // The following exception was thrown during execution in test generation
    try {
      tailApplication0.run(str_array56, inputStream63, outputStream64);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException");
    } catch (sg.edu.nus.comp.cs4218.exception.TailException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.TailException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str9.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str22.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str28.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str30.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str31.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str40.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str52.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str57.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test129"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array14 = new java.lang.String[] { "hi!" };
    java.lang.String str15 = commApplication12.commOnlySecond(str_array14);
    java.lang.String str16 = calApplication6.printCalForYear(str_array14);
    java.util.List list17 = sortApplication0.sortNumbersSpecialChars(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication18 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication19 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = calApplication20.printCalForYearMondayFirst(str_array22);
    java.util.List list24 = sortApplication19.sortCapitalNumbersSpecialChars(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!" };
    java.lang.String str29 = commApplication26.commOnlySecond(str_array28);
    java.lang.String str30 = calApplication25.printCalForYear(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "hi!" };
    java.lang.String str34 = commApplication31.commOnlySecond(str_array33);
    java.lang.String str35 = calApplication25.printCalForYear(str_array33);
    java.util.List list36 = sortApplication19.sortNumbersSpecialChars(str_array33);
    java.lang.String str37 = bcApplication18.notEqual(str_array33);
    java.util.List list38 = sortApplication0.sortSimpleNumbers(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array42 = new java.lang.String[] { "hi!" };
    java.lang.String str43 = commApplication40.commOnlySecond(str_array42);
    java.lang.String str44 = calApplication39.printCalForYear(str_array42);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array47 = new java.lang.String[] { "hi!" };
    java.lang.String str48 = commApplication45.commOnlySecond(str_array47);
    java.lang.String str49 = calApplication39.printCalForYear(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication50 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication51 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array54 = new java.lang.String[] { "" };
    java.lang.String str55 = calApplication52.printCalForYearMondayFirst(str_array54);
    java.util.List list56 = sortApplication51.sortCapitalNumbersSpecialChars(str_array54);
    java.util.List list57 = sortApplication50.sortSimpleSpecialChars(str_array54);
    java.lang.String str58 = calApplication39.printCal(str_array54);
    java.util.List list59 = sortApplication0.sortStringsCapital(str_array54);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array62 = new java.lang.String[] { "" };
    java.lang.String str63 = calApplication60.printCalForYearMondayFirst(str_array62);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array66 = new java.lang.String[] { "hi!" };
    java.lang.String str67 = commApplication64.commOnlySecond(str_array66);
    java.lang.String str68 = calApplication60.printCalWithMondayFirst(str_array66);
    java.util.List list69 = sortApplication0.sortSimpleNumbersSpecialChars(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str15.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str43.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str48.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str67.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test130"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array7 = new java.lang.String[] { "" };
    java.lang.String str8 = calApplication5.printCalForYearMondayFirst(str_array7);
    java.lang.String str9 = calApplication1.printCal(str_array7);
    java.lang.String str10 = calApplication0.printCal(str_array7);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "hi!" };
    java.lang.String str17 = commApplication14.commOnlySecond(str_array16);
    java.lang.String str18 = calApplication13.printCalForYear(str_array16);
    java.lang.String str19 = commApplication12.commOnlySecond(str_array16);
    java.lang.String str20 = commApplication11.commBothMathches(str_array16);
    java.lang.String str21 = calApplication0.printCalForYear(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication22 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array25 = new java.lang.String[] { "" };
    java.lang.String str26 = calApplication23.printCalForYearMondayFirst(str_array25);
    java.util.List list27 = sortApplication22.sortCapitalNumbersSpecialChars(str_array25);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication28 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array31 = new java.lang.String[] { "" };
    java.lang.String str32 = calApplication29.printCalForYearMondayFirst(str_array31);
    java.util.List list33 = sortApplication28.sortCapitalNumbersSpecialChars(str_array31);
    java.util.List list34 = sortApplication22.numericalSortSimpleSpecialChars(str_array31);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array38 = new java.lang.String[] { "hi!" };
    java.lang.String str39 = commApplication36.commOnlySecond(str_array38);
    java.lang.String str40 = calApplication35.printCalForYear(str_array38);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "" };
    java.lang.String str44 = calApplication41.printCalForYearMondayFirst(str_array43);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array47 = new java.lang.String[] { "hi!" };
    java.lang.String str48 = commApplication45.commOnlySecond(str_array47);
    java.lang.String str49 = calApplication41.printCalWithMondayFirst(str_array47);
    java.lang.String str50 = calApplication35.printCalWithMondayFirst(str_array47);
    java.util.List list51 = sortApplication22.numericalSortStringsSimple(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication52 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication53 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array56 = new java.lang.String[] { "" };
    java.lang.String str57 = calApplication54.printCalForYearMondayFirst(str_array56);
    java.util.List list58 = sortApplication53.sortCapitalNumbersSpecialChars(str_array56);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication59 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array62 = new java.lang.String[] { "hi!" };
    java.lang.String str63 = commApplication60.commOnlySecond(str_array62);
    java.lang.String str64 = calApplication59.printCalForYear(str_array62);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication65 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array67 = new java.lang.String[] { "hi!" };
    java.lang.String str68 = commApplication65.commOnlySecond(str_array67);
    java.lang.String str69 = calApplication59.printCalForYear(str_array67);
    java.util.List list70 = sortApplication53.sortNumbersSpecialChars(str_array67);
    java.lang.String str71 = bcApplication52.notEqual(str_array67);
    java.util.List list72 = sortApplication22.numericalSortSimpleCapital(str_array67);
    java.lang.String str73 = calApplication0.printCalForYear(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str17.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str48.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str63.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str68.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str73);

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test131"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array7 = new java.lang.String[] { "" };
    java.lang.String str8 = calApplication5.printCalForYearMondayFirst(str_array7);
    java.lang.String str9 = calApplication1.printCal(str_array7);
    java.lang.String str10 = calApplication0.printCal(str_array7);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication11 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array14 = new java.lang.String[] { "hi!" };
    java.lang.String str15 = commApplication12.commOnlySecond(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!" };
    java.lang.String str21 = commApplication18.commOnlySecond(str_array20);
    java.lang.String str22 = calApplication17.printCalForYear(str_array20);
    java.lang.String str23 = commApplication16.commOnlySecond(str_array20);
    java.lang.String str24 = commApplication12.commOnlySecond(str_array20);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication25 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication26 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array29 = new java.lang.String[] { "" };
    java.lang.String str30 = calApplication27.printCalForYearMondayFirst(str_array29);
    java.util.List list31 = sortApplication26.sortCapitalNumbersSpecialChars(str_array29);
    java.util.List list32 = sortApplication25.sortSimpleSpecialChars(str_array29);
    java.lang.String str33 = commApplication12.commAllMatches(str_array29);
    java.lang.String str34 = bcApplication11.lessThan(str_array29);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array38 = new java.lang.String[] { "hi!" };
    java.lang.String str39 = commApplication36.commOnlySecond(str_array38);
    java.lang.String str40 = calApplication35.printCalForYear(str_array38);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "hi!" };
    java.lang.String str44 = commApplication41.commOnlySecond(str_array43);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array49 = new java.lang.String[] { "hi!" };
    java.lang.String str50 = commApplication47.commOnlySecond(str_array49);
    java.lang.String str51 = calApplication46.printCalForYear(str_array49);
    java.lang.String str52 = commApplication45.commOnlySecond(str_array49);
    java.lang.String str53 = commApplication41.commOnlySecond(str_array49);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication54 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "" };
    java.lang.String str58 = calApplication55.printCalForYearMondayFirst(str_array57);
    java.util.List list59 = sortApplication54.sortCapitalNumbersSpecialChars(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array63 = new java.lang.String[] { "hi!" };
    java.lang.String str64 = commApplication61.commOnlySecond(str_array63);
    java.lang.String str65 = calApplication60.printCalForYear(str_array63);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication66 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array68 = new java.lang.String[] { "hi!" };
    java.lang.String str69 = commApplication66.commOnlySecond(str_array68);
    java.lang.String str70 = calApplication60.printCalForYear(str_array68);
    java.util.List list71 = sortApplication54.sortNumbersSpecialChars(str_array68);
    java.lang.String str72 = commApplication41.commBothMathches(str_array68);
    java.lang.String str73 = calApplication35.printCalForMonthYearMondayFirst(str_array68);
    java.lang.String str74 = bcApplication11.number(str_array68);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication75 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array77 = new java.lang.String[] { "" };
    java.lang.String str78 = calApplication75.printCalForYearMondayFirst(str_array77);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication79 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array81 = new java.lang.String[] { "hi!" };
    java.lang.String str82 = commApplication79.commOnlySecond(str_array81);
    java.lang.String str83 = calApplication75.printCalWithMondayFirst(str_array81);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication84 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication85 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array87 = new java.lang.String[] { "" };
    java.lang.String str88 = calApplication85.printCalForYearMondayFirst(str_array87);
    java.util.List list89 = sortApplication84.sortCapitalNumbersSpecialChars(str_array87);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication90 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication91 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array93 = new java.lang.String[] { "" };
    java.lang.String str94 = calApplication91.printCalForYearMondayFirst(str_array93);
    java.util.List list95 = sortApplication90.sortCapitalNumbersSpecialChars(str_array93);
    java.util.List list96 = sortApplication84.numericalSortSimpleSpecialChars(str_array93);
    java.lang.String str97 = calApplication75.printCalForYear(str_array93);
    java.lang.String str98 = bcApplication11.lessThanOrEqual(str_array93);
    java.lang.String str99 = calApplication0.printCal(str_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str15.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str23.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str24.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str33.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str44.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str50.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str52.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str53.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str64.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str69.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str72.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str82.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str99);

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test132"); }


    sg.edu.nus.comp.cs4218.impl.app.TailApplication tailApplication0 = new sg.edu.nus.comp.cs4218.impl.app.TailApplication();
    java.lang.String[] str_array1 = null;
    java.io.InputStream inputStream2 = null;
    java.io.OutputStream outputStream3 = null;
    // The following exception was thrown during execution in test generation
    try {
      tailApplication0.run(str_array1, inputStream2, outputStream3);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException");
    } catch (sg.edu.nus.comp.cs4218.exception.TailException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.TailException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test133"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = calApplication8.printCalForYearMondayFirst(str_array10);
    java.util.List list12 = sortApplication7.sortCapitalNumbersSpecialChars(str_array10);
    java.util.List list13 = sortApplication1.numericalSortSimpleSpecialChars(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "hi!" };
    java.lang.String str19 = commApplication16.commOnlySecond(str_array18);
    java.lang.String str20 = calApplication15.printCalForYear(str_array18);
    java.lang.String str21 = commApplication14.commOnlySecond(str_array18);
    java.util.List list22 = sortApplication1.sortAll(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication24 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = calApplication25.printCalForYearMondayFirst(str_array27);
    java.util.List list29 = sortApplication24.sortCapitalNumbersSpecialChars(str_array27);
    java.util.List list30 = sortApplication23.sortSimpleSpecialChars(str_array27);
    java.util.List list31 = sortApplication1.numericalSortCapitalSpecialChars(str_array27);
    java.lang.String str32 = bcApplication0.subtract(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication33 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "" };
    java.lang.String str37 = calApplication34.printCalForYearMondayFirst(str_array36);
    java.util.List list38 = sortApplication33.sortCapitalNumbersSpecialChars(str_array36);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication39 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array42 = new java.lang.String[] { "" };
    java.lang.String str43 = calApplication40.printCalForYearMondayFirst(str_array42);
    java.util.List list44 = sortApplication39.sortCapitalNumbersSpecialChars(str_array42);
    java.util.List list45 = sortApplication33.numericalSortSimpleSpecialChars(str_array42);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array50 = new java.lang.String[] { "hi!" };
    java.lang.String str51 = commApplication48.commOnlySecond(str_array50);
    java.lang.String str52 = calApplication47.printCalForYear(str_array50);
    java.lang.String str53 = commApplication46.commOnlySecond(str_array50);
    java.util.List list54 = sortApplication33.sortAll(str_array50);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication55 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication56 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array59 = new java.lang.String[] { "" };
    java.lang.String str60 = calApplication57.printCalForYearMondayFirst(str_array59);
    java.util.List list61 = sortApplication56.sortCapitalNumbersSpecialChars(str_array59);
    java.util.List list62 = sortApplication55.sortSimpleSpecialChars(str_array59);
    java.util.List list63 = sortApplication33.numericalSortCapitalSpecialChars(str_array59);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication64 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication65 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication66 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array68 = new java.lang.String[] { "" };
    java.lang.String str69 = calApplication66.printCalForYearMondayFirst(str_array68);
    java.util.List list70 = sortApplication65.sortCapitalNumbersSpecialChars(str_array68);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication71 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication72 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array74 = new java.lang.String[] { "" };
    java.lang.String str75 = calApplication72.printCalForYearMondayFirst(str_array74);
    java.util.List list76 = sortApplication71.sortCapitalNumbersSpecialChars(str_array74);
    java.util.List list77 = sortApplication65.numericalSortSimpleSpecialChars(str_array74);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication78 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication79 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication80 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array82 = new java.lang.String[] { "hi!" };
    java.lang.String str83 = commApplication80.commOnlySecond(str_array82);
    java.lang.String str84 = calApplication79.printCalForYear(str_array82);
    java.lang.String str85 = commApplication78.commOnlySecond(str_array82);
    java.util.List list86 = sortApplication65.sortAll(str_array82);
    java.util.List list87 = sortApplication64.sortSimpleCapitalSpecialChars(str_array82);
    java.util.List list88 = sortApplication33.numericalSortAll(str_array82);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication89 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array91 = new java.lang.String[] { "" };
    java.lang.String str92 = calApplication89.printCalForYearMondayFirst(str_array91);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication93 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array95 = new java.lang.String[] { "" };
    java.lang.String str96 = calApplication93.printCalForYearMondayFirst(str_array95);
    java.lang.String str97 = calApplication89.printCal(str_array95);
    java.util.List list98 = sortApplication33.sortSimpleCapitalSpecialChars(str_array95);
    java.lang.String str99 = bcApplication0.and(str_array95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str51.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str53.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str83.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str85.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str99);

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test134"); }


    sg.edu.nus.comp.cs4218.impl.app.HeadApplication headApplication0 = new sg.edu.nus.comp.cs4218.impl.app.HeadApplication();
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication1 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    java.lang.String str13 = commApplication6.commOnlySecond(str_array10);
    java.lang.String str14 = commApplication2.commOnlySecond(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication15 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "" };
    java.lang.String str19 = calApplication16.printCalForYearMondayFirst(str_array18);
    java.util.List list20 = sortApplication15.sortCapitalNumbersSpecialChars(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array24 = new java.lang.String[] { "hi!" };
    java.lang.String str25 = commApplication22.commOnlySecond(str_array24);
    java.lang.String str26 = calApplication21.printCalForYear(str_array24);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array29 = new java.lang.String[] { "hi!" };
    java.lang.String str30 = commApplication27.commOnlySecond(str_array29);
    java.lang.String str31 = calApplication21.printCalForYear(str_array29);
    java.util.List list32 = sortApplication15.sortNumbersSpecialChars(str_array29);
    java.lang.String str33 = commApplication2.commBothMathches(str_array29);
    java.lang.String str34 = bcApplication1.add(str_array29);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication35 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication36 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication37 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "" };
    java.lang.String str41 = calApplication38.printCalForYearMondayFirst(str_array40);
    java.util.List list42 = sortApplication37.sortCapitalNumbersSpecialChars(str_array40);
    java.util.List list43 = sortApplication36.sortSimpleSpecialChars(str_array40);
    java.io.InputStream inputStream44 = null;
    java.io.OutputStream outputStream45 = null;
    bcApplication35.run(str_array40, inputStream44, outputStream45);
    java.lang.String str47 = bcApplication1.equalEqual(str_array40);
    java.io.InputStream inputStream48 = null;
    java.io.OutputStream outputStream49 = null;
    // The following exception was thrown during execution in test generation
    try {
      headApplication0.run(str_array40, inputStream48, outputStream49);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.HeadException");
    } catch (sg.edu.nus.comp.cs4218.exception.HeadException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.HeadException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.HeadException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str14.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str25.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str30.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str33.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test135"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array7 = new java.lang.String[] { "" };
    java.lang.String str8 = calApplication5.printCalForYearMondayFirst(str_array7);
    java.lang.String str9 = calApplication1.printCal(str_array7);
    java.lang.String str10 = calApplication0.printCal(str_array7);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "hi!" };
    java.lang.String str17 = commApplication14.commOnlySecond(str_array16);
    java.lang.String str18 = calApplication13.printCalForYear(str_array16);
    java.lang.String str19 = commApplication12.commOnlySecond(str_array16);
    java.lang.String str20 = commApplication11.commBothMathches(str_array16);
    java.lang.String str21 = calApplication0.printCalForYear(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication22 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication24 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = calApplication25.printCalForYearMondayFirst(str_array27);
    java.util.List list29 = sortApplication24.sortCapitalNumbersSpecialChars(str_array27);
    java.util.List list30 = sortApplication23.sortSimpleSpecialChars(str_array27);
    java.lang.String str31 = bcApplication22.lessThan(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication32 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "hi!" };
    java.lang.String str36 = commApplication33.commOnlySecond(str_array35);
    java.util.List list37 = sortApplication32.sortSimpleCapitalSpecialChars(str_array35);
    java.lang.String str38 = bcApplication22.subtract(str_array35);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication39 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication40 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "" };
    java.lang.String str44 = calApplication41.printCalForYearMondayFirst(str_array43);
    java.util.List list45 = sortApplication40.sortCapitalNumbersSpecialChars(str_array43);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication46 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array49 = new java.lang.String[] { "" };
    java.lang.String str50 = calApplication47.printCalForYearMondayFirst(str_array49);
    java.util.List list51 = sortApplication46.sortCapitalNumbersSpecialChars(str_array49);
    java.util.List list52 = sortApplication40.numericalSortSimpleSpecialChars(str_array49);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "hi!" };
    java.lang.String str58 = commApplication55.commOnlySecond(str_array57);
    java.lang.String str59 = calApplication54.printCalForYear(str_array57);
    java.lang.String str60 = commApplication53.commOnlySecond(str_array57);
    java.util.List list61 = sortApplication40.sortAll(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication62 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication63 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array66 = new java.lang.String[] { "" };
    java.lang.String str67 = calApplication64.printCalForYearMondayFirst(str_array66);
    java.util.List list68 = sortApplication63.sortCapitalNumbersSpecialChars(str_array66);
    java.util.List list69 = sortApplication62.sortSimpleSpecialChars(str_array66);
    java.util.List list70 = sortApplication40.numericalSortCapitalSpecialChars(str_array66);
    java.lang.String str71 = bcApplication39.subtract(str_array66);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication72 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication73 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array75 = new java.lang.String[] { "" };
    java.lang.String str76 = calApplication73.printCalForYearMondayFirst(str_array75);
    java.util.List list77 = sortApplication72.sortCapitalNumbersSpecialChars(str_array75);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication78 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication79 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array81 = new java.lang.String[] { "" };
    java.lang.String str82 = calApplication79.printCalForYearMondayFirst(str_array81);
    java.util.List list83 = sortApplication78.sortCapitalNumbersSpecialChars(str_array81);
    java.util.List list84 = sortApplication72.numericalSortSimpleSpecialChars(str_array81);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication85 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication86 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication87 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array89 = new java.lang.String[] { "hi!" };
    java.lang.String str90 = commApplication87.commOnlySecond(str_array89);
    java.lang.String str91 = calApplication86.printCalForYear(str_array89);
    java.lang.String str92 = commApplication85.commOnlySecond(str_array89);
    java.util.List list93 = sortApplication72.sortAll(str_array89);
    java.lang.String str94 = bcApplication39.add(str_array89);
    java.lang.String str95 = bcApplication22.greaterThanOrEqual(str_array89);
    java.lang.String str96 = calApplication0.printCalForMonthYear(str_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str17.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str36.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str58.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str60.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str90.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str92 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str92.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str96);

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test136"); }


    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array2 = new java.lang.String[] { "hi!" };
    java.lang.String str3 = commApplication0.commOnlySecond(str_array2);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication4 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "hi!" };
    java.lang.String str9 = commApplication6.commOnlySecond(str_array8);
    java.lang.String str10 = calApplication5.printCalForYear(str_array8);
    java.lang.String str11 = commApplication4.commOnlySecond(str_array8);
    java.lang.String str12 = commApplication0.commOnlySecond(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication13 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "" };
    java.lang.String str17 = calApplication14.printCalForYearMondayFirst(str_array16);
    java.util.List list18 = sortApplication13.sortCapitalNumbersSpecialChars(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "hi!" };
    java.lang.String str23 = commApplication20.commOnlySecond(str_array22);
    java.lang.String str24 = calApplication19.printCalForYear(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "hi!" };
    java.lang.String str28 = commApplication25.commOnlySecond(str_array27);
    java.lang.String str29 = calApplication19.printCalForYear(str_array27);
    java.util.List list30 = sortApplication13.sortNumbersSpecialChars(str_array27);
    java.lang.String str31 = commApplication0.commBothMathches(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "hi!" };
    java.lang.String str35 = commApplication32.commOnlySecond(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "hi!" };
    java.lang.String str41 = commApplication38.commOnlySecond(str_array40);
    java.lang.String str42 = calApplication37.printCalForYear(str_array40);
    java.lang.String str43 = commApplication36.commOnlySecond(str_array40);
    java.lang.String str44 = commApplication32.commOnlySecond(str_array40);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication45 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication46 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array49 = new java.lang.String[] { "" };
    java.lang.String str50 = calApplication47.printCalForYearMondayFirst(str_array49);
    java.util.List list51 = sortApplication46.sortCapitalNumbersSpecialChars(str_array49);
    java.util.List list52 = sortApplication45.sortSimpleSpecialChars(str_array49);
    java.lang.String str53 = commApplication32.commAllMatches(str_array49);
    java.lang.String str54 = commApplication0.commNoMatches(str_array49);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "hi!" };
    java.lang.String str58 = commApplication55.commOnlySecond(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication59 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array63 = new java.lang.String[] { "hi!" };
    java.lang.String str64 = commApplication61.commOnlySecond(str_array63);
    java.lang.String str65 = calApplication60.printCalForYear(str_array63);
    java.lang.String str66 = commApplication59.commOnlySecond(str_array63);
    java.lang.String str67 = commApplication55.commOnlySecond(str_array63);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication68 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication69 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication70 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array72 = new java.lang.String[] { "" };
    java.lang.String str73 = calApplication70.printCalForYearMondayFirst(str_array72);
    java.util.List list74 = sortApplication69.sortCapitalNumbersSpecialChars(str_array72);
    java.util.List list75 = sortApplication68.sortSimpleSpecialChars(str_array72);
    java.lang.String str76 = commApplication55.commAllMatches(str_array72);
    java.io.InputStream inputStream77 = null;
    java.io.OutputStream outputStream78 = null;
    // The following exception was thrown during execution in test generation
    try {
      commApplication0.run(str_array72, inputStream77, outputStream78);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CommException");
    } catch (sg.edu.nus.comp.cs4218.exception.CommException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.CommException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CommException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str3.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str9.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str23.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str28.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str31.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str35.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str41.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str43.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str44.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str53.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str54.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str58.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str64.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str66.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str67.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str76.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test137"); }


    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    java.lang.String str6 = calApplication1.printCalForYear(str_array4);
    java.lang.String str7 = commApplication0.commOnlySecond(str_array4);
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication0.commAllMatches(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array13 = new java.lang.String[] { "" };
    java.lang.String str14 = calApplication11.printCalForYearMondayFirst(str_array13);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!" };
    java.lang.String str18 = commApplication15.commOnlySecond(str_array17);
    java.lang.String str19 = calApplication11.printCalWithMondayFirst(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication20 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array23 = new java.lang.String[] { "" };
    java.lang.String str24 = calApplication21.printCalForYearMondayFirst(str_array23);
    java.util.List list25 = sortApplication20.sortCapitalNumbersSpecialChars(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication26 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array29 = new java.lang.String[] { "" };
    java.lang.String str30 = calApplication27.printCalForYearMondayFirst(str_array29);
    java.util.List list31 = sortApplication26.sortCapitalNumbersSpecialChars(str_array29);
    java.util.List list32 = sortApplication20.numericalSortSimpleSpecialChars(str_array29);
    java.lang.String str33 = calApplication11.printCalForYear(str_array29);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array37 = new java.lang.String[] { "hi!" };
    java.lang.String str38 = commApplication35.commOnlySecond(str_array37);
    java.lang.String str39 = calApplication34.printCalForYear(str_array37);
    java.lang.String str40 = calApplication11.printCalForYearMondayFirst(str_array37);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication41 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array44 = new java.lang.String[] { "hi!" };
    java.lang.String str45 = commApplication42.commOnlySecond(str_array44);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array50 = new java.lang.String[] { "hi!" };
    java.lang.String str51 = commApplication48.commOnlySecond(str_array50);
    java.lang.String str52 = calApplication47.printCalForYear(str_array50);
    java.lang.String str53 = commApplication46.commOnlySecond(str_array50);
    java.lang.String str54 = commApplication42.commOnlySecond(str_array50);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication55 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array58 = new java.lang.String[] { "" };
    java.lang.String str59 = calApplication56.printCalForYearMondayFirst(str_array58);
    java.util.List list60 = sortApplication55.sortCapitalNumbersSpecialChars(str_array58);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array64 = new java.lang.String[] { "hi!" };
    java.lang.String str65 = commApplication62.commOnlySecond(str_array64);
    java.lang.String str66 = calApplication61.printCalForYear(str_array64);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication67 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array69 = new java.lang.String[] { "hi!" };
    java.lang.String str70 = commApplication67.commOnlySecond(str_array69);
    java.lang.String str71 = calApplication61.printCalForYear(str_array69);
    java.util.List list72 = sortApplication55.sortNumbersSpecialChars(str_array69);
    java.lang.String str73 = commApplication42.commBothMathches(str_array69);
    java.lang.String str74 = bcApplication41.add(str_array69);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication75 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication76 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication77 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication78 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array80 = new java.lang.String[] { "" };
    java.lang.String str81 = calApplication78.printCalForYearMondayFirst(str_array80);
    java.util.List list82 = sortApplication77.sortCapitalNumbersSpecialChars(str_array80);
    java.util.List list83 = sortApplication76.sortSimpleSpecialChars(str_array80);
    java.io.InputStream inputStream84 = null;
    java.io.OutputStream outputStream85 = null;
    bcApplication75.run(str_array80, inputStream84, outputStream85);
    java.lang.String str87 = bcApplication41.equalEqual(str_array80);
    java.lang.String str88 = calApplication11.printCalForYear(str_array80);
    java.lang.String str89 = commApplication0.commAllMatches(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str7.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str38.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str45.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str51.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str53.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str54.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str65.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str70.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str73.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str89.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test138"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array2 = new java.lang.String[] { "" };
    java.lang.String str3 = calApplication0.printCalForYearMondayFirst(str_array2);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication4 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array6 = new java.lang.String[] { "" };
    java.lang.String str7 = calApplication4.printCalForYearMondayFirst(str_array6);
    java.lang.String str8 = calApplication0.printCal(str_array6);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array12 = new java.lang.String[] { "hi!" };
    java.lang.String str13 = commApplication10.commOnlySecond(str_array12);
    java.lang.String str14 = calApplication9.printCalForYear(str_array12);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!" };
    java.lang.String str18 = commApplication15.commOnlySecond(str_array17);
    java.lang.String str19 = calApplication9.printCalForYear(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication20 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication21 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array24 = new java.lang.String[] { "" };
    java.lang.String str25 = calApplication22.printCalForYearMondayFirst(str_array24);
    java.util.List list26 = sortApplication21.sortCapitalNumbersSpecialChars(str_array24);
    java.util.List list27 = sortApplication20.sortSimpleSpecialChars(str_array24);
    java.lang.String str28 = calApplication9.printCal(str_array24);
    java.lang.String str29 = calApplication0.printCalForMonthYear(str_array24);
    java.lang.String[] str_array30 = null;
    java.lang.String str31 = calApplication0.printCalForYearMondayFirst(str_array30);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication32 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "hi!" };
    java.lang.String str36 = commApplication33.commOnlySecond(str_array35);
    java.util.List list37 = sortApplication32.numericalSortNumbersSpecialChars(str_array35);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication38 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array41 = new java.lang.String[] { "" };
    java.lang.String str42 = calApplication39.printCalForYearMondayFirst(str_array41);
    java.util.List list43 = sortApplication38.sortCapitalNumbersSpecialChars(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array47 = new java.lang.String[] { "hi!" };
    java.lang.String str48 = commApplication45.commOnlySecond(str_array47);
    java.lang.String str49 = calApplication44.printCalForYear(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array52 = new java.lang.String[] { "hi!" };
    java.lang.String str53 = commApplication50.commOnlySecond(str_array52);
    java.lang.String str54 = calApplication44.printCalForYear(str_array52);
    java.util.List list55 = sortApplication38.sortNumbersSpecialChars(str_array52);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array59 = new java.lang.String[] { "hi!" };
    java.lang.String str60 = commApplication57.commOnlySecond(str_array59);
    java.lang.String str61 = calApplication56.printCalForYear(str_array59);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array64 = new java.lang.String[] { "hi!" };
    java.lang.String str65 = commApplication62.commOnlySecond(str_array64);
    java.lang.String str66 = calApplication56.printCalForYear(str_array64);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication67 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication68 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication69 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array71 = new java.lang.String[] { "" };
    java.lang.String str72 = calApplication69.printCalForYearMondayFirst(str_array71);
    java.util.List list73 = sortApplication68.sortCapitalNumbersSpecialChars(str_array71);
    java.util.List list74 = sortApplication67.sortSimpleSpecialChars(str_array71);
    java.lang.String str75 = calApplication56.printCal(str_array71);
    java.util.List list76 = sortApplication38.sortStringsSimple(str_array71);
    java.util.List list77 = sortApplication32.sortSimpleCapitalNumber(str_array71);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication78 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication79 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array81 = new java.lang.String[] { "" };
    java.lang.String str82 = calApplication79.printCalForYearMondayFirst(str_array81);
    java.util.List list83 = sortApplication78.sortCapitalNumbersSpecialChars(str_array81);
    java.util.List list84 = sortApplication32.numericalSortSimpleSpecialChars(str_array81);
    java.io.InputStream inputStream85 = null;
    java.io.OutputStream outputStream86 = null;
    calApplication0.run(str_array81, inputStream85, outputStream86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str36.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str48.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str53.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str60.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str65.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list84);

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test139"); }


    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array2 = new java.lang.String[] { "hi!" };
    java.lang.String str3 = commApplication0.commOnlySecond(str_array2);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication4 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "hi!" };
    java.lang.String str9 = commApplication6.commOnlySecond(str_array8);
    java.lang.String str10 = calApplication5.printCalForYear(str_array8);
    java.lang.String str11 = commApplication4.commOnlySecond(str_array8);
    java.lang.String str12 = commApplication0.commOnlySecond(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication13 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "" };
    java.lang.String str17 = calApplication14.printCalForYearMondayFirst(str_array16);
    java.util.List list18 = sortApplication13.sortCapitalNumbersSpecialChars(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "hi!" };
    java.lang.String str23 = commApplication20.commOnlySecond(str_array22);
    java.lang.String str24 = calApplication19.printCalForYear(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "hi!" };
    java.lang.String str28 = commApplication25.commOnlySecond(str_array27);
    java.lang.String str29 = calApplication19.printCalForYear(str_array27);
    java.util.List list30 = sortApplication13.sortNumbersSpecialChars(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "hi!" };
    java.lang.String str35 = commApplication32.commOnlySecond(str_array34);
    java.lang.String str36 = calApplication31.printCalForYear(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "hi!" };
    java.lang.String str40 = commApplication37.commOnlySecond(str_array39);
    java.lang.String str41 = calApplication31.printCalForYear(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication42 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication43 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = calApplication44.printCalForYearMondayFirst(str_array46);
    java.util.List list48 = sortApplication43.sortCapitalNumbersSpecialChars(str_array46);
    java.util.List list49 = sortApplication42.sortSimpleSpecialChars(str_array46);
    java.lang.String str50 = calApplication31.printCal(str_array46);
    java.util.List list51 = sortApplication13.sortStringsSimple(str_array46);
    java.lang.String str52 = commApplication0.commOnlyFirst(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication53 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array56 = new java.lang.String[] { "hi!" };
    java.lang.String str57 = commApplication54.commOnlySecond(str_array56);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication59 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array62 = new java.lang.String[] { "hi!" };
    java.lang.String str63 = commApplication60.commOnlySecond(str_array62);
    java.lang.String str64 = calApplication59.printCalForYear(str_array62);
    java.lang.String str65 = commApplication58.commOnlySecond(str_array62);
    java.lang.String str66 = commApplication54.commOnlySecond(str_array62);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication67 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication68 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication69 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array71 = new java.lang.String[] { "" };
    java.lang.String str72 = calApplication69.printCalForYearMondayFirst(str_array71);
    java.util.List list73 = sortApplication68.sortCapitalNumbersSpecialChars(str_array71);
    java.util.List list74 = sortApplication67.sortSimpleSpecialChars(str_array71);
    java.lang.String str75 = commApplication54.commAllMatches(str_array71);
    java.lang.String str76 = bcApplication53.lessThan(str_array71);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication77 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication78 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array80 = new java.lang.String[] { "" };
    java.lang.String str81 = calApplication78.printCalForYearMondayFirst(str_array80);
    java.util.List list82 = sortApplication77.sortCapitalNumbersSpecialChars(str_array80);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication83 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication84 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array86 = new java.lang.String[] { "hi!" };
    java.lang.String str87 = commApplication84.commOnlySecond(str_array86);
    java.lang.String str88 = calApplication83.printCalForYear(str_array86);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication89 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array91 = new java.lang.String[] { "hi!" };
    java.lang.String str92 = commApplication89.commOnlySecond(str_array91);
    java.lang.String str93 = calApplication83.printCalForYear(str_array91);
    java.util.List list94 = sortApplication77.sortNumbersSpecialChars(str_array91);
    java.lang.String str95 = bcApplication53.negate(str_array91);
    java.lang.String str96 = commApplication0.commNoMatches(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str3.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str9.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str23.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str28.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str35.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str40.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str52.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str57.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str63.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str65.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str66.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str75.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str87.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str92 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str92.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str96 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str96.equals("comm: terminated with error message comm: file is not readable"));

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test140"); }


    sg.edu.nus.comp.cs4218.impl.app.TailApplication tailApplication0 = new sg.edu.nus.comp.cs4218.impl.app.TailApplication();
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication1 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication2 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = calApplication3.printCalForYearMondayFirst(str_array5);
    java.util.List list7 = sortApplication2.sortCapitalNumbersSpecialChars(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array11 = new java.lang.String[] { "hi!" };
    java.lang.String str12 = commApplication9.commOnlySecond(str_array11);
    java.lang.String str13 = calApplication8.printCalForYear(str_array11);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "hi!" };
    java.lang.String str17 = commApplication14.commOnlySecond(str_array16);
    java.lang.String str18 = calApplication8.printCalForYear(str_array16);
    java.util.List list19 = sortApplication2.sortNumbersSpecialChars(str_array16);
    java.lang.String str20 = bcApplication1.notEqual(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array24 = new java.lang.String[] { "hi!" };
    java.lang.String str25 = commApplication22.commOnlySecond(str_array24);
    java.lang.String str26 = calApplication21.printCalForYear(str_array24);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array29 = new java.lang.String[] { "hi!" };
    java.lang.String str30 = commApplication27.commOnlySecond(str_array29);
    java.lang.String str31 = calApplication21.printCalForYear(str_array29);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication32 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication33 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "" };
    java.lang.String str37 = calApplication34.printCalForYearMondayFirst(str_array36);
    java.util.List list38 = sortApplication33.sortCapitalNumbersSpecialChars(str_array36);
    java.util.List list39 = sortApplication32.sortSimpleSpecialChars(str_array36);
    java.lang.String str40 = calApplication21.printCal(str_array36);
    java.lang.String str41 = bcApplication1.lessThanOrEqual(str_array36);
    java.lang.String[] str_array42 = null;
    java.lang.String str43 = bcApplication1.greaterThanOrEqual(str_array42);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication44 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array47 = new java.lang.String[] { "" };
    java.lang.String str48 = calApplication45.printCalForYearMondayFirst(str_array47);
    java.util.List list49 = sortApplication44.sortCapitalNumbersSpecialChars(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication50 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array53 = new java.lang.String[] { "" };
    java.lang.String str54 = calApplication51.printCalForYearMondayFirst(str_array53);
    java.util.List list55 = sortApplication50.sortCapitalNumbersSpecialChars(str_array53);
    java.util.List list56 = sortApplication44.numericalSortSimpleSpecialChars(str_array53);
    java.lang.String str57 = bcApplication1.subtract(str_array53);
    java.io.InputStream inputStream58 = null;
    java.io.OutputStream outputStream59 = null;
    // The following exception was thrown during execution in test generation
    try {
      tailApplication0.run(str_array53, inputStream58, outputStream59);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException");
    } catch (sg.edu.nus.comp.cs4218.exception.TailException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.TailException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str17.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str25.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str30.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str57);

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test141"); }


    sg.edu.nus.comp.cs4218.impl.app.CatApplication catApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CatApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array7 = new java.lang.String[] { "hi!" };
    java.lang.String str8 = commApplication5.commOnlySecond(str_array7);
    java.lang.String str9 = calApplication1.printCalWithMondayFirst(str_array7);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication10 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array13 = new java.lang.String[] { "" };
    java.lang.String str14 = calApplication11.printCalForYearMondayFirst(str_array13);
    java.util.List list15 = sortApplication10.sortCapitalNumbersSpecialChars(str_array13);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication16 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "" };
    java.lang.String str20 = calApplication17.printCalForYearMondayFirst(str_array19);
    java.util.List list21 = sortApplication16.sortCapitalNumbersSpecialChars(str_array19);
    java.util.List list22 = sortApplication10.numericalSortSimpleSpecialChars(str_array19);
    java.lang.String str23 = calApplication1.printCalForYear(str_array19);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "hi!" };
    java.lang.String str28 = commApplication25.commOnlySecond(str_array27);
    java.lang.String str29 = calApplication24.printCalForYear(str_array27);
    java.lang.String str30 = calApplication1.printCalForYearMondayFirst(str_array27);
    java.io.InputStream inputStream31 = null;
    java.io.OutputStream outputStream32 = null;
    // The following exception was thrown during execution in test generation
    try {
      catApplication0.run(str_array27, inputStream31, outputStream32);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CatException");
    } catch (sg.edu.nus.comp.cs4218.exception.CatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.CatException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CatException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str8.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str28.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test142"); }


    sg.edu.nus.comp.cs4218.impl.app.CatApplication catApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CatApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = calApplication8.printCalForYearMondayFirst(str_array10);
    java.util.List list12 = sortApplication7.sortCapitalNumbersSpecialChars(str_array10);
    java.util.List list13 = sortApplication1.numericalSortSimpleSpecialChars(str_array10);
    java.lang.String[] str_array15 = new java.lang.String[] { "" };
    java.util.List list16 = sortApplication1.sortSimpleCapitalSpecialChars(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication17 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication18 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = calApplication19.printCalForYearMondayFirst(str_array21);
    java.util.List list23 = sortApplication18.sortCapitalNumbersSpecialChars(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication24 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = calApplication25.printCalForYearMondayFirst(str_array27);
    java.util.List list29 = sortApplication24.sortCapitalNumbersSpecialChars(str_array27);
    java.util.List list30 = sortApplication18.numericalSortSimpleSpecialChars(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "hi!" };
    java.lang.String str36 = commApplication33.commOnlySecond(str_array35);
    java.lang.String str37 = calApplication32.printCalForYear(str_array35);
    java.lang.String str38 = commApplication31.commOnlySecond(str_array35);
    java.util.List list39 = sortApplication18.sortAll(str_array35);
    java.util.List list40 = sortApplication17.sortSimpleCapitalSpecialChars(str_array35);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication41 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array44 = new java.lang.String[] { "hi!" };
    java.lang.String str45 = commApplication42.commOnlySecond(str_array44);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array50 = new java.lang.String[] { "hi!" };
    java.lang.String str51 = commApplication48.commOnlySecond(str_array50);
    java.lang.String str52 = calApplication47.printCalForYear(str_array50);
    java.lang.String str53 = commApplication46.commOnlySecond(str_array50);
    java.lang.String str54 = commApplication42.commOnlySecond(str_array50);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication55 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication56 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array59 = new java.lang.String[] { "" };
    java.lang.String str60 = calApplication57.printCalForYearMondayFirst(str_array59);
    java.util.List list61 = sortApplication56.sortCapitalNumbersSpecialChars(str_array59);
    java.util.List list62 = sortApplication55.sortSimpleSpecialChars(str_array59);
    java.lang.String str63 = commApplication42.commAllMatches(str_array59);
    java.lang.String str64 = bcApplication41.lessThan(str_array59);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication65 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array67 = new java.lang.String[] { "" };
    java.lang.String str68 = calApplication65.printCalForYearMondayFirst(str_array67);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication69 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array71 = new java.lang.String[] { "" };
    java.lang.String str72 = calApplication69.printCalForYearMondayFirst(str_array71);
    java.lang.String str73 = calApplication65.printCal(str_array71);
    java.lang.String str74 = bcApplication41.and(str_array71);
    java.util.List list75 = sortApplication17.numericalSortSimpleCapital(str_array71);
    java.util.List list76 = sortApplication1.numericalSortCapitalNumbersSpecialChars(str_array71);
    java.io.InputStream inputStream77 = null;
    java.io.OutputStream outputStream78 = null;
    // The following exception was thrown during execution in test generation
    try {
      catApplication0.run(str_array71, inputStream77, outputStream78);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CatException");
    } catch (sg.edu.nus.comp.cs4218.exception.CatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.CatException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CatException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str36.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str38.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str45.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str51.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str53.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str54.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str63.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test143"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = calApplication8.printCalForYearMondayFirst(str_array10);
    java.util.List list12 = sortApplication7.sortCapitalNumbersSpecialChars(str_array10);
    java.util.List list13 = sortApplication1.numericalSortSimpleSpecialChars(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "hi!" };
    java.lang.String str19 = commApplication16.commOnlySecond(str_array18);
    java.lang.String str20 = calApplication15.printCalForYear(str_array18);
    java.lang.String str21 = commApplication14.commOnlySecond(str_array18);
    java.util.List list22 = sortApplication1.sortAll(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication24 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = calApplication25.printCalForYearMondayFirst(str_array27);
    java.util.List list29 = sortApplication24.sortCapitalNumbersSpecialChars(str_array27);
    java.util.List list30 = sortApplication23.sortSimpleSpecialChars(str_array27);
    java.util.List list31 = sortApplication1.numericalSortCapitalSpecialChars(str_array27);
    java.lang.String str32 = bcApplication0.subtract(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "" };
    java.lang.String str37 = calApplication34.printCalForYearMondayFirst(str_array36);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "hi!" };
    java.lang.String str41 = commApplication38.commOnlySecond(str_array40);
    java.lang.String str42 = calApplication34.printCalWithMondayFirst(str_array40);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication43 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = calApplication44.printCalForYearMondayFirst(str_array46);
    java.util.List list48 = sortApplication43.sortCapitalNumbersSpecialChars(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication49 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array52 = new java.lang.String[] { "" };
    java.lang.String str53 = calApplication50.printCalForYearMondayFirst(str_array52);
    java.util.List list54 = sortApplication49.sortCapitalNumbersSpecialChars(str_array52);
    java.util.List list55 = sortApplication43.numericalSortSimpleSpecialChars(str_array52);
    java.lang.String str56 = calApplication34.printCalForYear(str_array52);
    java.io.InputStream inputStream57 = null;
    java.io.OutputStream outputStream58 = null;
    calApplication33.run(str_array52, inputStream57, outputStream58);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array62 = new java.lang.String[] { "hi!" };
    java.lang.String str63 = commApplication60.commOnlySecond(str_array62);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication65 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication66 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array68 = new java.lang.String[] { "hi!" };
    java.lang.String str69 = commApplication66.commOnlySecond(str_array68);
    java.lang.String str70 = calApplication65.printCalForYear(str_array68);
    java.lang.String str71 = commApplication64.commOnlySecond(str_array68);
    java.lang.String str72 = commApplication60.commOnlySecond(str_array68);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication73 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication74 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array76 = new java.lang.String[] { "" };
    java.lang.String str77 = calApplication74.printCalForYearMondayFirst(str_array76);
    java.util.List list78 = sortApplication73.sortCapitalNumbersSpecialChars(str_array76);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication79 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication80 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array82 = new java.lang.String[] { "hi!" };
    java.lang.String str83 = commApplication80.commOnlySecond(str_array82);
    java.lang.String str84 = calApplication79.printCalForYear(str_array82);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication85 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array87 = new java.lang.String[] { "hi!" };
    java.lang.String str88 = commApplication85.commOnlySecond(str_array87);
    java.lang.String str89 = calApplication79.printCalForYear(str_array87);
    java.util.List list90 = sortApplication73.sortNumbersSpecialChars(str_array87);
    java.lang.String str91 = commApplication60.commBothMathches(str_array87);
    java.lang.String str92 = calApplication33.printCalForMonthYearMondayFirst(str_array87);
    java.lang.String str93 = bcApplication0.add(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str41.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str63.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str69.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str71.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str72.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str83.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str88.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str91 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str91.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str93);

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test144"); }


    sg.edu.nus.comp.cs4218.impl.app.TailApplication tailApplication0 = new sg.edu.nus.comp.cs4218.impl.app.TailApplication();
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication1 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication2 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = calApplication3.printCalForYearMondayFirst(str_array5);
    java.util.List list7 = sortApplication2.sortCapitalNumbersSpecialChars(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication8 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array11 = new java.lang.String[] { "" };
    java.lang.String str12 = calApplication9.printCalForYearMondayFirst(str_array11);
    java.util.List list13 = sortApplication8.sortCapitalNumbersSpecialChars(str_array11);
    java.util.List list14 = sortApplication2.numericalSortSimpleSpecialChars(str_array11);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "hi!" };
    java.lang.String str20 = commApplication17.commOnlySecond(str_array19);
    java.lang.String str21 = calApplication16.printCalForYear(str_array19);
    java.lang.String str22 = commApplication15.commOnlySecond(str_array19);
    java.util.List list23 = sortApplication2.sortAll(str_array19);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication24 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication25 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "" };
    java.lang.String str29 = calApplication26.printCalForYearMondayFirst(str_array28);
    java.util.List list30 = sortApplication25.sortCapitalNumbersSpecialChars(str_array28);
    java.util.List list31 = sortApplication24.sortSimpleSpecialChars(str_array28);
    java.util.List list32 = sortApplication2.numericalSortCapitalSpecialChars(str_array28);
    java.lang.String str33 = bcApplication1.subtract(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication34 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array37 = new java.lang.String[] { "" };
    java.lang.String str38 = calApplication35.printCalForYearMondayFirst(str_array37);
    java.util.List list39 = sortApplication34.sortCapitalNumbersSpecialChars(str_array37);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication40 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "" };
    java.lang.String str44 = calApplication41.printCalForYearMondayFirst(str_array43);
    java.util.List list45 = sortApplication40.sortCapitalNumbersSpecialChars(str_array43);
    java.util.List list46 = sortApplication34.numericalSortSimpleSpecialChars(str_array43);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array51 = new java.lang.String[] { "hi!" };
    java.lang.String str52 = commApplication49.commOnlySecond(str_array51);
    java.lang.String str53 = calApplication48.printCalForYear(str_array51);
    java.lang.String str54 = commApplication47.commOnlySecond(str_array51);
    java.util.List list55 = sortApplication34.sortAll(str_array51);
    java.lang.String str56 = bcApplication1.add(str_array51);
    java.io.InputStream inputStream57 = null;
    java.io.OutputStream outputStream58 = null;
    // The following exception was thrown during execution in test generation
    try {
      tailApplication0.run(str_array51, inputStream57, outputStream58);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException");
    } catch (sg.edu.nus.comp.cs4218.exception.TailException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.TailException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str22.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str52.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str54.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test145"); }


    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication0 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication1 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    java.lang.String str13 = commApplication6.commOnlySecond(str_array10);
    java.lang.String str14 = commApplication2.commOnlySecond(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication15 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication16 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "" };
    java.lang.String str20 = calApplication17.printCalForYearMondayFirst(str_array19);
    java.util.List list21 = sortApplication16.sortCapitalNumbersSpecialChars(str_array19);
    java.util.List list22 = sortApplication15.sortSimpleSpecialChars(str_array19);
    java.lang.String str23 = commApplication2.commAllMatches(str_array19);
    java.lang.String str24 = bcApplication1.lessThan(str_array19);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication25 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication26 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array29 = new java.lang.String[] { "" };
    java.lang.String str30 = calApplication27.printCalForYearMondayFirst(str_array29);
    java.util.List list31 = sortApplication26.sortCapitalNumbersSpecialChars(str_array29);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication32 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "" };
    java.lang.String str36 = calApplication33.printCalForYearMondayFirst(str_array35);
    java.util.List list37 = sortApplication32.sortCapitalNumbersSpecialChars(str_array35);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array41 = new java.lang.String[] { "hi!" };
    java.lang.String str42 = commApplication39.commOnlySecond(str_array41);
    java.lang.String str43 = calApplication38.printCalForYear(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "hi!" };
    java.lang.String str47 = commApplication44.commOnlySecond(str_array46);
    java.lang.String str48 = calApplication38.printCalForYear(str_array46);
    java.util.List list49 = sortApplication32.sortNumbersSpecialChars(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array53 = new java.lang.String[] { "" };
    java.lang.String str54 = calApplication51.printCalForYearMondayFirst(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "" };
    java.lang.String str58 = calApplication55.printCalForYearMondayFirst(str_array57);
    java.lang.String str59 = calApplication51.printCal(str_array57);
    java.lang.String str60 = calApplication50.printCal(str_array57);
    java.util.List list61 = sortApplication32.numericalSortCapitalNumbersSpecialChars(str_array57);
    java.util.List list62 = sortApplication26.numericalSortCapitalNumbersSpecialChars(str_array57);
    java.lang.String[] str_array64 = new java.lang.String[] { "comm: terminated with error message comm: file is not readable" };
    java.util.List list65 = sortApplication26.numericalSortAll(str_array64);
    java.lang.String str66 = bcApplication25.bracket(str_array64);
    java.lang.String str67 = bcApplication1.greaterThan(str_array64);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication68 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication69 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array71 = new java.lang.String[] { "" };
    java.lang.String str72 = calApplication69.printCalForYearMondayFirst(str_array71);
    java.util.List list73 = sortApplication68.sortCapitalNumbersSpecialChars(str_array71);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication74 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication75 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array77 = new java.lang.String[] { "hi!" };
    java.lang.String str78 = commApplication75.commOnlySecond(str_array77);
    java.lang.String str79 = calApplication74.printCalForYear(str_array77);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication80 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array82 = new java.lang.String[] { "hi!" };
    java.lang.String str83 = commApplication80.commOnlySecond(str_array82);
    java.lang.String str84 = calApplication74.printCalForYear(str_array82);
    java.util.List list85 = sortApplication68.sortNumbersSpecialChars(str_array82);
    java.lang.String str86 = bcApplication1.greaterThanOrEqual(str_array82);
    java.io.InputStream inputStream87 = null;
    java.io.OutputStream outputStream88 = null;
    // The following exception was thrown during execution in test generation
    try {
      echoApplication0.run(str_array82, inputStream87, outputStream88);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.EchoException");
    } catch (sg.edu.nus.comp.cs4218.exception.EchoException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.EchoException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.EchoException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str14.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str23.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str42.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str47.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str78.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str83.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str86);

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test146"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array14 = new java.lang.String[] { "hi!" };
    java.lang.String str15 = commApplication12.commOnlySecond(str_array14);
    java.lang.String str16 = calApplication6.printCalForYear(str_array14);
    java.util.List list17 = sortApplication0.sortNumbersSpecialChars(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!" };
    java.lang.String str21 = commApplication18.commOnlySecond(str_array20);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "hi!" };
    java.lang.String str27 = commApplication24.commOnlySecond(str_array26);
    java.lang.String str28 = calApplication23.printCalForYear(str_array26);
    java.lang.String str29 = commApplication22.commOnlySecond(str_array26);
    java.lang.String str30 = commApplication18.commOnlySecond(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication31 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "" };
    java.lang.String str35 = calApplication32.printCalForYearMondayFirst(str_array34);
    java.util.List list36 = sortApplication31.sortCapitalNumbersSpecialChars(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "hi!" };
    java.lang.String str41 = commApplication38.commOnlySecond(str_array40);
    java.lang.String str42 = calApplication37.printCalForYear(str_array40);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array45 = new java.lang.String[] { "hi!" };
    java.lang.String str46 = commApplication43.commOnlySecond(str_array45);
    java.lang.String str47 = calApplication37.printCalForYear(str_array45);
    java.util.List list48 = sortApplication31.sortNumbersSpecialChars(str_array45);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array52 = new java.lang.String[] { "hi!" };
    java.lang.String str53 = commApplication50.commOnlySecond(str_array52);
    java.lang.String str54 = calApplication49.printCalForYear(str_array52);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "hi!" };
    java.lang.String str58 = commApplication55.commOnlySecond(str_array57);
    java.lang.String str59 = calApplication49.printCalForYear(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication60 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication61 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array64 = new java.lang.String[] { "" };
    java.lang.String str65 = calApplication62.printCalForYearMondayFirst(str_array64);
    java.util.List list66 = sortApplication61.sortCapitalNumbersSpecialChars(str_array64);
    java.util.List list67 = sortApplication60.sortSimpleSpecialChars(str_array64);
    java.lang.String str68 = calApplication49.printCal(str_array64);
    java.util.List list69 = sortApplication31.sortStringsSimple(str_array64);
    java.lang.String str70 = commApplication18.commOnlyFirst(str_array64);
    java.util.List list71 = sortApplication0.sortSimpleCapitalNumber(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str15.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str27.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str30.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str41.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str46.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str53.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str58.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str70.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test147"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = calApplication8.printCalForYearMondayFirst(str_array10);
    java.util.List list12 = sortApplication7.sortCapitalNumbersSpecialChars(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "hi!" };
    java.lang.String str17 = commApplication14.commOnlySecond(str_array16);
    java.lang.String str18 = calApplication13.printCalForYear(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "hi!" };
    java.lang.String str22 = commApplication19.commOnlySecond(str_array21);
    java.lang.String str23 = calApplication13.printCalForYear(str_array21);
    java.util.List list24 = sortApplication7.sortNumbersSpecialChars(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "" };
    java.lang.String str29 = calApplication26.printCalForYearMondayFirst(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "" };
    java.lang.String str33 = calApplication30.printCalForYearMondayFirst(str_array32);
    java.lang.String str34 = calApplication26.printCal(str_array32);
    java.lang.String str35 = calApplication25.printCal(str_array32);
    java.util.List list36 = sortApplication7.numericalSortCapitalNumbersSpecialChars(str_array32);
    java.util.List list37 = sortApplication1.numericalSortCapitalNumbersSpecialChars(str_array32);
    java.lang.String[] str_array39 = new java.lang.String[] { "comm: terminated with error message comm: file is not readable" };
    java.util.List list40 = sortApplication1.numericalSortAll(str_array39);
    java.lang.String str41 = bcApplication0.bracket(str_array39);
    java.lang.String[] str_array42 = null;
    java.lang.String str43 = bcApplication0.not(str_array42);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "hi!" };
    java.lang.String str47 = commApplication44.commOnlySecond(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array52 = new java.lang.String[] { "hi!" };
    java.lang.String str53 = commApplication50.commOnlySecond(str_array52);
    java.lang.String str54 = calApplication49.printCalForYear(str_array52);
    java.lang.String str55 = commApplication48.commOnlySecond(str_array52);
    java.lang.String str56 = commApplication44.commOnlySecond(str_array52);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication57 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array60 = new java.lang.String[] { "" };
    java.lang.String str61 = calApplication58.printCalForYearMondayFirst(str_array60);
    java.util.List list62 = sortApplication57.sortCapitalNumbersSpecialChars(str_array60);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication63 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array66 = new java.lang.String[] { "hi!" };
    java.lang.String str67 = commApplication64.commOnlySecond(str_array66);
    java.lang.String str68 = calApplication63.printCalForYear(str_array66);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication69 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array71 = new java.lang.String[] { "hi!" };
    java.lang.String str72 = commApplication69.commOnlySecond(str_array71);
    java.lang.String str73 = calApplication63.printCalForYear(str_array71);
    java.util.List list74 = sortApplication57.sortNumbersSpecialChars(str_array71);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication75 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication76 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array78 = new java.lang.String[] { "hi!" };
    java.lang.String str79 = commApplication76.commOnlySecond(str_array78);
    java.lang.String str80 = calApplication75.printCalForYear(str_array78);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication81 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array83 = new java.lang.String[] { "hi!" };
    java.lang.String str84 = commApplication81.commOnlySecond(str_array83);
    java.lang.String str85 = calApplication75.printCalForYear(str_array83);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication86 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication87 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication88 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array90 = new java.lang.String[] { "" };
    java.lang.String str91 = calApplication88.printCalForYearMondayFirst(str_array90);
    java.util.List list92 = sortApplication87.sortCapitalNumbersSpecialChars(str_array90);
    java.util.List list93 = sortApplication86.sortSimpleSpecialChars(str_array90);
    java.lang.String str94 = calApplication75.printCal(str_array90);
    java.util.List list95 = sortApplication57.sortStringsSimple(str_array90);
    java.lang.String str96 = commApplication44.commOnlyFirst(str_array90);
    java.lang.String str97 = bcApplication0.pow(str_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str17.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str22.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str47.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str53.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str55.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str56.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str67.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str72.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str79.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str84.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str96 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str96.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str97);

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test148"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array7 = new java.lang.String[] { "hi!" };
    java.lang.String str8 = commApplication5.commOnlySecond(str_array7);
    java.lang.String str9 = calApplication1.printCalWithMondayFirst(str_array7);
    java.util.List list10 = sortApplication0.sortCapitalNumbers(str_array7);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication11 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication12 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "" };
    java.lang.String str16 = calApplication13.printCalForYearMondayFirst(str_array15);
    java.util.List list17 = sortApplication12.sortCapitalNumbersSpecialChars(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication18 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = calApplication19.printCalForYearMondayFirst(str_array21);
    java.util.List list23 = sortApplication18.sortCapitalNumbersSpecialChars(str_array21);
    java.util.List list24 = sortApplication12.numericalSortSimpleSpecialChars(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array29 = new java.lang.String[] { "hi!" };
    java.lang.String str30 = commApplication27.commOnlySecond(str_array29);
    java.lang.String str31 = calApplication26.printCalForYear(str_array29);
    java.lang.String str32 = commApplication25.commOnlySecond(str_array29);
    java.util.List list33 = sortApplication12.sortAll(str_array29);
    java.util.List list34 = sortApplication11.sortSimpleCapitalSpecialChars(str_array29);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array38 = new java.lang.String[] { "hi!" };
    java.lang.String str39 = commApplication36.commOnlySecond(str_array38);
    java.lang.String str40 = calApplication35.printCalForYear(str_array38);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "hi!" };
    java.lang.String str44 = commApplication41.commOnlySecond(str_array43);
    java.lang.String str45 = calApplication35.printCalForYear(str_array43);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication46 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array49 = new java.lang.String[] { "" };
    java.lang.String str50 = calApplication47.printCalForYearMondayFirst(str_array49);
    java.util.List list51 = sortApplication46.sortCapitalNumbersSpecialChars(str_array49);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array55 = new java.lang.String[] { "hi!" };
    java.lang.String str56 = commApplication53.commOnlySecond(str_array55);
    java.lang.String str57 = calApplication52.printCalForYear(str_array55);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array60 = new java.lang.String[] { "hi!" };
    java.lang.String str61 = commApplication58.commOnlySecond(str_array60);
    java.lang.String str62 = calApplication52.printCalForYear(str_array60);
    java.util.List list63 = sortApplication46.sortNumbersSpecialChars(str_array60);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication65 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array67 = new java.lang.String[] { "" };
    java.lang.String str68 = calApplication65.printCalForYearMondayFirst(str_array67);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication69 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array71 = new java.lang.String[] { "" };
    java.lang.String str72 = calApplication69.printCalForYearMondayFirst(str_array71);
    java.lang.String str73 = calApplication65.printCal(str_array71);
    java.lang.String str74 = calApplication64.printCal(str_array71);
    java.util.List list75 = sortApplication46.numericalSortCapitalNumbersSpecialChars(str_array71);
    java.io.InputStream inputStream76 = null;
    java.io.OutputStream outputStream77 = null;
    calApplication35.run(str_array71, inputStream76, outputStream77);
    java.util.List list79 = sortApplication11.numericalSortNumbersSpecialChars(str_array71);
    java.util.List list80 = sortApplication0.numericalSortSimpleCapital(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str8.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str30.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str32.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str44.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str56.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str61.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test149"); }


    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication0 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication7.printCalForYear(str_array15);
    java.util.List list18 = sortApplication1.sortNumbersSpecialChars(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication19 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = calApplication20.printCalForYearMondayFirst(str_array22);
    java.util.List list24 = sortApplication19.sortCapitalNumbersSpecialChars(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!" };
    java.lang.String str29 = commApplication26.commOnlySecond(str_array28);
    java.lang.String str30 = calApplication25.printCalForYear(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "hi!" };
    java.lang.String str34 = commApplication31.commOnlySecond(str_array33);
    java.lang.String str35 = calApplication25.printCalForYear(str_array33);
    java.util.List list36 = sortApplication19.sortNumbersSpecialChars(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication37 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "" };
    java.lang.String str41 = calApplication38.printCalForYearMondayFirst(str_array40);
    java.util.List list42 = sortApplication37.sortCapitalNumbersSpecialChars(str_array40);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication43 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = calApplication44.printCalForYearMondayFirst(str_array46);
    java.util.List list48 = sortApplication43.sortCapitalNumbersSpecialChars(str_array46);
    java.util.List list49 = sortApplication37.numericalSortSimpleSpecialChars(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array54 = new java.lang.String[] { "hi!" };
    java.lang.String str55 = commApplication52.commOnlySecond(str_array54);
    java.lang.String str56 = calApplication51.printCalForYear(str_array54);
    java.lang.String str57 = commApplication50.commOnlySecond(str_array54);
    java.util.List list58 = sortApplication37.sortAll(str_array54);
    java.util.List list59 = sortApplication19.numericalSortNumbersSpecialChars(str_array54);
    java.util.List list60 = sortApplication1.numericalSortNumbersSpecialChars(str_array54);
    java.io.InputStream inputStream61 = null;
    java.io.OutputStream outputStream62 = null;
    // The following exception was thrown during execution in test generation
    try {
      echoApplication0.run(str_array54, inputStream61, outputStream62);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.EchoException");
    } catch (sg.edu.nus.comp.cs4218.exception.EchoException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.EchoException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.EchoException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str55.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str57.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test150"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    java.util.List list12 = sortApplication0.numericalSortSimpleSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication13 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication14 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "" };
    java.lang.String str18 = calApplication15.printCalForYearMondayFirst(str_array17);
    java.util.List list19 = sortApplication14.sortCapitalNumbersSpecialChars(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication20 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array23 = new java.lang.String[] { "" };
    java.lang.String str24 = calApplication21.printCalForYearMondayFirst(str_array23);
    java.util.List list25 = sortApplication20.sortCapitalNumbersSpecialChars(str_array23);
    java.util.List list26 = sortApplication14.numericalSortSimpleSpecialChars(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array31 = new java.lang.String[] { "hi!" };
    java.lang.String str32 = commApplication29.commOnlySecond(str_array31);
    java.lang.String str33 = calApplication28.printCalForYear(str_array31);
    java.lang.String str34 = commApplication27.commOnlySecond(str_array31);
    java.util.List list35 = sortApplication14.sortAll(str_array31);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication36 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication37 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "" };
    java.lang.String str41 = calApplication38.printCalForYearMondayFirst(str_array40);
    java.util.List list42 = sortApplication37.sortCapitalNumbersSpecialChars(str_array40);
    java.util.List list43 = sortApplication36.sortSimpleSpecialChars(str_array40);
    java.util.List list44 = sortApplication14.numericalSortCapitalSpecialChars(str_array40);
    java.lang.String str45 = bcApplication13.subtract(str_array40);
    java.util.List list46 = sortApplication0.numericalSortSimpleCapitalSpecialChars(str_array40);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication47 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array50 = new java.lang.String[] { "hi!" };
    java.lang.String str51 = commApplication48.commOnlySecond(str_array50);
    java.util.List list52 = sortApplication47.sortSimpleCapitalSpecialChars(str_array50);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication53 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array56 = new java.lang.String[] { "hi!" };
    java.lang.String str57 = commApplication54.commOnlySecond(str_array56);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication59 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array62 = new java.lang.String[] { "hi!" };
    java.lang.String str63 = commApplication60.commOnlySecond(str_array62);
    java.lang.String str64 = calApplication59.printCalForYear(str_array62);
    java.lang.String str65 = commApplication58.commOnlySecond(str_array62);
    java.lang.String str66 = commApplication54.commOnlySecond(str_array62);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication67 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication68 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication69 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array71 = new java.lang.String[] { "" };
    java.lang.String str72 = calApplication69.printCalForYearMondayFirst(str_array71);
    java.util.List list73 = sortApplication68.sortCapitalNumbersSpecialChars(str_array71);
    java.util.List list74 = sortApplication67.sortSimpleSpecialChars(str_array71);
    java.lang.String str75 = commApplication54.commAllMatches(str_array71);
    java.lang.String str76 = bcApplication53.lessThan(str_array71);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication77 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication78 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array80 = new java.lang.String[] { "" };
    java.lang.String str81 = calApplication78.printCalForYearMondayFirst(str_array80);
    java.util.List list82 = sortApplication77.sortCapitalNumbersSpecialChars(str_array80);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication83 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication84 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array86 = new java.lang.String[] { "hi!" };
    java.lang.String str87 = commApplication84.commOnlySecond(str_array86);
    java.lang.String str88 = calApplication83.printCalForYear(str_array86);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication89 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array91 = new java.lang.String[] { "hi!" };
    java.lang.String str92 = commApplication89.commOnlySecond(str_array91);
    java.lang.String str93 = calApplication83.printCalForYear(str_array91);
    java.util.List list94 = sortApplication77.sortNumbersSpecialChars(str_array91);
    java.lang.String str95 = bcApplication53.negate(str_array91);
    java.util.List list96 = sortApplication47.sortCapitalNumbers(str_array91);
    java.util.List list97 = sortApplication0.sortNumbersSpecialChars(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str32.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str51.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str57.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str63.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str65.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str66.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str75.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str87.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str92 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str92.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list97);

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test151"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = calApplication8.printCalForYearMondayFirst(str_array10);
    java.util.List list12 = sortApplication7.sortCapitalNumbersSpecialChars(str_array10);
    java.util.List list13 = sortApplication1.numericalSortSimpleSpecialChars(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "hi!" };
    java.lang.String str19 = commApplication16.commOnlySecond(str_array18);
    java.lang.String str20 = calApplication15.printCalForYear(str_array18);
    java.lang.String str21 = commApplication14.commOnlySecond(str_array18);
    java.util.List list22 = sortApplication1.sortAll(str_array18);
    java.util.List list23 = sortApplication0.sortSimpleCapitalSpecialChars(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication24 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = calApplication25.printCalForYearMondayFirst(str_array27);
    java.util.List list29 = sortApplication24.sortCapitalNumbersSpecialChars(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "hi!" };
    java.lang.String str34 = commApplication31.commOnlySecond(str_array33);
    java.lang.String str35 = calApplication30.printCalForYear(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array38 = new java.lang.String[] { "hi!" };
    java.lang.String str39 = commApplication36.commOnlySecond(str_array38);
    java.lang.String str40 = calApplication30.printCalForYear(str_array38);
    java.util.List list41 = sortApplication24.sortNumbersSpecialChars(str_array38);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication42 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array45 = new java.lang.String[] { "" };
    java.lang.String str46 = calApplication43.printCalForYearMondayFirst(str_array45);
    java.util.List list47 = sortApplication42.sortCapitalNumbersSpecialChars(str_array45);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication48 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array51 = new java.lang.String[] { "" };
    java.lang.String str52 = calApplication49.printCalForYearMondayFirst(str_array51);
    java.util.List list53 = sortApplication48.sortCapitalNumbersSpecialChars(str_array51);
    java.util.List list54 = sortApplication42.numericalSortSimpleSpecialChars(str_array51);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array59 = new java.lang.String[] { "hi!" };
    java.lang.String str60 = commApplication57.commOnlySecond(str_array59);
    java.lang.String str61 = calApplication56.printCalForYear(str_array59);
    java.lang.String str62 = commApplication55.commOnlySecond(str_array59);
    java.util.List list63 = sortApplication42.sortAll(str_array59);
    java.util.List list64 = sortApplication24.numericalSortNumbersSpecialChars(str_array59);
    java.util.List list65 = sortApplication0.numericalSortSimpleNumbersSpecialChars(str_array59);
    java.lang.String[] str_array66 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list67 = sortApplication0.numericalSortSimpleSpecialChars(str_array66);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str60.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str62.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test152"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    java.util.List list12 = sortApplication0.numericalSortSimpleSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!" };
    java.lang.String str18 = commApplication15.commOnlySecond(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    java.lang.String str20 = commApplication13.commOnlySecond(str_array17);
    java.util.List list21 = sortApplication0.sortAll(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array25 = new java.lang.String[] { "" };
    java.lang.String str26 = calApplication23.printCalForYearMondayFirst(str_array25);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array29 = new java.lang.String[] { "" };
    java.lang.String str30 = calApplication27.printCalForYearMondayFirst(str_array29);
    java.lang.String str31 = calApplication23.printCal(str_array29);
    java.lang.String str32 = calApplication22.printCal(str_array29);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication33 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "" };
    java.lang.String str37 = calApplication34.printCalForYearMondayFirst(str_array36);
    java.util.List list38 = sortApplication33.sortCapitalNumbersSpecialChars(str_array36);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication39 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array42 = new java.lang.String[] { "" };
    java.lang.String str43 = calApplication40.printCalForYearMondayFirst(str_array42);
    java.util.List list44 = sortApplication39.sortCapitalNumbersSpecialChars(str_array42);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array48 = new java.lang.String[] { "hi!" };
    java.lang.String str49 = commApplication46.commOnlySecond(str_array48);
    java.lang.String str50 = calApplication45.printCalForYear(str_array48);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array53 = new java.lang.String[] { "hi!" };
    java.lang.String str54 = commApplication51.commOnlySecond(str_array53);
    java.lang.String str55 = calApplication45.printCalForYear(str_array53);
    java.util.List list56 = sortApplication39.sortNumbersSpecialChars(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array60 = new java.lang.String[] { "" };
    java.lang.String str61 = calApplication58.printCalForYearMondayFirst(str_array60);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array64 = new java.lang.String[] { "" };
    java.lang.String str65 = calApplication62.printCalForYearMondayFirst(str_array64);
    java.lang.String str66 = calApplication58.printCal(str_array64);
    java.lang.String str67 = calApplication57.printCal(str_array64);
    java.util.List list68 = sortApplication39.numericalSortCapitalNumbersSpecialChars(str_array64);
    java.util.List list69 = sortApplication33.numericalSortCapitalNumbersSpecialChars(str_array64);
    java.lang.String[] str_array71 = new java.lang.String[] { "comm: terminated with error message comm: file is not readable" };
    java.util.List list72 = sortApplication33.numericalSortAll(str_array71);
    java.io.InputStream inputStream73 = null;
    java.io.OutputStream outputStream74 = null;
    calApplication22.run(str_array71, inputStream73, outputStream74);
    java.util.List list76 = sortApplication0.sortSimpleCapitalSpecialChars(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str49.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str54.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test153"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    java.util.List list12 = sortApplication0.numericalSortSimpleSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!" };
    java.lang.String str18 = commApplication15.commOnlySecond(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    java.lang.String str20 = commApplication13.commOnlySecond(str_array17);
    java.util.List list21 = sortApplication0.sortAll(str_array17);
    java.lang.String[] str_array22 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list23 = sortApplication0.sortSpecialChars(str_array22);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test154"); }


    sg.edu.nus.comp.cs4218.impl.app.HeadApplication headApplication0 = new sg.edu.nus.comp.cs4218.impl.app.HeadApplication();
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication1 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication2 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = calApplication3.printCalForYearMondayFirst(str_array5);
    java.util.List list7 = sortApplication2.sortCapitalNumbersSpecialChars(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication8 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array11 = new java.lang.String[] { "" };
    java.lang.String str12 = calApplication9.printCalForYearMondayFirst(str_array11);
    java.util.List list13 = sortApplication8.sortCapitalNumbersSpecialChars(str_array11);
    java.util.List list14 = sortApplication2.numericalSortSimpleSpecialChars(str_array11);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "hi!" };
    java.lang.String str20 = commApplication17.commOnlySecond(str_array19);
    java.lang.String str21 = calApplication16.printCalForYear(str_array19);
    java.lang.String str22 = commApplication15.commOnlySecond(str_array19);
    java.util.List list23 = sortApplication2.sortAll(str_array19);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication24 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication25 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "" };
    java.lang.String str29 = calApplication26.printCalForYearMondayFirst(str_array28);
    java.util.List list30 = sortApplication25.sortCapitalNumbersSpecialChars(str_array28);
    java.util.List list31 = sortApplication24.sortSimpleSpecialChars(str_array28);
    java.util.List list32 = sortApplication2.numericalSortCapitalSpecialChars(str_array28);
    java.lang.String str33 = bcApplication1.subtract(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array37 = new java.lang.String[] { "hi!" };
    java.lang.String str38 = commApplication35.commOnlySecond(str_array37);
    java.lang.String str39 = calApplication34.printCalForYear(str_array37);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array42 = new java.lang.String[] { "hi!" };
    java.lang.String str43 = commApplication40.commOnlySecond(str_array42);
    java.lang.String str44 = calApplication34.printCalForYear(str_array42);
    java.lang.String str45 = bcApplication1.and(str_array42);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array48 = new java.lang.String[] { "hi!" };
    java.lang.String str49 = commApplication46.commOnlySecond(str_array48);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array54 = new java.lang.String[] { "hi!" };
    java.lang.String str55 = commApplication52.commOnlySecond(str_array54);
    java.lang.String str56 = calApplication51.printCalForYear(str_array54);
    java.lang.String str57 = commApplication50.commOnlySecond(str_array54);
    java.lang.String str58 = commApplication46.commOnlySecond(str_array54);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication59 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication60 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array63 = new java.lang.String[] { "" };
    java.lang.String str64 = calApplication61.printCalForYearMondayFirst(str_array63);
    java.util.List list65 = sortApplication60.sortCapitalNumbersSpecialChars(str_array63);
    java.util.List list66 = sortApplication59.sortSimpleSpecialChars(str_array63);
    java.lang.String str67 = commApplication46.commAllMatches(str_array63);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication68 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication69 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication70 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array72 = new java.lang.String[] { "" };
    java.lang.String str73 = calApplication70.printCalForYearMondayFirst(str_array72);
    java.util.List list74 = sortApplication69.sortCapitalNumbersSpecialChars(str_array72);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication75 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication76 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array78 = new java.lang.String[] { "hi!" };
    java.lang.String str79 = commApplication76.commOnlySecond(str_array78);
    java.lang.String str80 = calApplication75.printCalForYear(str_array78);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication81 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array83 = new java.lang.String[] { "hi!" };
    java.lang.String str84 = commApplication81.commOnlySecond(str_array83);
    java.lang.String str85 = calApplication75.printCalForYear(str_array83);
    java.util.List list86 = sortApplication69.sortNumbersSpecialChars(str_array83);
    java.lang.String str87 = bcApplication68.notEqual(str_array83);
    java.lang.String str88 = commApplication46.commNoMatches(str_array83);
    java.lang.String str89 = bcApplication1.lessThanOrEqual(str_array83);
    java.io.InputStream inputStream90 = null;
    java.io.OutputStream outputStream91 = null;
    // The following exception was thrown during execution in test generation
    try {
      headApplication0.run(str_array83, inputStream90, outputStream91);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.HeadException");
    } catch (sg.edu.nus.comp.cs4218.exception.HeadException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.HeadException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.HeadException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str22.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str38.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str43.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str49.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str55.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str57.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str58.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str67.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str79.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str84.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str88.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str89);

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test155"); }


    sg.edu.nus.comp.cs4218.impl.app.DateApplication dateApplication0 = new sg.edu.nus.comp.cs4218.impl.app.DateApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    java.util.List list6 = sortApplication1.sortSimpleCapitalSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication7 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "hi!" };
    java.lang.String str17 = commApplication14.commOnlySecond(str_array16);
    java.lang.String str18 = calApplication13.printCalForYear(str_array16);
    java.lang.String str19 = commApplication12.commOnlySecond(str_array16);
    java.lang.String str20 = commApplication8.commOnlySecond(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication21 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication22 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array25 = new java.lang.String[] { "" };
    java.lang.String str26 = calApplication23.printCalForYearMondayFirst(str_array25);
    java.util.List list27 = sortApplication22.sortCapitalNumbersSpecialChars(str_array25);
    java.util.List list28 = sortApplication21.sortSimpleSpecialChars(str_array25);
    java.lang.String str29 = commApplication8.commAllMatches(str_array25);
    java.lang.String str30 = bcApplication7.lessThan(str_array25);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "hi!" };
    java.lang.String str35 = commApplication32.commOnlySecond(str_array34);
    java.lang.String str36 = calApplication31.printCalForYear(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "hi!" };
    java.lang.String str40 = commApplication37.commOnlySecond(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array45 = new java.lang.String[] { "hi!" };
    java.lang.String str46 = commApplication43.commOnlySecond(str_array45);
    java.lang.String str47 = calApplication42.printCalForYear(str_array45);
    java.lang.String str48 = commApplication41.commOnlySecond(str_array45);
    java.lang.String str49 = commApplication37.commOnlySecond(str_array45);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication50 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array53 = new java.lang.String[] { "" };
    java.lang.String str54 = calApplication51.printCalForYearMondayFirst(str_array53);
    java.util.List list55 = sortApplication50.sortCapitalNumbersSpecialChars(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array59 = new java.lang.String[] { "hi!" };
    java.lang.String str60 = commApplication57.commOnlySecond(str_array59);
    java.lang.String str61 = calApplication56.printCalForYear(str_array59);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array64 = new java.lang.String[] { "hi!" };
    java.lang.String str65 = commApplication62.commOnlySecond(str_array64);
    java.lang.String str66 = calApplication56.printCalForYear(str_array64);
    java.util.List list67 = sortApplication50.sortNumbersSpecialChars(str_array64);
    java.lang.String str68 = commApplication37.commBothMathches(str_array64);
    java.lang.String str69 = calApplication31.printCalForMonthYearMondayFirst(str_array64);
    java.lang.String str70 = bcApplication7.number(str_array64);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication71 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array73 = new java.lang.String[] { "hi!" };
    java.lang.String str74 = commApplication71.commOnlySecond(str_array73);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication75 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication76 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication77 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array79 = new java.lang.String[] { "hi!" };
    java.lang.String str80 = commApplication77.commOnlySecond(str_array79);
    java.lang.String str81 = calApplication76.printCalForYear(str_array79);
    java.lang.String str82 = commApplication75.commOnlySecond(str_array79);
    java.lang.String str83 = commApplication71.commOnlySecond(str_array79);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication84 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication85 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication86 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array88 = new java.lang.String[] { "" };
    java.lang.String str89 = calApplication86.printCalForYearMondayFirst(str_array88);
    java.util.List list90 = sortApplication85.sortCapitalNumbersSpecialChars(str_array88);
    java.util.List list91 = sortApplication84.sortSimpleSpecialChars(str_array88);
    java.lang.String str92 = commApplication71.commAllMatches(str_array88);
    java.lang.String str93 = bcApplication7.or(str_array88);
    java.util.List list94 = sortApplication1.numericalSortSimpleCapitalSpecialChars(str_array88);
    java.io.InputStream inputStream95 = null;
    java.io.OutputStream outputStream96 = null;
    // The following exception was thrown during execution in test generation
    try {
      dateApplication0.run(str_array88, inputStream95, outputStream96);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException");
    } catch (sg.edu.nus.comp.cs4218.exception.DateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.DateException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str17.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str29.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str35.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str40.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str46.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str48.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str49.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str60.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str65.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str68.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str74.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str80.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str82.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str83.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str92 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str92.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list94);

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test156"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array7 = new java.lang.String[] { "hi!" };
    java.lang.String str8 = commApplication5.commOnlySecond(str_array7);
    java.lang.String str9 = calApplication1.printCalWithMondayFirst(str_array7);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication10 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array13 = new java.lang.String[] { "" };
    java.lang.String str14 = calApplication11.printCalForYearMondayFirst(str_array13);
    java.util.List list15 = sortApplication10.sortCapitalNumbersSpecialChars(str_array13);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication16 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "" };
    java.lang.String str20 = calApplication17.printCalForYearMondayFirst(str_array19);
    java.util.List list21 = sortApplication16.sortCapitalNumbersSpecialChars(str_array19);
    java.util.List list22 = sortApplication10.numericalSortSimpleSpecialChars(str_array19);
    java.lang.String str23 = calApplication1.printCalForYear(str_array19);
    java.io.InputStream inputStream24 = null;
    java.io.OutputStream outputStream25 = null;
    calApplication0.run(str_array19, inputStream24, outputStream25);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array29 = new java.lang.String[] { "hi!" };
    java.lang.String str30 = commApplication27.commOnlySecond(str_array29);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "hi!" };
    java.lang.String str36 = commApplication33.commOnlySecond(str_array35);
    java.lang.String str37 = calApplication32.printCalForYear(str_array35);
    java.lang.String str38 = commApplication31.commOnlySecond(str_array35);
    java.lang.String str39 = commApplication27.commOnlySecond(str_array35);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication40 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "" };
    java.lang.String str44 = calApplication41.printCalForYearMondayFirst(str_array43);
    java.util.List list45 = sortApplication40.sortCapitalNumbersSpecialChars(str_array43);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array49 = new java.lang.String[] { "hi!" };
    java.lang.String str50 = commApplication47.commOnlySecond(str_array49);
    java.lang.String str51 = calApplication46.printCalForYear(str_array49);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array54 = new java.lang.String[] { "hi!" };
    java.lang.String str55 = commApplication52.commOnlySecond(str_array54);
    java.lang.String str56 = calApplication46.printCalForYear(str_array54);
    java.util.List list57 = sortApplication40.sortNumbersSpecialChars(str_array54);
    java.lang.String str58 = commApplication27.commBothMathches(str_array54);
    java.lang.String str59 = calApplication0.printCalForMonthYearMondayFirst(str_array54);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array64 = new java.lang.String[] { "hi!" };
    java.lang.String str65 = commApplication62.commOnlySecond(str_array64);
    java.lang.String str66 = calApplication61.printCalForYear(str_array64);
    java.lang.String str67 = commApplication60.commOnlySecond(str_array64);
    java.lang.String str68 = calApplication0.printCalForMonthYear(str_array64);
    java.lang.String[] str_array69 = null;
    java.lang.String str70 = calApplication0.printCalForMonthYear(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str8.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str30.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str36.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str38.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str50.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str55.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str58.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str65.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str67.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test157"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = calApplication8.printCalForYearMondayFirst(str_array10);
    java.util.List list12 = sortApplication7.sortCapitalNumbersSpecialChars(str_array10);
    java.util.List list13 = sortApplication1.numericalSortSimpleSpecialChars(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "hi!" };
    java.lang.String str19 = commApplication16.commOnlySecond(str_array18);
    java.lang.String str20 = calApplication15.printCalForYear(str_array18);
    java.lang.String str21 = commApplication14.commOnlySecond(str_array18);
    java.util.List list22 = sortApplication1.sortAll(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication24 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = calApplication25.printCalForYearMondayFirst(str_array27);
    java.util.List list29 = sortApplication24.sortCapitalNumbersSpecialChars(str_array27);
    java.util.List list30 = sortApplication23.sortSimpleSpecialChars(str_array27);
    java.util.List list31 = sortApplication1.numericalSortCapitalSpecialChars(str_array27);
    java.lang.String str32 = bcApplication0.subtract(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "hi!" };
    java.lang.String str37 = commApplication34.commOnlySecond(str_array36);
    java.lang.String str38 = calApplication33.printCalForYear(str_array36);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array41 = new java.lang.String[] { "hi!" };
    java.lang.String str42 = commApplication39.commOnlySecond(str_array41);
    java.lang.String str43 = calApplication33.printCalForYear(str_array41);
    java.lang.String str44 = bcApplication0.and(str_array41);
    java.lang.String[] str_array45 = null;
    java.lang.String str46 = bcApplication0.notEqual(str_array45);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication47 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array50 = new java.lang.String[] { "" };
    java.lang.String str51 = calApplication48.printCalForYearMondayFirst(str_array50);
    java.util.List list52 = sortApplication47.sortCapitalNumbersSpecialChars(str_array50);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication53 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array56 = new java.lang.String[] { "" };
    java.lang.String str57 = calApplication54.printCalForYearMondayFirst(str_array56);
    java.util.List list58 = sortApplication53.sortCapitalNumbersSpecialChars(str_array56);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication59 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array62 = new java.lang.String[] { "hi!" };
    java.lang.String str63 = commApplication60.commOnlySecond(str_array62);
    java.lang.String str64 = calApplication59.printCalForYear(str_array62);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication65 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array67 = new java.lang.String[] { "hi!" };
    java.lang.String str68 = commApplication65.commOnlySecond(str_array67);
    java.lang.String str69 = calApplication59.printCalForYear(str_array67);
    java.util.List list70 = sortApplication53.sortNumbersSpecialChars(str_array67);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication71 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication72 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array74 = new java.lang.String[] { "" };
    java.lang.String str75 = calApplication72.printCalForYearMondayFirst(str_array74);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication76 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array78 = new java.lang.String[] { "" };
    java.lang.String str79 = calApplication76.printCalForYearMondayFirst(str_array78);
    java.lang.String str80 = calApplication72.printCal(str_array78);
    java.lang.String str81 = calApplication71.printCal(str_array78);
    java.util.List list82 = sortApplication53.numericalSortCapitalNumbersSpecialChars(str_array78);
    java.util.List list83 = sortApplication47.numericalSortCapitalNumbersSpecialChars(str_array78);
    java.lang.String[] str_array85 = new java.lang.String[] { "comm: terminated with error message comm: file is not readable" };
    java.util.List list86 = sortApplication47.numericalSortAll(str_array85);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication87 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication88 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication89 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array91 = new java.lang.String[] { "hi!" };
    java.lang.String str92 = commApplication89.commOnlySecond(str_array91);
    java.lang.String str93 = calApplication88.printCalForYear(str_array91);
    java.lang.String str94 = commApplication87.commOnlySecond(str_array91);
    java.lang.String[] str_array96 = new java.lang.String[] { "hi!" };
    java.lang.String str97 = commApplication87.commAllMatches(str_array96);
    java.util.List list98 = sortApplication47.sortSimpleCapitalSpecialChars(str_array96);
    java.lang.String str99 = bcApplication0.and(str_array96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str37.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str42.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str63.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str68.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str92 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str92.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str94 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str94.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str97 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str97.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str99);

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test158"); }


    sg.edu.nus.comp.cs4218.impl.app.DateApplication dateApplication0 = new sg.edu.nus.comp.cs4218.impl.app.DateApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    java.lang.String str6 = calApplication1.printCalForYear(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication1.printCalForYear(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication12 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication13 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "" };
    java.lang.String str17 = calApplication14.printCalForYearMondayFirst(str_array16);
    java.util.List list18 = sortApplication13.sortCapitalNumbersSpecialChars(str_array16);
    java.util.List list19 = sortApplication12.sortSimpleSpecialChars(str_array16);
    java.lang.String str20 = calApplication1.printCal(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array23 = new java.lang.String[] { "" };
    java.lang.String str24 = calApplication21.printCalForYearMondayFirst(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = calApplication25.printCalForYearMondayFirst(str_array27);
    java.lang.String str29 = calApplication21.printCal(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "hi!" };
    java.lang.String str34 = commApplication31.commOnlySecond(str_array33);
    java.lang.String str35 = calApplication30.printCalForYear(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array38 = new java.lang.String[] { "hi!" };
    java.lang.String str39 = commApplication36.commOnlySecond(str_array38);
    java.lang.String str40 = calApplication30.printCalForYear(str_array38);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication41 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication42 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array45 = new java.lang.String[] { "" };
    java.lang.String str46 = calApplication43.printCalForYearMondayFirst(str_array45);
    java.util.List list47 = sortApplication42.sortCapitalNumbersSpecialChars(str_array45);
    java.util.List list48 = sortApplication41.sortSimpleSpecialChars(str_array45);
    java.lang.String str49 = calApplication30.printCal(str_array45);
    java.lang.String str50 = calApplication21.printCalForMonthYear(str_array45);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array53 = new java.lang.String[] { "hi!" };
    java.lang.String str54 = commApplication51.commOnlySecond(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array58 = new java.lang.String[] { "hi!" };
    java.lang.String str59 = commApplication56.commOnlySecond(str_array58);
    java.lang.String str60 = calApplication55.printCalForYear(str_array58);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array63 = new java.lang.String[] { "hi!" };
    java.lang.String str64 = commApplication61.commOnlySecond(str_array63);
    java.lang.String str65 = calApplication55.printCalForYear(str_array63);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication66 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication67 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array70 = new java.lang.String[] { "" };
    java.lang.String str71 = calApplication68.printCalForYearMondayFirst(str_array70);
    java.util.List list72 = sortApplication67.sortCapitalNumbersSpecialChars(str_array70);
    java.util.List list73 = sortApplication66.sortSimpleSpecialChars(str_array70);
    java.lang.String str74 = calApplication55.printCal(str_array70);
    java.lang.String str75 = commApplication51.commOnlySecond(str_array70);
    java.lang.String str76 = calApplication21.printCalForMonthYearMondayFirst(str_array70);
    java.lang.String str77 = calApplication1.printCalForYearMondayFirst(str_array70);
    java.io.InputStream inputStream78 = null;
    java.io.OutputStream outputStream79 = null;
    // The following exception was thrown during execution in test generation
    try {
      dateApplication0.run(str_array70, inputStream78, outputStream79);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException");
    } catch (sg.edu.nus.comp.cs4218.exception.DateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.DateException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str54.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str59.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str64.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str75.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str77);

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test159"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    java.lang.String str12 = commApplication5.commOnlySecond(str_array9);
    java.lang.String str13 = commApplication1.commOnlySecond(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication14 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication15 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "" };
    java.lang.String str19 = calApplication16.printCalForYearMondayFirst(str_array18);
    java.util.List list20 = sortApplication15.sortCapitalNumbersSpecialChars(str_array18);
    java.util.List list21 = sortApplication14.sortSimpleSpecialChars(str_array18);
    java.lang.String str22 = commApplication1.commAllMatches(str_array18);
    java.lang.String str23 = bcApplication0.lessThan(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication24 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = calApplication25.printCalForYearMondayFirst(str_array27);
    java.util.List list29 = sortApplication24.sortCapitalNumbersSpecialChars(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "hi!" };
    java.lang.String str34 = commApplication31.commOnlySecond(str_array33);
    java.lang.String str35 = calApplication30.printCalForYear(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array38 = new java.lang.String[] { "hi!" };
    java.lang.String str39 = commApplication36.commOnlySecond(str_array38);
    java.lang.String str40 = calApplication30.printCalForYear(str_array38);
    java.util.List list41 = sortApplication24.sortNumbersSpecialChars(str_array38);
    java.lang.String str42 = bcApplication0.negate(str_array38);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication43 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = calApplication44.printCalForYearMondayFirst(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array50 = new java.lang.String[] { "hi!" };
    java.lang.String str51 = commApplication48.commOnlySecond(str_array50);
    java.lang.String str52 = calApplication44.printCalWithMondayFirst(str_array50);
    java.util.List list53 = sortApplication43.sortCapitalNumbers(str_array50);
    java.lang.String str54 = bcApplication0.negate(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str22.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str51.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test160"); }


    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication0 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    java.util.List list6 = sortApplication1.sortSimpleCapitalSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = calApplication8.printCalForYearMondayFirst(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array14 = new java.lang.String[] { "" };
    java.lang.String str15 = calApplication12.printCalForYearMondayFirst(str_array14);
    java.lang.String str16 = calApplication8.printCal(str_array14);
    java.lang.String str17 = calApplication7.printCal(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array23 = new java.lang.String[] { "hi!" };
    java.lang.String str24 = commApplication21.commOnlySecond(str_array23);
    java.lang.String str25 = calApplication20.printCalForYear(str_array23);
    java.lang.String str26 = commApplication19.commOnlySecond(str_array23);
    java.lang.String str27 = commApplication18.commBothMathches(str_array23);
    java.lang.String str28 = calApplication7.printCalForYear(str_array23);
    java.util.List list29 = sortApplication1.sortSimpleCapitalNumber(str_array23);
    java.io.InputStream inputStream30 = null;
    java.io.OutputStream outputStream31 = null;
    // The following exception was thrown during execution in test generation
    try {
      echoApplication0.run(str_array23, inputStream30, outputStream31);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.EchoException");
    } catch (sg.edu.nus.comp.cs4218.exception.EchoException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.EchoException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.EchoException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str24.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str26.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str27.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test161"); }


    sg.edu.nus.comp.cs4218.impl.app.TailApplication tailApplication0 = new sg.edu.nus.comp.cs4218.impl.app.TailApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication7.printCalForYear(str_array15);
    java.util.List list18 = sortApplication1.sortNumbersSpecialChars(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "hi!" };
    java.lang.String str23 = commApplication20.commOnlySecond(str_array22);
    java.lang.String str24 = calApplication19.printCalForYear(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "hi!" };
    java.lang.String str28 = commApplication25.commOnlySecond(str_array27);
    java.lang.String str29 = calApplication19.printCalForYear(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication30 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication31 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "" };
    java.lang.String str35 = calApplication32.printCalForYearMondayFirst(str_array34);
    java.util.List list36 = sortApplication31.sortCapitalNumbersSpecialChars(str_array34);
    java.util.List list37 = sortApplication30.sortSimpleSpecialChars(str_array34);
    java.lang.String str38 = calApplication19.printCal(str_array34);
    java.util.List list39 = sortApplication1.sortStringsSimple(str_array34);
    java.io.InputStream inputStream40 = null;
    java.io.OutputStream outputStream41 = null;
    // The following exception was thrown during execution in test generation
    try {
      tailApplication0.run(str_array34, inputStream40, outputStream41);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException");
    } catch (sg.edu.nus.comp.cs4218.exception.TailException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.TailException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str23.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str28.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test162"); }


    sg.edu.nus.comp.cs4218.impl.app.DateApplication dateApplication0 = new sg.edu.nus.comp.cs4218.impl.app.DateApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication7.printCalForYear(str_array15);
    java.util.List list18 = sortApplication1.sortNumbersSpecialChars(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication19 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = calApplication20.printCalForYearMondayFirst(str_array22);
    java.util.List list24 = sortApplication19.sortCapitalNumbersSpecialChars(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication25 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "" };
    java.lang.String str29 = calApplication26.printCalForYearMondayFirst(str_array28);
    java.util.List list30 = sortApplication25.sortCapitalNumbersSpecialChars(str_array28);
    java.util.List list31 = sortApplication19.numericalSortSimpleSpecialChars(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "hi!" };
    java.lang.String str37 = commApplication34.commOnlySecond(str_array36);
    java.lang.String str38 = calApplication33.printCalForYear(str_array36);
    java.lang.String str39 = commApplication32.commOnlySecond(str_array36);
    java.util.List list40 = sortApplication19.sortAll(str_array36);
    java.util.List list41 = sortApplication1.numericalSortNumbersSpecialChars(str_array36);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication42 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication43 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = calApplication44.printCalForYearMondayFirst(str_array46);
    java.util.List list48 = sortApplication43.sortCapitalNumbersSpecialChars(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array52 = new java.lang.String[] { "hi!" };
    java.lang.String str53 = commApplication50.commOnlySecond(str_array52);
    java.lang.String str54 = calApplication49.printCalForYear(str_array52);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "hi!" };
    java.lang.String str58 = commApplication55.commOnlySecond(str_array57);
    java.lang.String str59 = calApplication49.printCalForYear(str_array57);
    java.util.List list60 = sortApplication43.sortNumbersSpecialChars(str_array57);
    java.lang.String str61 = bcApplication42.notEqual(str_array57);
    java.util.List list62 = sortApplication1.sortSimpleCapitalSpecialChars(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication63 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array66 = new java.lang.String[] { "" };
    java.lang.String str67 = calApplication64.printCalForYearMondayFirst(str_array66);
    java.util.List list68 = sortApplication63.sortCapitalNumbersSpecialChars(str_array66);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication69 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication70 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array72 = new java.lang.String[] { "" };
    java.lang.String str73 = calApplication70.printCalForYearMondayFirst(str_array72);
    java.util.List list74 = sortApplication69.sortCapitalNumbersSpecialChars(str_array72);
    java.util.List list75 = sortApplication63.numericalSortSimpleSpecialChars(str_array72);
    java.util.List list76 = sortApplication1.numericalSortStringsSimple(str_array72);
    java.io.InputStream inputStream77 = null;
    java.io.OutputStream outputStream78 = null;
    // The following exception was thrown during execution in test generation
    try {
      dateApplication0.run(str_array72, inputStream77, outputStream78);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException");
    } catch (sg.edu.nus.comp.cs4218.exception.DateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.DateException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str37.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str53.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str58.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test163"); }


    sg.edu.nus.comp.cs4218.impl.app.CatApplication catApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CatApplication();
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication1 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication2 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = calApplication3.printCalForYearMondayFirst(str_array5);
    java.util.List list7 = sortApplication2.sortCapitalNumbersSpecialChars(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication8 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array11 = new java.lang.String[] { "" };
    java.lang.String str12 = calApplication9.printCalForYearMondayFirst(str_array11);
    java.util.List list13 = sortApplication8.sortCapitalNumbersSpecialChars(str_array11);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!" };
    java.lang.String str18 = commApplication15.commOnlySecond(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "hi!" };
    java.lang.String str23 = commApplication20.commOnlySecond(str_array22);
    java.lang.String str24 = calApplication14.printCalForYear(str_array22);
    java.util.List list25 = sortApplication8.sortNumbersSpecialChars(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array29 = new java.lang.String[] { "" };
    java.lang.String str30 = calApplication27.printCalForYearMondayFirst(str_array29);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "" };
    java.lang.String str34 = calApplication31.printCalForYearMondayFirst(str_array33);
    java.lang.String str35 = calApplication27.printCal(str_array33);
    java.lang.String str36 = calApplication26.printCal(str_array33);
    java.util.List list37 = sortApplication8.numericalSortCapitalNumbersSpecialChars(str_array33);
    java.util.List list38 = sortApplication2.numericalSortCapitalNumbersSpecialChars(str_array33);
    java.lang.String[] str_array40 = new java.lang.String[] { "comm: terminated with error message comm: file is not readable" };
    java.util.List list41 = sortApplication2.numericalSortAll(str_array40);
    java.lang.String str42 = bcApplication1.bracket(str_array40);
    java.io.InputStream inputStream43 = null;
    java.io.OutputStream outputStream44 = null;
    // The following exception was thrown during execution in test generation
    try {
      catApplication0.run(str_array40, inputStream43, outputStream44);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CatException");
    } catch (sg.edu.nus.comp.cs4218.exception.CatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.CatException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CatException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str23.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test164"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    java.lang.String str12 = commApplication5.commOnlySecond(str_array9);
    java.lang.String str13 = commApplication1.commOnlySecond(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication14 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "" };
    java.lang.String str18 = calApplication15.printCalForYearMondayFirst(str_array17);
    java.util.List list19 = sortApplication14.sortCapitalNumbersSpecialChars(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array23 = new java.lang.String[] { "hi!" };
    java.lang.String str24 = commApplication21.commOnlySecond(str_array23);
    java.lang.String str25 = calApplication20.printCalForYear(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!" };
    java.lang.String str29 = commApplication26.commOnlySecond(str_array28);
    java.lang.String str30 = calApplication20.printCalForYear(str_array28);
    java.util.List list31 = sortApplication14.sortNumbersSpecialChars(str_array28);
    java.lang.String str32 = commApplication1.commBothMathches(str_array28);
    java.lang.String str33 = bcApplication0.add(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication34 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication35 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication36 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "" };
    java.lang.String str40 = calApplication37.printCalForYearMondayFirst(str_array39);
    java.util.List list41 = sortApplication36.sortCapitalNumbersSpecialChars(str_array39);
    java.util.List list42 = sortApplication35.sortSimpleSpecialChars(str_array39);
    java.io.InputStream inputStream43 = null;
    java.io.OutputStream outputStream44 = null;
    bcApplication34.run(str_array39, inputStream43, outputStream44);
    java.lang.String str46 = bcApplication0.equalEqual(str_array39);
    java.lang.String[] str_array47 = null;
    java.lang.String str48 = bcApplication0.equalEqual(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array51 = new java.lang.String[] { "hi!" };
    java.lang.String str52 = commApplication49.commOnlySecond(str_array51);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "hi!" };
    java.lang.String str58 = commApplication55.commOnlySecond(str_array57);
    java.lang.String str59 = calApplication54.printCalForYear(str_array57);
    java.lang.String str60 = commApplication53.commOnlySecond(str_array57);
    java.lang.String str61 = commApplication49.commOnlySecond(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication62 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication63 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array66 = new java.lang.String[] { "" };
    java.lang.String str67 = calApplication64.printCalForYearMondayFirst(str_array66);
    java.util.List list68 = sortApplication63.sortCapitalNumbersSpecialChars(str_array66);
    java.util.List list69 = sortApplication62.sortSimpleSpecialChars(str_array66);
    java.lang.String str70 = commApplication49.commAllMatches(str_array66);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication71 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication72 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication73 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array75 = new java.lang.String[] { "" };
    java.lang.String str76 = calApplication73.printCalForYearMondayFirst(str_array75);
    java.util.List list77 = sortApplication72.sortCapitalNumbersSpecialChars(str_array75);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication78 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication79 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array81 = new java.lang.String[] { "hi!" };
    java.lang.String str82 = commApplication79.commOnlySecond(str_array81);
    java.lang.String str83 = calApplication78.printCalForYear(str_array81);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication84 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array86 = new java.lang.String[] { "hi!" };
    java.lang.String str87 = commApplication84.commOnlySecond(str_array86);
    java.lang.String str88 = calApplication78.printCalForYear(str_array86);
    java.util.List list89 = sortApplication72.sortNumbersSpecialChars(str_array86);
    java.lang.String str90 = bcApplication71.notEqual(str_array86);
    java.lang.String str91 = commApplication49.commNoMatches(str_array86);
    java.lang.String str92 = bcApplication0.divide(str_array86);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication93 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication94 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array96 = new java.lang.String[] { "hi!" };
    java.lang.String str97 = commApplication94.commOnlySecond(str_array96);
    java.util.List list98 = sortApplication93.numericalSortNumbersSpecialChars(str_array96);
    java.lang.String str99 = bcApplication0.number(str_array96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str24.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str32.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str52.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str58.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str60.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str61.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str70.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str82.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str87.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str91 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str91.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str97 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str97.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str99);

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test165"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    java.lang.String str12 = commApplication5.commOnlySecond(str_array9);
    java.lang.String str13 = commApplication1.commOnlySecond(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication14 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication15 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "" };
    java.lang.String str19 = calApplication16.printCalForYearMondayFirst(str_array18);
    java.util.List list20 = sortApplication15.sortCapitalNumbersSpecialChars(str_array18);
    java.util.List list21 = sortApplication14.sortSimpleSpecialChars(str_array18);
    java.lang.String str22 = commApplication1.commAllMatches(str_array18);
    java.lang.String str23 = bcApplication0.lessThan(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication24 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication25 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "" };
    java.lang.String str29 = calApplication26.printCalForYearMondayFirst(str_array28);
    java.util.List list30 = sortApplication25.sortCapitalNumbersSpecialChars(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication31 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "" };
    java.lang.String str35 = calApplication32.printCalForYearMondayFirst(str_array34);
    java.util.List list36 = sortApplication31.sortCapitalNumbersSpecialChars(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "hi!" };
    java.lang.String str41 = commApplication38.commOnlySecond(str_array40);
    java.lang.String str42 = calApplication37.printCalForYear(str_array40);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array45 = new java.lang.String[] { "hi!" };
    java.lang.String str46 = commApplication43.commOnlySecond(str_array45);
    java.lang.String str47 = calApplication37.printCalForYear(str_array45);
    java.util.List list48 = sortApplication31.sortNumbersSpecialChars(str_array45);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array52 = new java.lang.String[] { "" };
    java.lang.String str53 = calApplication50.printCalForYearMondayFirst(str_array52);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array56 = new java.lang.String[] { "" };
    java.lang.String str57 = calApplication54.printCalForYearMondayFirst(str_array56);
    java.lang.String str58 = calApplication50.printCal(str_array56);
    java.lang.String str59 = calApplication49.printCal(str_array56);
    java.util.List list60 = sortApplication31.numericalSortCapitalNumbersSpecialChars(str_array56);
    java.util.List list61 = sortApplication25.numericalSortCapitalNumbersSpecialChars(str_array56);
    java.lang.String[] str_array63 = new java.lang.String[] { "comm: terminated with error message comm: file is not readable" };
    java.util.List list64 = sortApplication25.numericalSortAll(str_array63);
    java.lang.String str65 = bcApplication24.bracket(str_array63);
    java.lang.String str66 = bcApplication0.greaterThan(str_array63);
    java.lang.String[] str_array67 = null;
    java.lang.String str68 = bcApplication0.divide(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str22.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str41.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str46.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str68);

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test166"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    java.lang.String str12 = commApplication5.commOnlySecond(str_array9);
    java.lang.String str13 = commApplication1.commOnlySecond(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication14 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication15 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "" };
    java.lang.String str19 = calApplication16.printCalForYearMondayFirst(str_array18);
    java.util.List list20 = sortApplication15.sortCapitalNumbersSpecialChars(str_array18);
    java.util.List list21 = sortApplication14.sortSimpleSpecialChars(str_array18);
    java.lang.String str22 = commApplication1.commAllMatches(str_array18);
    java.lang.String str23 = bcApplication0.lessThan(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "hi!" };
    java.lang.String str27 = commApplication24.commOnlySecond(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "hi!" };
    java.lang.String str33 = commApplication30.commOnlySecond(str_array32);
    java.lang.String str34 = calApplication29.printCalForYear(str_array32);
    java.lang.String str35 = commApplication28.commOnlySecond(str_array32);
    java.lang.String str36 = commApplication24.commOnlySecond(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication37 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "" };
    java.lang.String str41 = calApplication38.printCalForYearMondayFirst(str_array40);
    java.util.List list42 = sortApplication37.sortCapitalNumbersSpecialChars(str_array40);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "hi!" };
    java.lang.String str47 = commApplication44.commOnlySecond(str_array46);
    java.lang.String str48 = calApplication43.printCalForYear(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array51 = new java.lang.String[] { "hi!" };
    java.lang.String str52 = commApplication49.commOnlySecond(str_array51);
    java.lang.String str53 = calApplication43.printCalForYear(str_array51);
    java.util.List list54 = sortApplication37.sortNumbersSpecialChars(str_array51);
    java.lang.String str55 = commApplication24.commBothMathches(str_array51);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication56 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication57 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array60 = new java.lang.String[] { "" };
    java.lang.String str61 = calApplication58.printCalForYearMondayFirst(str_array60);
    java.util.List list62 = sortApplication57.sortCapitalNumbersSpecialChars(str_array60);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication63 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array66 = new java.lang.String[] { "hi!" };
    java.lang.String str67 = commApplication64.commOnlySecond(str_array66);
    java.lang.String str68 = calApplication63.printCalForYear(str_array66);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication69 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array71 = new java.lang.String[] { "hi!" };
    java.lang.String str72 = commApplication69.commOnlySecond(str_array71);
    java.lang.String str73 = calApplication63.printCalForYear(str_array71);
    java.util.List list74 = sortApplication57.sortNumbersSpecialChars(str_array71);
    java.lang.String str75 = bcApplication56.notEqual(str_array71);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication76 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication77 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array79 = new java.lang.String[] { "hi!" };
    java.lang.String str80 = commApplication77.commOnlySecond(str_array79);
    java.lang.String str81 = calApplication76.printCalForYear(str_array79);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication82 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array84 = new java.lang.String[] { "hi!" };
    java.lang.String str85 = commApplication82.commOnlySecond(str_array84);
    java.lang.String str86 = calApplication76.printCalForYear(str_array84);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication87 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication88 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication89 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array91 = new java.lang.String[] { "" };
    java.lang.String str92 = calApplication89.printCalForYearMondayFirst(str_array91);
    java.util.List list93 = sortApplication88.sortCapitalNumbersSpecialChars(str_array91);
    java.util.List list94 = sortApplication87.sortSimpleSpecialChars(str_array91);
    java.lang.String str95 = calApplication76.printCal(str_array91);
    java.lang.String str96 = bcApplication56.lessThanOrEqual(str_array91);
    java.lang.String str97 = commApplication24.commNoMatches(str_array91);
    java.lang.String str98 = bcApplication0.divide(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str22.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str27.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str33.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str35.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str36.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str47.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str52.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str55.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str67.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str72.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str80.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str85.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str97 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str97.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str98);

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test167"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array14 = new java.lang.String[] { "hi!" };
    java.lang.String str15 = commApplication12.commOnlySecond(str_array14);
    java.lang.String str16 = calApplication6.printCalForYear(str_array14);
    java.util.List list17 = sortApplication0.sortNumbersSpecialChars(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = calApplication19.printCalForYearMondayFirst(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array25 = new java.lang.String[] { "" };
    java.lang.String str26 = calApplication23.printCalForYearMondayFirst(str_array25);
    java.lang.String str27 = calApplication19.printCal(str_array25);
    java.lang.String str28 = calApplication18.printCal(str_array25);
    java.util.List list29 = sortApplication0.numericalSortCapitalNumbersSpecialChars(str_array25);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication30 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication31 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication32 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "" };
    java.lang.String str36 = calApplication33.printCalForYearMondayFirst(str_array35);
    java.util.List list37 = sortApplication32.sortCapitalNumbersSpecialChars(str_array35);
    java.util.List list38 = sortApplication31.sortSimpleSpecialChars(str_array35);
    java.io.InputStream inputStream39 = null;
    java.io.OutputStream outputStream40 = null;
    bcApplication30.run(str_array35, inputStream39, outputStream40);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication42 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication43 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = calApplication44.printCalForYearMondayFirst(str_array46);
    java.util.List list48 = sortApplication43.sortCapitalNumbersSpecialChars(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication49 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array52 = new java.lang.String[] { "" };
    java.lang.String str53 = calApplication50.printCalForYearMondayFirst(str_array52);
    java.util.List list54 = sortApplication49.sortCapitalNumbersSpecialChars(str_array52);
    java.util.List list55 = sortApplication43.numericalSortSimpleSpecialChars(str_array52);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array60 = new java.lang.String[] { "hi!" };
    java.lang.String str61 = commApplication58.commOnlySecond(str_array60);
    java.lang.String str62 = calApplication57.printCalForYear(str_array60);
    java.lang.String str63 = commApplication56.commOnlySecond(str_array60);
    java.util.List list64 = sortApplication43.sortAll(str_array60);
    java.util.List list65 = sortApplication42.sortSimpleCapitalSpecialChars(str_array60);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication66 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array68 = new java.lang.String[] { "" };
    java.lang.String str69 = calApplication66.printCalForYearMondayFirst(str_array68);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication70 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array72 = new java.lang.String[] { "hi!" };
    java.lang.String str73 = commApplication70.commOnlySecond(str_array72);
    java.lang.String str74 = calApplication66.printCalWithMondayFirst(str_array72);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication75 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication76 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array78 = new java.lang.String[] { "" };
    java.lang.String str79 = calApplication76.printCalForYearMondayFirst(str_array78);
    java.util.List list80 = sortApplication75.sortCapitalNumbersSpecialChars(str_array78);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication81 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication82 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array84 = new java.lang.String[] { "" };
    java.lang.String str85 = calApplication82.printCalForYearMondayFirst(str_array84);
    java.util.List list86 = sortApplication81.sortCapitalNumbersSpecialChars(str_array84);
    java.util.List list87 = sortApplication75.numericalSortSimpleSpecialChars(str_array84);
    java.lang.String str88 = calApplication66.printCalForYear(str_array84);
    java.util.List list89 = sortApplication42.sortNumbers(str_array84);
    java.lang.String str90 = bcApplication30.pow(str_array84);
    java.util.List list91 = sortApplication0.sortAll(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str15.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str61.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str63.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str73.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list91);

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test168"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    java.util.List list7 = sortApplication0.sortSimpleSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication8 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array11 = new java.lang.String[] { "" };
    java.lang.String str12 = calApplication9.printCalForYearMondayFirst(str_array11);
    java.util.List list13 = sortApplication8.sortCapitalNumbersSpecialChars(str_array11);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "" };
    java.lang.String str17 = calApplication14.printCalForYearMondayFirst(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!" };
    java.lang.String str21 = commApplication18.commOnlySecond(str_array20);
    java.lang.String str22 = calApplication14.printCalWithMondayFirst(str_array20);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = calApplication24.printCalForYearMondayFirst(str_array26);
    java.util.List list28 = sortApplication23.sortCapitalNumbersSpecialChars(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication29 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "" };
    java.lang.String str33 = calApplication30.printCalForYearMondayFirst(str_array32);
    java.util.List list34 = sortApplication29.sortCapitalNumbersSpecialChars(str_array32);
    java.util.List list35 = sortApplication23.numericalSortSimpleSpecialChars(str_array32);
    java.lang.String str36 = calApplication14.printCalForYear(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "hi!" };
    java.lang.String str41 = commApplication38.commOnlySecond(str_array40);
    java.lang.String str42 = calApplication37.printCalForYear(str_array40);
    java.lang.String str43 = calApplication14.printCalForYearMondayFirst(str_array40);
    java.util.List list44 = sortApplication8.sortSimpleCapitalNumber(str_array40);
    java.util.List list45 = sortApplication0.numericalSortSpecialChars(str_array40);
    java.lang.String[] str_array46 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list47 = sortApplication0.numericalSortAll(str_array46);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str41.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test169"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array14 = new java.lang.String[] { "hi!" };
    java.lang.String str15 = commApplication12.commOnlySecond(str_array14);
    java.lang.String str16 = calApplication6.printCalForYear(str_array14);
    java.util.List list17 = sortApplication0.sortNumbersSpecialChars(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication18 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication19 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = calApplication20.printCalForYearMondayFirst(str_array22);
    java.util.List list24 = sortApplication19.sortCapitalNumbersSpecialChars(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!" };
    java.lang.String str29 = commApplication26.commOnlySecond(str_array28);
    java.lang.String str30 = calApplication25.printCalForYear(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "hi!" };
    java.lang.String str34 = commApplication31.commOnlySecond(str_array33);
    java.lang.String str35 = calApplication25.printCalForYear(str_array33);
    java.util.List list36 = sortApplication19.sortNumbersSpecialChars(str_array33);
    java.lang.String str37 = bcApplication18.notEqual(str_array33);
    java.util.List list38 = sortApplication0.sortSimpleNumbers(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array42 = new java.lang.String[] { "hi!" };
    java.lang.String str43 = commApplication40.commOnlySecond(str_array42);
    java.lang.String str44 = calApplication39.printCalForYear(str_array42);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array47 = new java.lang.String[] { "hi!" };
    java.lang.String str48 = commApplication45.commOnlySecond(str_array47);
    java.lang.String str49 = calApplication39.printCalForYear(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication50 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication51 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array54 = new java.lang.String[] { "" };
    java.lang.String str55 = calApplication52.printCalForYearMondayFirst(str_array54);
    java.util.List list56 = sortApplication51.sortCapitalNumbersSpecialChars(str_array54);
    java.util.List list57 = sortApplication50.sortSimpleSpecialChars(str_array54);
    java.lang.String str58 = calApplication39.printCal(str_array54);
    java.util.List list59 = sortApplication0.sortStringsCapital(str_array54);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication60 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array63 = new java.lang.String[] { "" };
    java.lang.String str64 = calApplication61.printCalForYearMondayFirst(str_array63);
    java.util.List list65 = sortApplication60.sortCapitalNumbersSpecialChars(str_array63);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication66 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array68 = new java.lang.String[] { "" };
    java.lang.String str69 = calApplication66.printCalForYearMondayFirst(str_array68);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication70 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array72 = new java.lang.String[] { "hi!" };
    java.lang.String str73 = commApplication70.commOnlySecond(str_array72);
    java.lang.String str74 = calApplication66.printCalWithMondayFirst(str_array72);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication75 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication76 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array78 = new java.lang.String[] { "" };
    java.lang.String str79 = calApplication76.printCalForYearMondayFirst(str_array78);
    java.util.List list80 = sortApplication75.sortCapitalNumbersSpecialChars(str_array78);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication81 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication82 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array84 = new java.lang.String[] { "" };
    java.lang.String str85 = calApplication82.printCalForYearMondayFirst(str_array84);
    java.util.List list86 = sortApplication81.sortCapitalNumbersSpecialChars(str_array84);
    java.util.List list87 = sortApplication75.numericalSortSimpleSpecialChars(str_array84);
    java.lang.String str88 = calApplication66.printCalForYear(str_array84);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication89 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication90 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array92 = new java.lang.String[] { "hi!" };
    java.lang.String str93 = commApplication90.commOnlySecond(str_array92);
    java.lang.String str94 = calApplication89.printCalForYear(str_array92);
    java.lang.String str95 = calApplication66.printCalForYearMondayFirst(str_array92);
    java.util.List list96 = sortApplication60.sortSimpleCapitalNumber(str_array92);
    java.util.List list97 = sortApplication0.numericalSortCapitalNumbers(str_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str15.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str43.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str48.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str73.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str93 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str93.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list97);

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test170"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    java.util.List list12 = sortApplication0.numericalSortSimpleSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!" };
    java.lang.String str18 = commApplication15.commOnlySecond(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    java.lang.String str20 = commApplication13.commOnlySecond(str_array17);
    java.util.List list21 = sortApplication0.sortAll(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array24 = new java.lang.String[] { "hi!" };
    java.lang.String str25 = commApplication22.commOnlySecond(str_array24);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "" };
    java.lang.String str29 = calApplication26.printCalForYearMondayFirst(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "" };
    java.lang.String str33 = calApplication30.printCalForYearMondayFirst(str_array32);
    java.lang.String str34 = calApplication26.printCal(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array38 = new java.lang.String[] { "hi!" };
    java.lang.String str39 = commApplication36.commOnlySecond(str_array38);
    java.lang.String str40 = calApplication35.printCalForYear(str_array38);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "hi!" };
    java.lang.String str44 = commApplication41.commOnlySecond(str_array43);
    java.lang.String str45 = calApplication35.printCalForYear(str_array43);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication46 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication47 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array50 = new java.lang.String[] { "" };
    java.lang.String str51 = calApplication48.printCalForYearMondayFirst(str_array50);
    java.util.List list52 = sortApplication47.sortCapitalNumbersSpecialChars(str_array50);
    java.util.List list53 = sortApplication46.sortSimpleSpecialChars(str_array50);
    java.lang.String str54 = calApplication35.printCal(str_array50);
    java.lang.String str55 = calApplication26.printCalForMonthYear(str_array50);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication56 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array59 = new java.lang.String[] { "hi!" };
    java.lang.String str60 = commApplication57.commOnlySecond(str_array59);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication63 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array65 = new java.lang.String[] { "hi!" };
    java.lang.String str66 = commApplication63.commOnlySecond(str_array65);
    java.lang.String str67 = calApplication62.printCalForYear(str_array65);
    java.lang.String str68 = commApplication61.commOnlySecond(str_array65);
    java.lang.String str69 = commApplication57.commOnlySecond(str_array65);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication70 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication71 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array73 = new java.lang.String[] { "" };
    java.lang.String str74 = calApplication71.printCalForYearMondayFirst(str_array73);
    java.util.List list75 = sortApplication70.sortCapitalNumbersSpecialChars(str_array73);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication76 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication77 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array79 = new java.lang.String[] { "hi!" };
    java.lang.String str80 = commApplication77.commOnlySecond(str_array79);
    java.lang.String str81 = calApplication76.printCalForYear(str_array79);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication82 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array84 = new java.lang.String[] { "hi!" };
    java.lang.String str85 = commApplication82.commOnlySecond(str_array84);
    java.lang.String str86 = calApplication76.printCalForYear(str_array84);
    java.util.List list87 = sortApplication70.sortNumbersSpecialChars(str_array84);
    java.lang.String str88 = commApplication57.commBothMathches(str_array84);
    java.lang.String str89 = bcApplication56.add(str_array84);
    java.lang.String str90 = calApplication26.printCalForYear(str_array84);
    java.lang.String str91 = commApplication22.commOnlySecond(str_array84);
    java.util.List list92 = sortApplication0.sortSimpleNumbersSpecialChars(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str25.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str44.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str60.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str66.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str68.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str69.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str80.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str85.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str88.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str91 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str91.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list92);

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test171"); }


    sg.edu.nus.comp.cs4218.impl.app.DateApplication dateApplication0 = new sg.edu.nus.comp.cs4218.impl.app.DateApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = calApplication8.printCalForYearMondayFirst(str_array10);
    java.util.List list12 = sortApplication7.sortCapitalNumbersSpecialChars(str_array10);
    java.util.List list13 = sortApplication1.numericalSortSimpleSpecialChars(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "hi!" };
    java.lang.String str19 = commApplication16.commOnlySecond(str_array18);
    java.lang.String str20 = calApplication15.printCalForYear(str_array18);
    java.lang.String str21 = commApplication14.commOnlySecond(str_array18);
    java.util.List list22 = sortApplication1.sortAll(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication24 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = calApplication25.printCalForYearMondayFirst(str_array27);
    java.util.List list29 = sortApplication24.sortCapitalNumbersSpecialChars(str_array27);
    java.util.List list30 = sortApplication23.sortSimpleSpecialChars(str_array27);
    java.util.List list31 = sortApplication1.numericalSortCapitalSpecialChars(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "hi!" };
    java.lang.String str37 = commApplication34.commOnlySecond(str_array36);
    java.lang.String str38 = calApplication33.printCalForYear(str_array36);
    java.lang.String str39 = commApplication32.commOnlySecond(str_array36);
    java.util.List list40 = sortApplication1.sortAll(str_array36);
    java.io.InputStream inputStream41 = null;
    java.io.OutputStream outputStream42 = null;
    // The following exception was thrown during execution in test generation
    try {
      dateApplication0.run(str_array36, inputStream41, outputStream42);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException");
    } catch (sg.edu.nus.comp.cs4218.exception.DateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.DateException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str37.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test172"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = calApplication8.printCalForYearMondayFirst(str_array10);
    java.util.List list12 = sortApplication7.sortCapitalNumbersSpecialChars(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "hi!" };
    java.lang.String str17 = commApplication14.commOnlySecond(str_array16);
    java.lang.String str18 = calApplication13.printCalForYear(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "hi!" };
    java.lang.String str22 = commApplication19.commOnlySecond(str_array21);
    java.lang.String str23 = calApplication13.printCalForYear(str_array21);
    java.util.List list24 = sortApplication7.sortNumbersSpecialChars(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "" };
    java.lang.String str29 = calApplication26.printCalForYearMondayFirst(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "" };
    java.lang.String str33 = calApplication30.printCalForYearMondayFirst(str_array32);
    java.lang.String str34 = calApplication26.printCal(str_array32);
    java.lang.String str35 = calApplication25.printCal(str_array32);
    java.util.List list36 = sortApplication7.numericalSortCapitalNumbersSpecialChars(str_array32);
    java.util.List list37 = sortApplication1.numericalSortCapitalNumbersSpecialChars(str_array32);
    java.lang.String[] str_array39 = new java.lang.String[] { "comm: terminated with error message comm: file is not readable" };
    java.util.List list40 = sortApplication1.numericalSortAll(str_array39);
    java.lang.String str41 = bcApplication0.bracket(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication42 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array45 = new java.lang.String[] { "hi!" };
    java.lang.String str46 = commApplication43.commOnlySecond(str_array45);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array51 = new java.lang.String[] { "hi!" };
    java.lang.String str52 = commApplication49.commOnlySecond(str_array51);
    java.lang.String str53 = calApplication48.printCalForYear(str_array51);
    java.lang.String str54 = commApplication47.commOnlySecond(str_array51);
    java.lang.String str55 = commApplication43.commOnlySecond(str_array51);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication56 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication57 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array60 = new java.lang.String[] { "" };
    java.lang.String str61 = calApplication58.printCalForYearMondayFirst(str_array60);
    java.util.List list62 = sortApplication57.sortCapitalNumbersSpecialChars(str_array60);
    java.util.List list63 = sortApplication56.sortSimpleSpecialChars(str_array60);
    java.lang.String str64 = commApplication43.commAllMatches(str_array60);
    java.lang.String str65 = bcApplication42.lessThan(str_array60);
    java.lang.String str66 = bcApplication0.and(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str17.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str22.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str46.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str52.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str54.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str55.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str64.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str66);

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test173"); }


    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    java.lang.String str6 = calApplication1.printCalForYear(str_array4);
    java.lang.String str7 = commApplication0.commOnlySecond(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array12 = new java.lang.String[] { "hi!" };
    java.lang.String str13 = commApplication10.commOnlySecond(str_array12);
    java.lang.String str14 = calApplication9.printCalForYear(str_array12);
    java.lang.String str15 = commApplication8.commOnlySecond(str_array12);
    java.lang.String str16 = commApplication0.commAllMatches(str_array12);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!" };
    java.lang.String str21 = commApplication18.commOnlySecond(str_array20);
    java.lang.String str22 = calApplication17.printCalForYear(str_array20);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = calApplication24.printCalForYearMondayFirst(str_array26);
    java.util.List list28 = sortApplication23.sortCapitalNumbersSpecialChars(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "hi!" };
    java.lang.String str33 = commApplication30.commOnlySecond(str_array32);
    java.lang.String str34 = calApplication29.printCalForYear(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array37 = new java.lang.String[] { "hi!" };
    java.lang.String str38 = commApplication35.commOnlySecond(str_array37);
    java.lang.String str39 = calApplication29.printCalForYear(str_array37);
    java.util.List list40 = sortApplication23.sortNumbersSpecialChars(str_array37);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array44 = new java.lang.String[] { "hi!" };
    java.lang.String str45 = commApplication42.commOnlySecond(str_array44);
    java.lang.String str46 = calApplication41.printCalForYear(str_array44);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array49 = new java.lang.String[] { "hi!" };
    java.lang.String str50 = commApplication47.commOnlySecond(str_array49);
    java.lang.String str51 = calApplication41.printCalForYear(str_array49);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication52 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication53 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array56 = new java.lang.String[] { "" };
    java.lang.String str57 = calApplication54.printCalForYearMondayFirst(str_array56);
    java.util.List list58 = sortApplication53.sortCapitalNumbersSpecialChars(str_array56);
    java.util.List list59 = sortApplication52.sortSimpleSpecialChars(str_array56);
    java.lang.String str60 = calApplication41.printCal(str_array56);
    java.util.List list61 = sortApplication23.sortStringsSimple(str_array56);
    java.lang.String str62 = calApplication17.printCalForMonthYearMondayFirst(str_array56);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication63 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication65 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication66 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array68 = new java.lang.String[] { "hi!" };
    java.lang.String str69 = commApplication66.commOnlySecond(str_array68);
    java.lang.String str70 = calApplication65.printCalForYear(str_array68);
    java.lang.String str71 = commApplication64.commOnlySecond(str_array68);
    java.lang.String str72 = commApplication63.commBothMathches(str_array68);
    java.lang.String str73 = calApplication17.printCal(str_array68);
    java.io.InputStream inputStream74 = null;
    java.io.OutputStream outputStream75 = null;
    // The following exception was thrown during execution in test generation
    try {
      commApplication0.run(str_array68, inputStream74, outputStream75);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CommException");
    } catch (sg.edu.nus.comp.cs4218.exception.CommException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.CommException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CommException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str7.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str15.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str33.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str38.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str45.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str50.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str69.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str71.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str72.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str73);

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test174"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    java.lang.String str12 = commApplication5.commOnlySecond(str_array9);
    java.lang.String str13 = commApplication1.commOnlySecond(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication14 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication15 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "" };
    java.lang.String str19 = calApplication16.printCalForYearMondayFirst(str_array18);
    java.util.List list20 = sortApplication15.sortCapitalNumbersSpecialChars(str_array18);
    java.util.List list21 = sortApplication14.sortSimpleSpecialChars(str_array18);
    java.lang.String str22 = commApplication1.commAllMatches(str_array18);
    java.lang.String str23 = bcApplication0.lessThan(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = calApplication24.printCalForYearMondayFirst(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array30 = new java.lang.String[] { "" };
    java.lang.String str31 = calApplication28.printCalForYearMondayFirst(str_array30);
    java.lang.String str32 = calApplication24.printCal(str_array30);
    java.lang.String str33 = bcApplication0.and(str_array30);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication35 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array38 = new java.lang.String[] { "" };
    java.lang.String str39 = calApplication36.printCalForYearMondayFirst(str_array38);
    java.util.List list40 = sortApplication35.sortCapitalNumbersSpecialChars(str_array38);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array44 = new java.lang.String[] { "hi!" };
    java.lang.String str45 = commApplication42.commOnlySecond(str_array44);
    java.lang.String str46 = calApplication41.printCalForYear(str_array44);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array49 = new java.lang.String[] { "hi!" };
    java.lang.String str50 = commApplication47.commOnlySecond(str_array49);
    java.lang.String str51 = calApplication41.printCalForYear(str_array49);
    java.util.List list52 = sortApplication35.sortNumbersSpecialChars(str_array49);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array56 = new java.lang.String[] { "hi!" };
    java.lang.String str57 = commApplication54.commOnlySecond(str_array56);
    java.lang.String str58 = calApplication53.printCalForYear(str_array56);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication59 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array61 = new java.lang.String[] { "hi!" };
    java.lang.String str62 = commApplication59.commOnlySecond(str_array61);
    java.lang.String str63 = calApplication53.printCalForYear(str_array61);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication64 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication65 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication66 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array68 = new java.lang.String[] { "" };
    java.lang.String str69 = calApplication66.printCalForYearMondayFirst(str_array68);
    java.util.List list70 = sortApplication65.sortCapitalNumbersSpecialChars(str_array68);
    java.util.List list71 = sortApplication64.sortSimpleSpecialChars(str_array68);
    java.lang.String str72 = calApplication53.printCal(str_array68);
    java.util.List list73 = sortApplication35.sortStringsSimple(str_array68);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication74 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication75 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array77 = new java.lang.String[] { "" };
    java.lang.String str78 = calApplication75.printCalForYearMondayFirst(str_array77);
    java.util.List list79 = sortApplication74.sortCapitalNumbersSpecialChars(str_array77);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication80 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication81 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array83 = new java.lang.String[] { "" };
    java.lang.String str84 = calApplication81.printCalForYearMondayFirst(str_array83);
    java.util.List list85 = sortApplication80.sortCapitalNumbersSpecialChars(str_array83);
    java.util.List list86 = sortApplication74.numericalSortSimpleSpecialChars(str_array83);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication87 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication88 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication89 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array91 = new java.lang.String[] { "hi!" };
    java.lang.String str92 = commApplication89.commOnlySecond(str_array91);
    java.lang.String str93 = calApplication88.printCalForYear(str_array91);
    java.lang.String str94 = commApplication87.commOnlySecond(str_array91);
    java.util.List list95 = sortApplication74.sortAll(str_array91);
    java.util.List list96 = sortApplication35.numericalSortSimpleNumbers(str_array91);
    java.lang.String str97 = commApplication34.commNoMatches(str_array91);
    java.lang.String str98 = bcApplication0.add(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str22.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str45.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str50.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str57.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str62.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str92 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str92.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str94 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str94.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str97 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str97.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str98);

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test175"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    java.util.List list12 = sortApplication0.numericalSortSimpleSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!" };
    java.lang.String str18 = commApplication15.commOnlySecond(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    java.lang.String str20 = commApplication13.commOnlySecond(str_array17);
    java.util.List list21 = sortApplication0.sortAll(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication22 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = calApplication24.printCalForYearMondayFirst(str_array26);
    java.util.List list28 = sortApplication23.sortCapitalNumbersSpecialChars(str_array26);
    java.util.List list29 = sortApplication22.sortSimpleSpecialChars(str_array26);
    java.util.List list30 = sortApplication0.numericalSortCapitalSpecialChars(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication31 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication32 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "" };
    java.lang.String str36 = calApplication33.printCalForYearMondayFirst(str_array35);
    java.util.List list37 = sortApplication32.sortCapitalNumbersSpecialChars(str_array35);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication38 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array41 = new java.lang.String[] { "" };
    java.lang.String str42 = calApplication39.printCalForYearMondayFirst(str_array41);
    java.util.List list43 = sortApplication38.sortCapitalNumbersSpecialChars(str_array41);
    java.util.List list44 = sortApplication32.numericalSortSimpleSpecialChars(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array49 = new java.lang.String[] { "hi!" };
    java.lang.String str50 = commApplication47.commOnlySecond(str_array49);
    java.lang.String str51 = calApplication46.printCalForYear(str_array49);
    java.lang.String str52 = commApplication45.commOnlySecond(str_array49);
    java.util.List list53 = sortApplication32.sortAll(str_array49);
    java.util.List list54 = sortApplication31.sortSimpleCapitalSpecialChars(str_array49);
    java.util.List list55 = sortApplication0.numericalSortAll(str_array49);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array58 = new java.lang.String[] { "" };
    java.lang.String str59 = calApplication56.printCalForYearMondayFirst(str_array58);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array62 = new java.lang.String[] { "" };
    java.lang.String str63 = calApplication60.printCalForYearMondayFirst(str_array62);
    java.lang.String str64 = calApplication56.printCal(str_array62);
    java.util.List list65 = sortApplication0.sortSimpleCapitalSpecialChars(str_array62);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication66 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication67 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array70 = new java.lang.String[] { "" };
    java.lang.String str71 = calApplication68.printCalForYearMondayFirst(str_array70);
    java.util.List list72 = sortApplication67.sortCapitalNumbersSpecialChars(str_array70);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication73 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication74 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array76 = new java.lang.String[] { "" };
    java.lang.String str77 = calApplication74.printCalForYearMondayFirst(str_array76);
    java.util.List list78 = sortApplication73.sortCapitalNumbersSpecialChars(str_array76);
    java.util.List list79 = sortApplication67.numericalSortSimpleSpecialChars(str_array76);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication80 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication81 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication82 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array84 = new java.lang.String[] { "hi!" };
    java.lang.String str85 = commApplication82.commOnlySecond(str_array84);
    java.lang.String str86 = calApplication81.printCalForYear(str_array84);
    java.lang.String str87 = commApplication80.commOnlySecond(str_array84);
    java.util.List list88 = sortApplication67.sortAll(str_array84);
    java.util.List list89 = sortApplication66.sortSimpleCapitalSpecialChars(str_array84);
    java.util.List list90 = sortApplication0.numericalSortSimpleCapitalSpecialChars(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str50.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str52.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str85.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str87.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list90);

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test176"); }


    sg.edu.nus.comp.cs4218.impl.app.FmtApplication fmtApplication0 = new sg.edu.nus.comp.cs4218.impl.app.FmtApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = calApplication8.printCalForYearMondayFirst(str_array10);
    java.util.List list12 = sortApplication7.sortCapitalNumbersSpecialChars(str_array10);
    java.util.List list13 = sortApplication1.numericalSortSimpleSpecialChars(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "hi!" };
    java.lang.String str19 = commApplication16.commOnlySecond(str_array18);
    java.lang.String str20 = calApplication15.printCalForYear(str_array18);
    java.lang.String str21 = commApplication14.commOnlySecond(str_array18);
    java.util.List list22 = sortApplication1.sortAll(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication24 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = calApplication25.printCalForYearMondayFirst(str_array27);
    java.util.List list29 = sortApplication24.sortCapitalNumbersSpecialChars(str_array27);
    java.util.List list30 = sortApplication23.sortSimpleSpecialChars(str_array27);
    java.util.List list31 = sortApplication1.numericalSortCapitalSpecialChars(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "hi!" };
    java.lang.String str37 = commApplication34.commOnlySecond(str_array36);
    java.lang.String str38 = calApplication33.printCalForYear(str_array36);
    java.lang.String str39 = commApplication32.commOnlySecond(str_array36);
    java.util.List list40 = sortApplication1.sortAll(str_array36);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "hi!" };
    java.lang.String str44 = commApplication41.commOnlySecond(str_array43);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array49 = new java.lang.String[] { "hi!" };
    java.lang.String str50 = commApplication47.commOnlySecond(str_array49);
    java.lang.String str51 = calApplication46.printCalForYear(str_array49);
    java.lang.String str52 = commApplication45.commOnlySecond(str_array49);
    java.lang.String str53 = commApplication41.commOnlySecond(str_array49);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication54 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication55 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array58 = new java.lang.String[] { "" };
    java.lang.String str59 = calApplication56.printCalForYearMondayFirst(str_array58);
    java.util.List list60 = sortApplication55.sortCapitalNumbersSpecialChars(str_array58);
    java.util.List list61 = sortApplication54.sortSimpleSpecialChars(str_array58);
    java.lang.String str62 = commApplication41.commAllMatches(str_array58);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication63 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication64 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication65 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array67 = new java.lang.String[] { "" };
    java.lang.String str68 = calApplication65.printCalForYearMondayFirst(str_array67);
    java.util.List list69 = sortApplication64.sortCapitalNumbersSpecialChars(str_array67);
    java.util.List list70 = sortApplication63.sortSimpleSpecialChars(str_array67);
    java.lang.String str71 = commApplication41.commAllMatches(str_array67);
    java.util.List list72 = sortApplication1.numericalSortAll(str_array67);
    java.io.InputStream inputStream73 = null;
    java.io.OutputStream outputStream74 = null;
    // The following exception was thrown during execution in test generation
    try {
      fmtApplication0.run(str_array67, inputStream73, outputStream74);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.FmtException");
    } catch (sg.edu.nus.comp.cs4218.exception.FmtException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.FmtException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.FmtException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str37.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str44.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str50.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str52.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str53.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str62.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str71.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test177"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    java.util.List list7 = sortApplication0.sortSimpleSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication8 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array11 = new java.lang.String[] { "hi!" };
    java.lang.String str12 = commApplication9.commOnlySecond(str_array11);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!" };
    java.lang.String str18 = commApplication15.commOnlySecond(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    java.lang.String str20 = commApplication13.commOnlySecond(str_array17);
    java.lang.String str21 = commApplication9.commOnlySecond(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication22 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = calApplication24.printCalForYearMondayFirst(str_array26);
    java.util.List list28 = sortApplication23.sortCapitalNumbersSpecialChars(str_array26);
    java.util.List list29 = sortApplication22.sortSimpleSpecialChars(str_array26);
    java.lang.String str30 = commApplication9.commAllMatches(str_array26);
    java.lang.String str31 = bcApplication8.lessThan(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "hi!" };
    java.lang.String str36 = commApplication33.commOnlySecond(str_array35);
    java.lang.String str37 = calApplication32.printCalForYear(str_array35);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "hi!" };
    java.lang.String str41 = commApplication38.commOnlySecond(str_array40);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "hi!" };
    java.lang.String str47 = commApplication44.commOnlySecond(str_array46);
    java.lang.String str48 = calApplication43.printCalForYear(str_array46);
    java.lang.String str49 = commApplication42.commOnlySecond(str_array46);
    java.lang.String str50 = commApplication38.commOnlySecond(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication51 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array54 = new java.lang.String[] { "" };
    java.lang.String str55 = calApplication52.printCalForYearMondayFirst(str_array54);
    java.util.List list56 = sortApplication51.sortCapitalNumbersSpecialChars(str_array54);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array60 = new java.lang.String[] { "hi!" };
    java.lang.String str61 = commApplication58.commOnlySecond(str_array60);
    java.lang.String str62 = calApplication57.printCalForYear(str_array60);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication63 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array65 = new java.lang.String[] { "hi!" };
    java.lang.String str66 = commApplication63.commOnlySecond(str_array65);
    java.lang.String str67 = calApplication57.printCalForYear(str_array65);
    java.util.List list68 = sortApplication51.sortNumbersSpecialChars(str_array65);
    java.lang.String str69 = commApplication38.commBothMathches(str_array65);
    java.lang.String str70 = calApplication32.printCalForMonthYearMondayFirst(str_array65);
    java.lang.String str71 = bcApplication8.number(str_array65);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication72 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array74 = new java.lang.String[] { "hi!" };
    java.lang.String str75 = commApplication72.commOnlySecond(str_array74);
    java.lang.String str76 = bcApplication8.multiply(str_array74);
    java.util.List list77 = sortApplication0.numericalSortAll(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str30.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str36.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str41.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str47.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str49.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str50.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str61.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str66.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str69.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str75.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test178"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    java.util.List list12 = sortApplication0.numericalSortSimpleSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!" };
    java.lang.String str18 = commApplication15.commOnlySecond(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    java.lang.String str20 = commApplication13.commOnlySecond(str_array17);
    java.util.List list21 = sortApplication0.sortAll(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication22 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = calApplication24.printCalForYearMondayFirst(str_array26);
    java.util.List list28 = sortApplication23.sortCapitalNumbersSpecialChars(str_array26);
    java.util.List list29 = sortApplication22.sortSimpleSpecialChars(str_array26);
    java.util.List list30 = sortApplication0.numericalSortCapitalSpecialChars(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "hi!" };
    java.lang.String str36 = commApplication33.commOnlySecond(str_array35);
    java.lang.String str37 = calApplication32.printCalForYear(str_array35);
    java.lang.String str38 = commApplication31.commOnlySecond(str_array35);
    java.util.List list39 = sortApplication0.sortAll(str_array35);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array42 = new java.lang.String[] { "" };
    java.lang.String str43 = calApplication40.printCalForYearMondayFirst(str_array42);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = calApplication44.printCalForYearMondayFirst(str_array46);
    java.lang.String str48 = calApplication40.printCal(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array52 = new java.lang.String[] { "hi!" };
    java.lang.String str53 = commApplication50.commOnlySecond(str_array52);
    java.lang.String str54 = calApplication49.printCalForYear(str_array52);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "hi!" };
    java.lang.String str58 = commApplication55.commOnlySecond(str_array57);
    java.lang.String str59 = calApplication49.printCalForYear(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication60 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication61 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array64 = new java.lang.String[] { "" };
    java.lang.String str65 = calApplication62.printCalForYearMondayFirst(str_array64);
    java.util.List list66 = sortApplication61.sortCapitalNumbersSpecialChars(str_array64);
    java.util.List list67 = sortApplication60.sortSimpleSpecialChars(str_array64);
    java.lang.String str68 = calApplication49.printCal(str_array64);
    java.lang.String str69 = calApplication40.printCalForMonthYear(str_array64);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication70 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array72 = new java.lang.String[] { "hi!" };
    java.lang.String str73 = commApplication70.commOnlySecond(str_array72);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication74 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication75 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array77 = new java.lang.String[] { "hi!" };
    java.lang.String str78 = commApplication75.commOnlySecond(str_array77);
    java.lang.String str79 = calApplication74.printCalForYear(str_array77);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication80 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array82 = new java.lang.String[] { "hi!" };
    java.lang.String str83 = commApplication80.commOnlySecond(str_array82);
    java.lang.String str84 = calApplication74.printCalForYear(str_array82);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication85 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication86 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication87 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array89 = new java.lang.String[] { "" };
    java.lang.String str90 = calApplication87.printCalForYearMondayFirst(str_array89);
    java.util.List list91 = sortApplication86.sortCapitalNumbersSpecialChars(str_array89);
    java.util.List list92 = sortApplication85.sortSimpleSpecialChars(str_array89);
    java.lang.String str93 = calApplication74.printCal(str_array89);
    java.lang.String str94 = commApplication70.commOnlySecond(str_array89);
    java.lang.String str95 = calApplication40.printCalForMonthYearMondayFirst(str_array89);
    java.util.List list96 = sortApplication0.numericalSortSimpleNumbers(str_array89);
    java.lang.String[] str_array97 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list98 = sortApplication0.sortSimpleCapitalNumber(str_array97);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str36.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str38.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str53.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str58.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str73.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str78.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str83.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str94 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str94.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list96);

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test179"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    java.util.List list12 = sortApplication0.numericalSortSimpleSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!" };
    java.lang.String str18 = commApplication15.commOnlySecond(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    java.lang.String str20 = commApplication13.commOnlySecond(str_array17);
    java.util.List list21 = sortApplication0.sortAll(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication22 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = calApplication24.printCalForYearMondayFirst(str_array26);
    java.util.List list28 = sortApplication23.sortCapitalNumbersSpecialChars(str_array26);
    java.util.List list29 = sortApplication22.sortSimpleSpecialChars(str_array26);
    java.util.List list30 = sortApplication0.numericalSortCapitalSpecialChars(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication31 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "" };
    java.lang.String str35 = calApplication32.printCalForYearMondayFirst(str_array34);
    java.util.List list36 = sortApplication31.sortCapitalNumbersSpecialChars(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication37 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "" };
    java.lang.String str41 = calApplication38.printCalForYearMondayFirst(str_array40);
    java.util.List list42 = sortApplication37.sortCapitalNumbersSpecialChars(str_array40);
    java.util.List list43 = sortApplication31.sortAll(str_array40);
    java.util.List list44 = sortApplication0.sortSimpleCapital(str_array40);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication45 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array48 = new java.lang.String[] { "hi!" };
    java.lang.String str49 = commApplication46.commOnlySecond(str_array48);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array54 = new java.lang.String[] { "hi!" };
    java.lang.String str55 = commApplication52.commOnlySecond(str_array54);
    java.lang.String str56 = calApplication51.printCalForYear(str_array54);
    java.lang.String str57 = commApplication50.commOnlySecond(str_array54);
    java.lang.String str58 = commApplication46.commOnlySecond(str_array54);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication59 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication60 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array63 = new java.lang.String[] { "" };
    java.lang.String str64 = calApplication61.printCalForYearMondayFirst(str_array63);
    java.util.List list65 = sortApplication60.sortCapitalNumbersSpecialChars(str_array63);
    java.util.List list66 = sortApplication59.sortSimpleSpecialChars(str_array63);
    java.lang.String str67 = commApplication46.commAllMatches(str_array63);
    java.lang.String str68 = bcApplication45.lessThan(str_array63);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication69 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array71 = new java.lang.String[] { "" };
    java.lang.String str72 = calApplication69.printCalForYearMondayFirst(str_array71);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication73 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array75 = new java.lang.String[] { "" };
    java.lang.String str76 = calApplication73.printCalForYearMondayFirst(str_array75);
    java.lang.String str77 = calApplication69.printCal(str_array75);
    java.lang.String str78 = bcApplication45.and(str_array75);
    java.util.List list79 = sortApplication0.sortAll(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str49.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str55.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str57.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str58.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str67.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list79);

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test180"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    java.util.List list12 = sortApplication0.numericalSortSimpleSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication13 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication14 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "" };
    java.lang.String str18 = calApplication15.printCalForYearMondayFirst(str_array17);
    java.util.List list19 = sortApplication14.sortCapitalNumbersSpecialChars(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication20 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array23 = new java.lang.String[] { "" };
    java.lang.String str24 = calApplication21.printCalForYearMondayFirst(str_array23);
    java.util.List list25 = sortApplication20.sortCapitalNumbersSpecialChars(str_array23);
    java.util.List list26 = sortApplication14.numericalSortSimpleSpecialChars(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array31 = new java.lang.String[] { "hi!" };
    java.lang.String str32 = commApplication29.commOnlySecond(str_array31);
    java.lang.String str33 = calApplication28.printCalForYear(str_array31);
    java.lang.String str34 = commApplication27.commOnlySecond(str_array31);
    java.util.List list35 = sortApplication14.sortAll(str_array31);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication36 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication37 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "" };
    java.lang.String str41 = calApplication38.printCalForYearMondayFirst(str_array40);
    java.util.List list42 = sortApplication37.sortCapitalNumbersSpecialChars(str_array40);
    java.util.List list43 = sortApplication36.sortSimpleSpecialChars(str_array40);
    java.util.List list44 = sortApplication14.numericalSortCapitalSpecialChars(str_array40);
    java.lang.String str45 = bcApplication13.subtract(str_array40);
    java.util.List list46 = sortApplication0.numericalSortSimpleCapitalSpecialChars(str_array40);
    java.lang.String[] str_array47 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list48 = sortApplication0.sortCapitalNumbers(str_array47);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str32.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test181"); }


    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array2 = new java.lang.String[] { "hi!" };
    java.lang.String str3 = commApplication0.commOnlySecond(str_array2);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication4 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "hi!" };
    java.lang.String str9 = commApplication6.commOnlySecond(str_array8);
    java.lang.String str10 = calApplication5.printCalForYear(str_array8);
    java.lang.String str11 = commApplication4.commOnlySecond(str_array8);
    java.lang.String str12 = commApplication0.commOnlySecond(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication13 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication14 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "" };
    java.lang.String str18 = calApplication15.printCalForYearMondayFirst(str_array17);
    java.util.List list19 = sortApplication14.sortCapitalNumbersSpecialChars(str_array17);
    java.util.List list20 = sortApplication13.sortSimpleSpecialChars(str_array17);
    java.lang.String str21 = commApplication0.commAllMatches(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array24 = new java.lang.String[] { "hi!" };
    java.lang.String str25 = commApplication22.commOnlySecond(str_array24);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array30 = new java.lang.String[] { "hi!" };
    java.lang.String str31 = commApplication28.commOnlySecond(str_array30);
    java.lang.String str32 = calApplication27.printCalForYear(str_array30);
    java.lang.String str33 = commApplication26.commOnlySecond(str_array30);
    java.lang.String str34 = commApplication22.commOnlySecond(str_array30);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication35 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication36 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "" };
    java.lang.String str40 = calApplication37.printCalForYearMondayFirst(str_array39);
    java.util.List list41 = sortApplication36.sortCapitalNumbersSpecialChars(str_array39);
    java.util.List list42 = sortApplication35.sortSimpleSpecialChars(str_array39);
    java.lang.String str43 = commApplication22.commAllMatches(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication44 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication45 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array48 = new java.lang.String[] { "" };
    java.lang.String str49 = calApplication46.printCalForYearMondayFirst(str_array48);
    java.util.List list50 = sortApplication45.sortCapitalNumbersSpecialChars(str_array48);
    java.util.List list51 = sortApplication44.sortSimpleSpecialChars(str_array48);
    java.lang.String str52 = commApplication22.commAllMatches(str_array48);
    java.lang.String str53 = commApplication0.commOnlySecond(str_array48);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "hi!" };
    java.lang.String str58 = commApplication55.commOnlySecond(str_array57);
    java.lang.String str59 = calApplication54.printCalForYear(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array62 = new java.lang.String[] { "hi!" };
    java.lang.String str63 = commApplication60.commOnlySecond(str_array62);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication65 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication66 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array68 = new java.lang.String[] { "hi!" };
    java.lang.String str69 = commApplication66.commOnlySecond(str_array68);
    java.lang.String str70 = calApplication65.printCalForYear(str_array68);
    java.lang.String str71 = commApplication64.commOnlySecond(str_array68);
    java.lang.String str72 = commApplication60.commOnlySecond(str_array68);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication73 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication74 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array76 = new java.lang.String[] { "" };
    java.lang.String str77 = calApplication74.printCalForYearMondayFirst(str_array76);
    java.util.List list78 = sortApplication73.sortCapitalNumbersSpecialChars(str_array76);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication79 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication80 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array82 = new java.lang.String[] { "hi!" };
    java.lang.String str83 = commApplication80.commOnlySecond(str_array82);
    java.lang.String str84 = calApplication79.printCalForYear(str_array82);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication85 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array87 = new java.lang.String[] { "hi!" };
    java.lang.String str88 = commApplication85.commOnlySecond(str_array87);
    java.lang.String str89 = calApplication79.printCalForYear(str_array87);
    java.util.List list90 = sortApplication73.sortNumbersSpecialChars(str_array87);
    java.lang.String str91 = commApplication60.commBothMathches(str_array87);
    java.lang.String str92 = calApplication54.printCalForMonthYearMondayFirst(str_array87);
    java.lang.String str93 = commApplication0.commAllMatches(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str3.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str9.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str21.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str25.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str31.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str33.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str43.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str52.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str53.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str58.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str63.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str69.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str71.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str72.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str83.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str88.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str91 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str91.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str93 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str93.equals("comm: terminated with error message comm: file is not readable"));

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test182"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array14 = new java.lang.String[] { "hi!" };
    java.lang.String str15 = commApplication12.commOnlySecond(str_array14);
    java.lang.String str16 = calApplication6.printCalForYear(str_array14);
    java.util.List list17 = sortApplication0.sortNumbersSpecialChars(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication18 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication19 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = calApplication20.printCalForYearMondayFirst(str_array22);
    java.util.List list24 = sortApplication19.sortCapitalNumbersSpecialChars(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!" };
    java.lang.String str29 = commApplication26.commOnlySecond(str_array28);
    java.lang.String str30 = calApplication25.printCalForYear(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "hi!" };
    java.lang.String str34 = commApplication31.commOnlySecond(str_array33);
    java.lang.String str35 = calApplication25.printCalForYear(str_array33);
    java.util.List list36 = sortApplication19.sortNumbersSpecialChars(str_array33);
    java.lang.String str37 = bcApplication18.notEqual(str_array33);
    java.util.List list38 = sortApplication0.sortSimpleNumbers(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array42 = new java.lang.String[] { "hi!" };
    java.lang.String str43 = commApplication40.commOnlySecond(str_array42);
    java.lang.String str44 = calApplication39.printCalForYear(str_array42);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array47 = new java.lang.String[] { "hi!" };
    java.lang.String str48 = commApplication45.commOnlySecond(str_array47);
    java.lang.String str49 = calApplication39.printCalForYear(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication50 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication51 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array54 = new java.lang.String[] { "" };
    java.lang.String str55 = calApplication52.printCalForYearMondayFirst(str_array54);
    java.util.List list56 = sortApplication51.sortCapitalNumbersSpecialChars(str_array54);
    java.util.List list57 = sortApplication50.sortSimpleSpecialChars(str_array54);
    java.lang.String str58 = calApplication39.printCal(str_array54);
    java.util.List list59 = sortApplication0.sortStringsCapital(str_array54);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication60 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array63 = new java.lang.String[] { "" };
    java.lang.String str64 = calApplication61.printCalForYearMondayFirst(str_array63);
    java.util.List list65 = sortApplication60.sortCapitalNumbersSpecialChars(str_array63);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication66 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication67 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array69 = new java.lang.String[] { "hi!" };
    java.lang.String str70 = commApplication67.commOnlySecond(str_array69);
    java.lang.String str71 = calApplication66.printCalForYear(str_array69);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication72 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array74 = new java.lang.String[] { "hi!" };
    java.lang.String str75 = commApplication72.commOnlySecond(str_array74);
    java.lang.String str76 = calApplication66.printCalForYear(str_array74);
    java.util.List list77 = sortApplication60.sortNumbersSpecialChars(str_array74);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication78 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication79 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array81 = new java.lang.String[] { "hi!" };
    java.lang.String str82 = commApplication79.commOnlySecond(str_array81);
    java.lang.String str83 = calApplication78.printCalForYear(str_array81);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication84 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array86 = new java.lang.String[] { "hi!" };
    java.lang.String str87 = commApplication84.commOnlySecond(str_array86);
    java.lang.String str88 = calApplication78.printCalForYear(str_array86);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication89 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication90 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication91 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array93 = new java.lang.String[] { "" };
    java.lang.String str94 = calApplication91.printCalForYearMondayFirst(str_array93);
    java.util.List list95 = sortApplication90.sortCapitalNumbersSpecialChars(str_array93);
    java.util.List list96 = sortApplication89.sortSimpleSpecialChars(str_array93);
    java.lang.String str97 = calApplication78.printCal(str_array93);
    java.util.List list98 = sortApplication60.sortStringsSimple(str_array93);
    java.util.List list99 = sortApplication0.sortSimpleCapital(str_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str15.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str43.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str48.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str70.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str75.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str82.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str87.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list99);

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test183"); }


    sg.edu.nus.comp.cs4218.impl.app.HeadApplication headApplication0 = new sg.edu.nus.comp.cs4218.impl.app.HeadApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array2 = null;
    java.lang.String str3 = calApplication1.printCalForMonthYear(str_array2);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication4 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array7 = new java.lang.String[] { "hi!" };
    java.lang.String str8 = commApplication5.commOnlySecond(str_array7);
    java.lang.String str9 = calApplication4.printCalForYear(str_array7);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array12 = new java.lang.String[] { "" };
    java.lang.String str13 = calApplication10.printCalForYearMondayFirst(str_array12);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "hi!" };
    java.lang.String str17 = commApplication14.commOnlySecond(str_array16);
    java.lang.String str18 = calApplication10.printCalWithMondayFirst(str_array16);
    java.lang.String str19 = calApplication4.printCalWithMondayFirst(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = calApplication20.printCalForYearMondayFirst(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = calApplication24.printCalForYearMondayFirst(str_array26);
    java.lang.String str28 = calApplication20.printCal(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "hi!" };
    java.lang.String str33 = commApplication30.commOnlySecond(str_array32);
    java.lang.String str34 = calApplication29.printCalForYear(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array37 = new java.lang.String[] { "hi!" };
    java.lang.String str38 = commApplication35.commOnlySecond(str_array37);
    java.lang.String str39 = calApplication29.printCalForYear(str_array37);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication40 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication41 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array44 = new java.lang.String[] { "" };
    java.lang.String str45 = calApplication42.printCalForYearMondayFirst(str_array44);
    java.util.List list46 = sortApplication41.sortCapitalNumbersSpecialChars(str_array44);
    java.util.List list47 = sortApplication40.sortSimpleSpecialChars(str_array44);
    java.lang.String str48 = calApplication29.printCal(str_array44);
    java.lang.String str49 = calApplication20.printCalForMonthYear(str_array44);
    java.lang.String str50 = calApplication4.printCal(str_array44);
    java.io.InputStream inputStream51 = null;
    java.io.OutputStream outputStream52 = null;
    calApplication1.run(str_array44, inputStream51, outputStream52);
    java.io.InputStream inputStream54 = null;
    java.io.OutputStream outputStream55 = null;
    // The following exception was thrown during execution in test generation
    try {
      headApplication0.run(str_array44, inputStream54, outputStream55);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.HeadException");
    } catch (sg.edu.nus.comp.cs4218.exception.HeadException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.HeadException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.HeadException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str8.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str17.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str33.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str38.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test184"); }


    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array2 = new java.lang.String[] { "hi!" };
    java.lang.String str3 = commApplication0.commOnlySecond(str_array2);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication4 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "hi!" };
    java.lang.String str9 = commApplication6.commOnlySecond(str_array8);
    java.lang.String str10 = calApplication5.printCalForYear(str_array8);
    java.lang.String str11 = commApplication4.commOnlySecond(str_array8);
    java.lang.String str12 = commApplication0.commOnlySecond(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication13 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "" };
    java.lang.String str17 = calApplication14.printCalForYearMondayFirst(str_array16);
    java.util.List list18 = sortApplication13.sortCapitalNumbersSpecialChars(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "hi!" };
    java.lang.String str23 = commApplication20.commOnlySecond(str_array22);
    java.lang.String str24 = calApplication19.printCalForYear(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "hi!" };
    java.lang.String str28 = commApplication25.commOnlySecond(str_array27);
    java.lang.String str29 = calApplication19.printCalForYear(str_array27);
    java.util.List list30 = sortApplication13.sortNumbersSpecialChars(str_array27);
    java.lang.String str31 = commApplication0.commBothMathches(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "" };
    java.lang.String str36 = calApplication33.printCalForYearMondayFirst(str_array35);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "" };
    java.lang.String str40 = calApplication37.printCalForYearMondayFirst(str_array39);
    java.lang.String str41 = calApplication33.printCal(str_array39);
    java.lang.String str42 = calApplication32.printCal(str_array39);
    java.io.InputStream inputStream43 = null;
    java.io.OutputStream outputStream44 = null;
    // The following exception was thrown during execution in test generation
    try {
      commApplication0.run(str_array39, inputStream43, outputStream44);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CommException");
    } catch (sg.edu.nus.comp.cs4218.exception.CommException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.CommException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CommException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str3.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str9.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str23.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str28.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str31.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test185"); }


    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array2 = new java.lang.String[] { "hi!" };
    java.lang.String str3 = commApplication0.commOnlySecond(str_array2);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication4 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array7 = new java.lang.String[] { "" };
    java.lang.String str8 = calApplication5.printCalForYearMondayFirst(str_array7);
    java.util.List list9 = sortApplication4.sortCapitalNumbersSpecialChars(str_array7);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication10 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array13 = new java.lang.String[] { "" };
    java.lang.String str14 = calApplication11.printCalForYearMondayFirst(str_array13);
    java.util.List list15 = sortApplication10.sortCapitalNumbersSpecialChars(str_array13);
    java.util.List list16 = sortApplication4.numericalSortSimpleSpecialChars(str_array13);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "hi!" };
    java.lang.String str22 = commApplication19.commOnlySecond(str_array21);
    java.lang.String str23 = calApplication18.printCalForYear(str_array21);
    java.lang.String str24 = commApplication17.commOnlySecond(str_array21);
    java.util.List list25 = sortApplication4.sortAll(str_array21);
    java.lang.String str26 = commApplication0.commOnlyFirst(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array30 = new java.lang.String[] { "hi!" };
    java.lang.String str31 = commApplication28.commOnlySecond(str_array30);
    java.lang.String str32 = calApplication27.printCalForYear(str_array30);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication33 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "" };
    java.lang.String str37 = calApplication34.printCalForYearMondayFirst(str_array36);
    java.util.List list38 = sortApplication33.sortCapitalNumbersSpecialChars(str_array36);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array42 = new java.lang.String[] { "hi!" };
    java.lang.String str43 = commApplication40.commOnlySecond(str_array42);
    java.lang.String str44 = calApplication39.printCalForYear(str_array42);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array47 = new java.lang.String[] { "hi!" };
    java.lang.String str48 = commApplication45.commOnlySecond(str_array47);
    java.lang.String str49 = calApplication39.printCalForYear(str_array47);
    java.util.List list50 = sortApplication33.sortNumbersSpecialChars(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array54 = new java.lang.String[] { "hi!" };
    java.lang.String str55 = commApplication52.commOnlySecond(str_array54);
    java.lang.String str56 = calApplication51.printCalForYear(str_array54);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array59 = new java.lang.String[] { "hi!" };
    java.lang.String str60 = commApplication57.commOnlySecond(str_array59);
    java.lang.String str61 = calApplication51.printCalForYear(str_array59);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication62 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication63 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array66 = new java.lang.String[] { "" };
    java.lang.String str67 = calApplication64.printCalForYearMondayFirst(str_array66);
    java.util.List list68 = sortApplication63.sortCapitalNumbersSpecialChars(str_array66);
    java.util.List list69 = sortApplication62.sortSimpleSpecialChars(str_array66);
    java.lang.String str70 = calApplication51.printCal(str_array66);
    java.util.List list71 = sortApplication33.sortStringsSimple(str_array66);
    java.lang.String str72 = calApplication27.printCalForMonthYearMondayFirst(str_array66);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication73 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication74 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication75 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication76 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array78 = new java.lang.String[] { "hi!" };
    java.lang.String str79 = commApplication76.commOnlySecond(str_array78);
    java.lang.String str80 = calApplication75.printCalForYear(str_array78);
    java.lang.String str81 = commApplication74.commOnlySecond(str_array78);
    java.lang.String str82 = commApplication73.commBothMathches(str_array78);
    java.lang.String str83 = calApplication27.printCal(str_array78);
    java.lang.String str84 = commApplication0.commBothMathches(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str3.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str22.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str24.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str26.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str31.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str43.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str48.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str55.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str60.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str79.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str81.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str82.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str84.equals("comm: terminated with error message comm: file is not readable"));

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test186"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication7.printCalForYear(str_array15);
    java.util.List list18 = sortApplication1.sortNumbersSpecialChars(str_array15);
    java.lang.String str19 = bcApplication0.notEqual(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array23 = new java.lang.String[] { "hi!" };
    java.lang.String str24 = commApplication21.commOnlySecond(str_array23);
    java.lang.String str25 = calApplication20.printCalForYear(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!" };
    java.lang.String str29 = commApplication26.commOnlySecond(str_array28);
    java.lang.String str30 = calApplication20.printCalForYear(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication31 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication32 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "" };
    java.lang.String str36 = calApplication33.printCalForYearMondayFirst(str_array35);
    java.util.List list37 = sortApplication32.sortCapitalNumbersSpecialChars(str_array35);
    java.util.List list38 = sortApplication31.sortSimpleSpecialChars(str_array35);
    java.lang.String str39 = calApplication20.printCal(str_array35);
    java.lang.String str40 = bcApplication0.lessThanOrEqual(str_array35);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication41 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array44 = new java.lang.String[] { "" };
    java.lang.String str45 = calApplication42.printCalForYearMondayFirst(str_array44);
    java.util.List list46 = sortApplication41.sortCapitalNumbersSpecialChars(str_array44);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication47 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array50 = new java.lang.String[] { "" };
    java.lang.String str51 = calApplication48.printCalForYearMondayFirst(str_array50);
    java.util.List list52 = sortApplication47.sortCapitalNumbersSpecialChars(str_array50);
    java.util.List list53 = sortApplication41.numericalSortSimpleSpecialChars(str_array50);
    java.lang.String[] str_array55 = new java.lang.String[] { "" };
    java.util.List list56 = sortApplication41.sortSimpleCapitalSpecialChars(str_array55);
    java.lang.String str57 = bcApplication0.add(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str24.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str57);

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test187"); }


    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array5 = new java.lang.String[] { "hi!" };
    java.lang.String str6 = commApplication3.commOnlySecond(str_array5);
    java.lang.String str7 = calApplication2.printCalForYear(str_array5);
    java.lang.String str8 = commApplication1.commOnlySecond(str_array5);
    java.lang.String str9 = commApplication0.commBothMathches(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication10 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication11 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication12 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "" };
    java.lang.String str16 = calApplication13.printCalForYearMondayFirst(str_array15);
    java.util.List list17 = sortApplication12.sortCapitalNumbersSpecialChars(str_array15);
    java.util.List list18 = sortApplication11.sortSimpleSpecialChars(str_array15);
    java.io.InputStream inputStream19 = null;
    java.io.OutputStream outputStream20 = null;
    bcApplication10.run(str_array15, inputStream19, outputStream20);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication22 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = calApplication24.printCalForYearMondayFirst(str_array26);
    java.util.List list28 = sortApplication23.sortCapitalNumbersSpecialChars(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication29 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "" };
    java.lang.String str33 = calApplication30.printCalForYearMondayFirst(str_array32);
    java.util.List list34 = sortApplication29.sortCapitalNumbersSpecialChars(str_array32);
    java.util.List list35 = sortApplication23.numericalSortSimpleSpecialChars(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "hi!" };
    java.lang.String str41 = commApplication38.commOnlySecond(str_array40);
    java.lang.String str42 = calApplication37.printCalForYear(str_array40);
    java.lang.String str43 = commApplication36.commOnlySecond(str_array40);
    java.util.List list44 = sortApplication23.sortAll(str_array40);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication45 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication46 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array49 = new java.lang.String[] { "" };
    java.lang.String str50 = calApplication47.printCalForYearMondayFirst(str_array49);
    java.util.List list51 = sortApplication46.sortCapitalNumbersSpecialChars(str_array49);
    java.util.List list52 = sortApplication45.sortSimpleSpecialChars(str_array49);
    java.util.List list53 = sortApplication23.numericalSortCapitalSpecialChars(str_array49);
    java.lang.String str54 = bcApplication22.subtract(str_array49);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication55 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array58 = new java.lang.String[] { "" };
    java.lang.String str59 = calApplication56.printCalForYearMondayFirst(str_array58);
    java.util.List list60 = sortApplication55.sortCapitalNumbersSpecialChars(str_array58);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication61 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array64 = new java.lang.String[] { "" };
    java.lang.String str65 = calApplication62.printCalForYearMondayFirst(str_array64);
    java.util.List list66 = sortApplication61.sortCapitalNumbersSpecialChars(str_array64);
    java.util.List list67 = sortApplication55.numericalSortSimpleSpecialChars(str_array64);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication69 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication70 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array72 = new java.lang.String[] { "hi!" };
    java.lang.String str73 = commApplication70.commOnlySecond(str_array72);
    java.lang.String str74 = calApplication69.printCalForYear(str_array72);
    java.lang.String str75 = commApplication68.commOnlySecond(str_array72);
    java.util.List list76 = sortApplication55.sortAll(str_array72);
    java.lang.String str77 = bcApplication22.add(str_array72);
    java.lang.String str78 = bcApplication10.pow(str_array72);
    java.lang.String str79 = commApplication0.commOnlyFirst(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str6.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str8.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str9.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str41.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str43.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str73.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str75.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str79.equals("comm: terminated with error message comm: file is not readable"));

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test188"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    java.lang.String str12 = commApplication5.commOnlySecond(str_array9);
    java.lang.String str13 = commApplication1.commOnlySecond(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication14 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "" };
    java.lang.String str18 = calApplication15.printCalForYearMondayFirst(str_array17);
    java.util.List list19 = sortApplication14.sortCapitalNumbersSpecialChars(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array23 = new java.lang.String[] { "hi!" };
    java.lang.String str24 = commApplication21.commOnlySecond(str_array23);
    java.lang.String str25 = calApplication20.printCalForYear(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!" };
    java.lang.String str29 = commApplication26.commOnlySecond(str_array28);
    java.lang.String str30 = calApplication20.printCalForYear(str_array28);
    java.util.List list31 = sortApplication14.sortNumbersSpecialChars(str_array28);
    java.lang.String str32 = commApplication1.commBothMathches(str_array28);
    java.lang.String str33 = bcApplication0.add(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication34 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication35 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array38 = new java.lang.String[] { "" };
    java.lang.String str39 = calApplication36.printCalForYearMondayFirst(str_array38);
    java.util.List list40 = sortApplication35.sortCapitalNumbersSpecialChars(str_array38);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication41 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array44 = new java.lang.String[] { "" };
    java.lang.String str45 = calApplication42.printCalForYearMondayFirst(str_array44);
    java.util.List list46 = sortApplication41.sortCapitalNumbersSpecialChars(str_array44);
    java.util.List list47 = sortApplication35.numericalSortSimpleSpecialChars(str_array44);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array52 = new java.lang.String[] { "hi!" };
    java.lang.String str53 = commApplication50.commOnlySecond(str_array52);
    java.lang.String str54 = calApplication49.printCalForYear(str_array52);
    java.lang.String str55 = commApplication48.commOnlySecond(str_array52);
    java.util.List list56 = sortApplication35.sortAll(str_array52);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication57 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication58 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication59 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array61 = new java.lang.String[] { "" };
    java.lang.String str62 = calApplication59.printCalForYearMondayFirst(str_array61);
    java.util.List list63 = sortApplication58.sortCapitalNumbersSpecialChars(str_array61);
    java.util.List list64 = sortApplication57.sortSimpleSpecialChars(str_array61);
    java.util.List list65 = sortApplication35.numericalSortCapitalSpecialChars(str_array61);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication66 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication67 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array70 = new java.lang.String[] { "hi!" };
    java.lang.String str71 = commApplication68.commOnlySecond(str_array70);
    java.lang.String str72 = calApplication67.printCalForYear(str_array70);
    java.lang.String str73 = commApplication66.commOnlySecond(str_array70);
    java.util.List list74 = sortApplication35.sortAll(str_array70);
    java.lang.String str75 = bcApplication34.equalEqual(str_array70);
    java.lang.String str76 = bcApplication0.greaterThanOrEqual(str_array70);
    java.lang.String[] str_array77 = null;
    java.lang.String str78 = bcApplication0.multiply(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str24.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str32.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str53.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str55.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str71.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str73.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str78);

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test189"); }


    sg.edu.nus.comp.cs4218.impl.app.HeadApplication headApplication0 = new sg.edu.nus.comp.cs4218.impl.app.HeadApplication();
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication1 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication2 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = calApplication3.printCalForYearMondayFirst(str_array5);
    java.util.List list7 = sortApplication2.sortCapitalNumbersSpecialChars(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication8 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array11 = new java.lang.String[] { "" };
    java.lang.String str12 = calApplication9.printCalForYearMondayFirst(str_array11);
    java.util.List list13 = sortApplication8.sortCapitalNumbersSpecialChars(str_array11);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!" };
    java.lang.String str18 = commApplication15.commOnlySecond(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "hi!" };
    java.lang.String str23 = commApplication20.commOnlySecond(str_array22);
    java.lang.String str24 = calApplication14.printCalForYear(str_array22);
    java.util.List list25 = sortApplication8.sortNumbersSpecialChars(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array29 = new java.lang.String[] { "" };
    java.lang.String str30 = calApplication27.printCalForYearMondayFirst(str_array29);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "" };
    java.lang.String str34 = calApplication31.printCalForYearMondayFirst(str_array33);
    java.lang.String str35 = calApplication27.printCal(str_array33);
    java.lang.String str36 = calApplication26.printCal(str_array33);
    java.util.List list37 = sortApplication8.numericalSortCapitalNumbersSpecialChars(str_array33);
    java.util.List list38 = sortApplication2.numericalSortCapitalNumbersSpecialChars(str_array33);
    java.lang.String[] str_array40 = new java.lang.String[] { "comm: terminated with error message comm: file is not readable" };
    java.util.List list41 = sortApplication2.numericalSortAll(str_array40);
    java.lang.String str42 = bcApplication1.bracket(str_array40);
    java.lang.String[] str_array43 = null;
    java.lang.String str44 = bcApplication1.not(str_array43);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array47 = new java.lang.String[] { "" };
    java.lang.String str48 = calApplication45.printCalForYearMondayFirst(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array51 = new java.lang.String[] { "" };
    java.lang.String str52 = calApplication49.printCalForYearMondayFirst(str_array51);
    java.lang.String str53 = calApplication45.printCal(str_array51);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "hi!" };
    java.lang.String str58 = commApplication55.commOnlySecond(str_array57);
    java.lang.String str59 = calApplication54.printCalForYear(str_array57);
    java.lang.String str60 = calApplication45.printCalForYearMondayFirst(str_array57);
    java.lang.String str61 = bcApplication1.add(str_array57);
    java.io.InputStream inputStream62 = null;
    java.io.OutputStream outputStream63 = null;
    // The following exception was thrown during execution in test generation
    try {
      headApplication0.run(str_array57, inputStream62, outputStream63);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.HeadException");
    } catch (sg.edu.nus.comp.cs4218.exception.HeadException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.HeadException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.HeadException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str23.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str58.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test190"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "" };
    java.lang.String str9 = calApplication6.printCalForYearMondayFirst(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array12 = new java.lang.String[] { "hi!" };
    java.lang.String str13 = commApplication10.commOnlySecond(str_array12);
    java.lang.String str14 = calApplication6.printCalWithMondayFirst(str_array12);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication15 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "" };
    java.lang.String str19 = calApplication16.printCalForYearMondayFirst(str_array18);
    java.util.List list20 = sortApplication15.sortCapitalNumbersSpecialChars(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication21 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array24 = new java.lang.String[] { "" };
    java.lang.String str25 = calApplication22.printCalForYearMondayFirst(str_array24);
    java.util.List list26 = sortApplication21.sortCapitalNumbersSpecialChars(str_array24);
    java.util.List list27 = sortApplication15.numericalSortSimpleSpecialChars(str_array24);
    java.lang.String str28 = calApplication6.printCalForYear(str_array24);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "hi!" };
    java.lang.String str33 = commApplication30.commOnlySecond(str_array32);
    java.lang.String str34 = calApplication29.printCalForYear(str_array32);
    java.lang.String str35 = calApplication6.printCalForYearMondayFirst(str_array32);
    java.util.List list36 = sortApplication0.sortSimpleCapitalNumber(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication37 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "" };
    java.lang.String str41 = calApplication38.printCalForYearMondayFirst(str_array40);
    java.util.List list42 = sortApplication37.sortCapitalNumbersSpecialChars(str_array40);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "hi!" };
    java.lang.String str47 = commApplication44.commOnlySecond(str_array46);
    java.lang.String str48 = calApplication43.printCalForYear(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array51 = new java.lang.String[] { "hi!" };
    java.lang.String str52 = commApplication49.commOnlySecond(str_array51);
    java.lang.String str53 = calApplication43.printCalForYear(str_array51);
    java.util.List list54 = sortApplication37.sortNumbersSpecialChars(str_array51);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication55 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication56 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array59 = new java.lang.String[] { "" };
    java.lang.String str60 = calApplication57.printCalForYearMondayFirst(str_array59);
    java.util.List list61 = sortApplication56.sortCapitalNumbersSpecialChars(str_array59);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication63 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array65 = new java.lang.String[] { "hi!" };
    java.lang.String str66 = commApplication63.commOnlySecond(str_array65);
    java.lang.String str67 = calApplication62.printCalForYear(str_array65);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array70 = new java.lang.String[] { "hi!" };
    java.lang.String str71 = commApplication68.commOnlySecond(str_array70);
    java.lang.String str72 = calApplication62.printCalForYear(str_array70);
    java.util.List list73 = sortApplication56.sortNumbersSpecialChars(str_array70);
    java.lang.String str74 = bcApplication55.notEqual(str_array70);
    java.util.List list75 = sortApplication37.sortSimpleNumbers(str_array70);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication76 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array78 = new java.lang.String[] { "" };
    java.lang.String str79 = calApplication76.printCalForYearMondayFirst(str_array78);
    java.util.List list80 = sortApplication37.numericalSortCapitalNumbers(str_array78);
    java.util.List list81 = sortApplication0.sortSimpleCapital(str_array78);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication82 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication83 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array85 = new java.lang.String[] { "" };
    java.lang.String str86 = calApplication83.printCalForYearMondayFirst(str_array85);
    java.util.List list87 = sortApplication82.sortCapitalNumbersSpecialChars(str_array85);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication88 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication89 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array91 = new java.lang.String[] { "" };
    java.lang.String str92 = calApplication89.printCalForYearMondayFirst(str_array91);
    java.util.List list93 = sortApplication88.sortCapitalNumbersSpecialChars(str_array91);
    java.util.List list94 = sortApplication82.numericalSortSimpleSpecialChars(str_array91);
    java.lang.String[] str_array96 = new java.lang.String[] { "" };
    java.util.List list97 = sortApplication82.sortSimpleCapitalSpecialChars(str_array96);
    java.util.List list98 = sortApplication0.sortCapitalSpecialChars(str_array96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str33.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str47.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str52.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str66.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str71.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list98);

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test191"); }


    sg.edu.nus.comp.cs4218.impl.app.CatApplication catApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CatApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array7 = new java.lang.String[] { "" };
    java.lang.String str8 = calApplication5.printCalForYearMondayFirst(str_array7);
    java.lang.String str9 = calApplication1.printCal(str_array7);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication10 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array13 = new java.lang.String[] { "hi!" };
    java.lang.String str14 = commApplication11.commOnlySecond(str_array13);
    java.util.List list15 = sortApplication10.numericalSortNumbersSpecialChars(str_array13);
    java.lang.String str16 = calApplication1.printCalWithMondayFirst(str_array13);
    java.io.InputStream inputStream17 = null;
    java.io.OutputStream outputStream18 = null;
    // The following exception was thrown during execution in test generation
    try {
      catApplication0.run(str_array13, inputStream17, outputStream18);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CatException");
    } catch (sg.edu.nus.comp.cs4218.exception.CatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.CatException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CatException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str14.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test192"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array14 = new java.lang.String[] { "hi!" };
    java.lang.String str15 = commApplication12.commOnlySecond(str_array14);
    java.lang.String str16 = calApplication6.printCalForYear(str_array14);
    java.util.List list17 = sortApplication0.sortNumbersSpecialChars(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication18 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = calApplication19.printCalForYearMondayFirst(str_array21);
    java.util.List list23 = sortApplication18.sortCapitalNumbersSpecialChars(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication24 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = calApplication25.printCalForYearMondayFirst(str_array27);
    java.util.List list29 = sortApplication24.sortCapitalNumbersSpecialChars(str_array27);
    java.util.List list30 = sortApplication18.numericalSortSimpleSpecialChars(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "hi!" };
    java.lang.String str36 = commApplication33.commOnlySecond(str_array35);
    java.lang.String str37 = calApplication32.printCalForYear(str_array35);
    java.lang.String str38 = commApplication31.commOnlySecond(str_array35);
    java.util.List list39 = sortApplication18.sortAll(str_array35);
    java.util.List list40 = sortApplication0.numericalSortNumbersSpecialChars(str_array35);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "" };
    java.lang.String str44 = calApplication41.printCalForYearMondayFirst(str_array43);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array47 = new java.lang.String[] { "hi!" };
    java.lang.String str48 = commApplication45.commOnlySecond(str_array47);
    java.lang.String str49 = calApplication41.printCalWithMondayFirst(str_array47);
    java.util.List list50 = sortApplication0.numericalSortSimpleSpecialChars(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication51 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array55 = new java.lang.String[] { "" };
    java.lang.String str56 = calApplication53.printCalForYearMondayFirst(str_array55);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array59 = new java.lang.String[] { "" };
    java.lang.String str60 = calApplication57.printCalForYearMondayFirst(str_array59);
    java.lang.String str61 = calApplication53.printCal(str_array59);
    java.lang.String str62 = calApplication52.printCal(str_array59);
    java.lang.String str63 = bcApplication51.negate(str_array59);
    java.util.List list64 = sortApplication0.sortNumbersSpecialChars(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str15.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str36.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str38.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str48.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test193"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array1 = null;
    java.lang.String str2 = calApplication0.printCalForMonthYear(str_array1);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication3 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication4 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array6 = new java.lang.String[] { "" };
    java.lang.String str7 = calApplication4.printCalForYearMondayFirst(str_array6);
    java.util.List list8 = sortApplication3.sortCapitalNumbersSpecialChars(str_array6);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication9 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array12 = new java.lang.String[] { "" };
    java.lang.String str13 = calApplication10.printCalForYearMondayFirst(str_array12);
    java.util.List list14 = sortApplication9.sortCapitalNumbersSpecialChars(str_array12);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "hi!" };
    java.lang.String str19 = commApplication16.commOnlySecond(str_array18);
    java.lang.String str20 = calApplication15.printCalForYear(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array23 = new java.lang.String[] { "hi!" };
    java.lang.String str24 = commApplication21.commOnlySecond(str_array23);
    java.lang.String str25 = calApplication15.printCalForYear(str_array23);
    java.util.List list26 = sortApplication9.sortNumbersSpecialChars(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array30 = new java.lang.String[] { "" };
    java.lang.String str31 = calApplication28.printCalForYearMondayFirst(str_array30);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "" };
    java.lang.String str35 = calApplication32.printCalForYearMondayFirst(str_array34);
    java.lang.String str36 = calApplication28.printCal(str_array34);
    java.lang.String str37 = calApplication27.printCal(str_array34);
    java.util.List list38 = sortApplication9.numericalSortCapitalNumbersSpecialChars(str_array34);
    java.util.List list39 = sortApplication3.numericalSortCapitalNumbersSpecialChars(str_array34);
    java.lang.String[] str_array41 = new java.lang.String[] { "comm: terminated with error message comm: file is not readable" };
    java.util.List list42 = sortApplication3.numericalSortAll(str_array41);
    java.lang.String str43 = calApplication0.printCalForYearMondayFirst(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication44 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication45 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication46 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array49 = new java.lang.String[] { "" };
    java.lang.String str50 = calApplication47.printCalForYearMondayFirst(str_array49);
    java.util.List list51 = sortApplication46.sortCapitalNumbersSpecialChars(str_array49);
    java.util.List list52 = sortApplication45.sortSimpleSpecialChars(str_array49);
    java.lang.String str53 = bcApplication44.lessThan(str_array49);
    java.lang.String str54 = calApplication0.printCalWithMondayFirst(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str24.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test194"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication6 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication12.printCalForYear(str_array15);
    java.lang.String str18 = commApplication11.commOnlySecond(str_array15);
    java.lang.String str19 = commApplication7.commOnlySecond(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication20 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication21 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array24 = new java.lang.String[] { "" };
    java.lang.String str25 = calApplication22.printCalForYearMondayFirst(str_array24);
    java.util.List list26 = sortApplication21.sortCapitalNumbersSpecialChars(str_array24);
    java.util.List list27 = sortApplication20.sortSimpleSpecialChars(str_array24);
    java.lang.String str28 = commApplication7.commAllMatches(str_array24);
    java.lang.String str29 = bcApplication6.lessThan(str_array24);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication30 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "" };
    java.lang.String str34 = calApplication31.printCalForYearMondayFirst(str_array33);
    java.util.List list35 = sortApplication30.sortCapitalNumbersSpecialChars(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "hi!" };
    java.lang.String str40 = commApplication37.commOnlySecond(str_array39);
    java.lang.String str41 = calApplication36.printCalForYear(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array44 = new java.lang.String[] { "hi!" };
    java.lang.String str45 = commApplication42.commOnlySecond(str_array44);
    java.lang.String str46 = calApplication36.printCalForYear(str_array44);
    java.util.List list47 = sortApplication30.sortNumbersSpecialChars(str_array44);
    java.lang.String str48 = bcApplication6.negate(str_array44);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication49 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array52 = new java.lang.String[] { "" };
    java.lang.String str53 = calApplication50.printCalForYearMondayFirst(str_array52);
    java.util.List list54 = sortApplication49.sortCapitalNumbersSpecialChars(str_array52);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication55 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array58 = new java.lang.String[] { "" };
    java.lang.String str59 = calApplication56.printCalForYearMondayFirst(str_array58);
    java.util.List list60 = sortApplication55.sortCapitalNumbersSpecialChars(str_array58);
    java.util.List list61 = sortApplication49.numericalSortSimpleSpecialChars(str_array58);
    java.lang.String[] str_array63 = new java.lang.String[] { "" };
    java.util.List list64 = sortApplication49.sortSimpleCapitalSpecialChars(str_array63);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication65 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication66 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array68 = new java.lang.String[] { "hi!" };
    java.lang.String str69 = commApplication66.commOnlySecond(str_array68);
    java.util.List list70 = sortApplication65.sortSimpleCapitalSpecialChars(str_array68);
    java.util.List list71 = sortApplication49.numericalSortSimpleCapitalSpecialChars(str_array68);
    java.lang.String str72 = bcApplication6.bracket(str_array68);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication73 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array75 = new java.lang.String[] { "" };
    java.lang.String str76 = calApplication73.printCalForYearMondayFirst(str_array75);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication77 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array79 = new java.lang.String[] { "" };
    java.lang.String str80 = calApplication77.printCalForYearMondayFirst(str_array79);
    java.lang.String str81 = calApplication73.printCal(str_array79);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication82 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication83 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array85 = new java.lang.String[] { "hi!" };
    java.lang.String str86 = commApplication83.commOnlySecond(str_array85);
    java.lang.String str87 = calApplication82.printCalForYear(str_array85);
    java.lang.String str88 = calApplication73.printCalForYearMondayFirst(str_array85);
    java.lang.String str89 = bcApplication6.negate(str_array85);
    java.util.List list90 = sortApplication0.numericalSortSimpleCapitalNumber(str_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str28.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str40.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str45.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str69.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str86.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list90);

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test195"); }


    sg.edu.nus.comp.cs4218.impl.app.DateApplication dateApplication0 = new sg.edu.nus.comp.cs4218.impl.app.DateApplication();
    java.lang.String[] str_array1 = null;
    java.io.InputStream inputStream2 = null;
    java.io.OutputStream outputStream3 = null;
    // The following exception was thrown during execution in test generation
    try {
      dateApplication0.run(str_array1, inputStream2, outputStream3);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException");
    } catch (sg.edu.nus.comp.cs4218.exception.DateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.DateException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test196"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "" };
    java.lang.String str9 = calApplication6.printCalForYearMondayFirst(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array12 = new java.lang.String[] { "hi!" };
    java.lang.String str13 = commApplication10.commOnlySecond(str_array12);
    java.lang.String str14 = calApplication6.printCalWithMondayFirst(str_array12);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication15 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "" };
    java.lang.String str19 = calApplication16.printCalForYearMondayFirst(str_array18);
    java.util.List list20 = sortApplication15.sortCapitalNumbersSpecialChars(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication21 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array24 = new java.lang.String[] { "" };
    java.lang.String str25 = calApplication22.printCalForYearMondayFirst(str_array24);
    java.util.List list26 = sortApplication21.sortCapitalNumbersSpecialChars(str_array24);
    java.util.List list27 = sortApplication15.numericalSortSimpleSpecialChars(str_array24);
    java.lang.String str28 = calApplication6.printCalForYear(str_array24);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "hi!" };
    java.lang.String str33 = commApplication30.commOnlySecond(str_array32);
    java.lang.String str34 = calApplication29.printCalForYear(str_array32);
    java.lang.String str35 = calApplication6.printCalForYearMondayFirst(str_array32);
    java.util.List list36 = sortApplication0.sortSimpleCapitalNumber(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication37 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "" };
    java.lang.String str41 = calApplication38.printCalForYearMondayFirst(str_array40);
    java.util.List list42 = sortApplication37.sortCapitalNumbersSpecialChars(str_array40);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "hi!" };
    java.lang.String str47 = commApplication44.commOnlySecond(str_array46);
    java.lang.String str48 = calApplication43.printCalForYear(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array51 = new java.lang.String[] { "hi!" };
    java.lang.String str52 = commApplication49.commOnlySecond(str_array51);
    java.lang.String str53 = calApplication43.printCalForYear(str_array51);
    java.util.List list54 = sortApplication37.sortNumbersSpecialChars(str_array51);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication55 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication56 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array59 = new java.lang.String[] { "" };
    java.lang.String str60 = calApplication57.printCalForYearMondayFirst(str_array59);
    java.util.List list61 = sortApplication56.sortCapitalNumbersSpecialChars(str_array59);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication63 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array65 = new java.lang.String[] { "hi!" };
    java.lang.String str66 = commApplication63.commOnlySecond(str_array65);
    java.lang.String str67 = calApplication62.printCalForYear(str_array65);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array70 = new java.lang.String[] { "hi!" };
    java.lang.String str71 = commApplication68.commOnlySecond(str_array70);
    java.lang.String str72 = calApplication62.printCalForYear(str_array70);
    java.util.List list73 = sortApplication56.sortNumbersSpecialChars(str_array70);
    java.lang.String str74 = bcApplication55.notEqual(str_array70);
    java.util.List list75 = sortApplication37.sortSimpleNumbers(str_array70);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication76 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array78 = new java.lang.String[] { "" };
    java.lang.String str79 = calApplication76.printCalForYearMondayFirst(str_array78);
    java.util.List list80 = sortApplication37.numericalSortCapitalNumbers(str_array78);
    java.util.List list81 = sortApplication0.sortSimpleCapital(str_array78);
    java.lang.String[] str_array82 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list83 = sortApplication0.sortNumbers(str_array82);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str33.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str47.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str52.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str66.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str71.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list81);

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test197"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = calApplication8.printCalForYearMondayFirst(str_array10);
    java.util.List list12 = sortApplication7.sortCapitalNumbersSpecialChars(str_array10);
    java.util.List list13 = sortApplication1.numericalSortSimpleSpecialChars(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "hi!" };
    java.lang.String str19 = commApplication16.commOnlySecond(str_array18);
    java.lang.String str20 = calApplication15.printCalForYear(str_array18);
    java.lang.String str21 = commApplication14.commOnlySecond(str_array18);
    java.util.List list22 = sortApplication1.sortAll(str_array18);
    java.util.List list23 = sortApplication0.sortSimpleCapitalSpecialChars(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "hi!" };
    java.lang.String str28 = commApplication25.commOnlySecond(str_array27);
    java.lang.String str29 = calApplication24.printCalForYear(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "hi!" };
    java.lang.String str33 = commApplication30.commOnlySecond(str_array32);
    java.lang.String str34 = calApplication24.printCalForYear(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication35 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array38 = new java.lang.String[] { "" };
    java.lang.String str39 = calApplication36.printCalForYearMondayFirst(str_array38);
    java.util.List list40 = sortApplication35.sortCapitalNumbersSpecialChars(str_array38);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array44 = new java.lang.String[] { "hi!" };
    java.lang.String str45 = commApplication42.commOnlySecond(str_array44);
    java.lang.String str46 = calApplication41.printCalForYear(str_array44);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array49 = new java.lang.String[] { "hi!" };
    java.lang.String str50 = commApplication47.commOnlySecond(str_array49);
    java.lang.String str51 = calApplication41.printCalForYear(str_array49);
    java.util.List list52 = sortApplication35.sortNumbersSpecialChars(str_array49);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array56 = new java.lang.String[] { "" };
    java.lang.String str57 = calApplication54.printCalForYearMondayFirst(str_array56);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array60 = new java.lang.String[] { "" };
    java.lang.String str61 = calApplication58.printCalForYearMondayFirst(str_array60);
    java.lang.String str62 = calApplication54.printCal(str_array60);
    java.lang.String str63 = calApplication53.printCal(str_array60);
    java.util.List list64 = sortApplication35.numericalSortCapitalNumbersSpecialChars(str_array60);
    java.io.InputStream inputStream65 = null;
    java.io.OutputStream outputStream66 = null;
    calApplication24.run(str_array60, inputStream65, outputStream66);
    java.util.List list68 = sortApplication0.numericalSortNumbersSpecialChars(str_array60);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication69 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication70 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication71 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array73 = new java.lang.String[] { "" };
    java.lang.String str74 = calApplication71.printCalForYearMondayFirst(str_array73);
    java.util.List list75 = sortApplication70.sortCapitalNumbersSpecialChars(str_array73);
    java.util.List list76 = sortApplication69.sortSimpleSpecialChars(str_array73);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication77 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication78 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array80 = new java.lang.String[] { "hi!" };
    java.lang.String str81 = commApplication78.commOnlySecond(str_array80);
    java.lang.String str82 = calApplication77.printCalForYear(str_array80);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication83 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array85 = new java.lang.String[] { "" };
    java.lang.String str86 = calApplication83.printCalForYearMondayFirst(str_array85);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication87 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array89 = new java.lang.String[] { "hi!" };
    java.lang.String str90 = commApplication87.commOnlySecond(str_array89);
    java.lang.String str91 = calApplication83.printCalWithMondayFirst(str_array89);
    java.lang.String str92 = calApplication77.printCalWithMondayFirst(str_array89);
    java.util.List list93 = sortApplication69.numericalSortSimpleSpecialChars(str_array89);
    java.util.List list94 = sortApplication0.sortCapitalNumbersSpecialChars(str_array89);
    java.lang.String[] str_array95 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list96 = sortApplication0.numericalSortSimpleSpecialChars(str_array95);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str28.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str33.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str45.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str50.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str81.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str90.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list94);

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test198"); }


    sg.edu.nus.comp.cs4218.impl.app.CatApplication catApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CatApplication();
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication1 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    java.lang.String str13 = commApplication6.commOnlySecond(str_array10);
    java.lang.String str14 = commApplication2.commOnlySecond(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication15 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication16 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "" };
    java.lang.String str20 = calApplication17.printCalForYearMondayFirst(str_array19);
    java.util.List list21 = sortApplication16.sortCapitalNumbersSpecialChars(str_array19);
    java.util.List list22 = sortApplication15.sortSimpleSpecialChars(str_array19);
    java.lang.String str23 = commApplication2.commAllMatches(str_array19);
    java.lang.String str24 = bcApplication1.lessThan(str_array19);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = calApplication25.printCalForYearMondayFirst(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array31 = new java.lang.String[] { "" };
    java.lang.String str32 = calApplication29.printCalForYearMondayFirst(str_array31);
    java.lang.String str33 = calApplication25.printCal(str_array31);
    java.lang.String str34 = bcApplication1.and(str_array31);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array38 = new java.lang.String[] { "hi!" };
    java.lang.String str39 = commApplication36.commOnlySecond(str_array38);
    java.lang.String str40 = calApplication35.printCalForYear(str_array38);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "hi!" };
    java.lang.String str44 = commApplication41.commOnlySecond(str_array43);
    java.lang.String str45 = calApplication35.printCalForYear(str_array43);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication46 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array49 = new java.lang.String[] { "" };
    java.lang.String str50 = calApplication47.printCalForYearMondayFirst(str_array49);
    java.util.List list51 = sortApplication46.sortCapitalNumbersSpecialChars(str_array49);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array55 = new java.lang.String[] { "hi!" };
    java.lang.String str56 = commApplication53.commOnlySecond(str_array55);
    java.lang.String str57 = calApplication52.printCalForYear(str_array55);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array60 = new java.lang.String[] { "hi!" };
    java.lang.String str61 = commApplication58.commOnlySecond(str_array60);
    java.lang.String str62 = calApplication52.printCalForYear(str_array60);
    java.util.List list63 = sortApplication46.sortNumbersSpecialChars(str_array60);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication65 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array67 = new java.lang.String[] { "" };
    java.lang.String str68 = calApplication65.printCalForYearMondayFirst(str_array67);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication69 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array71 = new java.lang.String[] { "" };
    java.lang.String str72 = calApplication69.printCalForYearMondayFirst(str_array71);
    java.lang.String str73 = calApplication65.printCal(str_array71);
    java.lang.String str74 = calApplication64.printCal(str_array71);
    java.util.List list75 = sortApplication46.numericalSortCapitalNumbersSpecialChars(str_array71);
    java.io.InputStream inputStream76 = null;
    java.io.OutputStream outputStream77 = null;
    calApplication35.run(str_array71, inputStream76, outputStream77);
    java.lang.String str79 = bcApplication1.greaterThan(str_array71);
    java.io.InputStream inputStream80 = null;
    java.io.OutputStream outputStream81 = null;
    // The following exception was thrown during execution in test generation
    try {
      catApplication0.run(str_array71, inputStream80, outputStream81);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CatException");
    } catch (sg.edu.nus.comp.cs4218.exception.CatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.CatException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CatException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str14.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str23.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str44.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str56.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str61.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str79);

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test199"); }


    sg.edu.nus.comp.cs4218.impl.app.TailApplication tailApplication0 = new sg.edu.nus.comp.cs4218.impl.app.TailApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    java.lang.String str6 = calApplication1.printCalForYear(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array13 = new java.lang.String[] { "hi!" };
    java.lang.String str14 = commApplication11.commOnlySecond(str_array13);
    java.lang.String str15 = calApplication7.printCalWithMondayFirst(str_array13);
    java.lang.String str16 = calApplication1.printCalWithMondayFirst(str_array13);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "" };
    java.lang.String str20 = calApplication17.printCalForYearMondayFirst(str_array19);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array23 = new java.lang.String[] { "" };
    java.lang.String str24 = calApplication21.printCalForYearMondayFirst(str_array23);
    java.lang.String str25 = calApplication17.printCal(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array29 = new java.lang.String[] { "hi!" };
    java.lang.String str30 = commApplication27.commOnlySecond(str_array29);
    java.lang.String str31 = calApplication26.printCalForYear(str_array29);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "hi!" };
    java.lang.String str35 = commApplication32.commOnlySecond(str_array34);
    java.lang.String str36 = calApplication26.printCalForYear(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication37 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication38 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array41 = new java.lang.String[] { "" };
    java.lang.String str42 = calApplication39.printCalForYearMondayFirst(str_array41);
    java.util.List list43 = sortApplication38.sortCapitalNumbersSpecialChars(str_array41);
    java.util.List list44 = sortApplication37.sortSimpleSpecialChars(str_array41);
    java.lang.String str45 = calApplication26.printCal(str_array41);
    java.lang.String str46 = calApplication17.printCalForMonthYear(str_array41);
    java.lang.String str47 = calApplication1.printCal(str_array41);
    java.io.InputStream inputStream48 = null;
    java.io.OutputStream outputStream49 = null;
    // The following exception was thrown during execution in test generation
    try {
      tailApplication0.run(str_array41, inputStream48, outputStream49);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException");
    } catch (sg.edu.nus.comp.cs4218.exception.TailException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.TailException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str14.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str30.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str35.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test200"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = calApplication8.printCalForYearMondayFirst(str_array10);
    java.util.List list12 = sortApplication7.sortCapitalNumbersSpecialChars(str_array10);
    java.util.List list13 = sortApplication1.numericalSortSimpleSpecialChars(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "hi!" };
    java.lang.String str19 = commApplication16.commOnlySecond(str_array18);
    java.lang.String str20 = calApplication15.printCalForYear(str_array18);
    java.lang.String str21 = commApplication14.commOnlySecond(str_array18);
    java.util.List list22 = sortApplication1.sortAll(str_array18);
    java.util.List list23 = sortApplication0.sortSimpleCapitalSpecialChars(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array25 = null;
    java.lang.String str26 = calApplication24.printCalForMonthYear(str_array25);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array30 = new java.lang.String[] { "hi!" };
    java.lang.String str31 = commApplication28.commOnlySecond(str_array30);
    java.lang.String str32 = calApplication27.printCalForYear(str_array30);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "" };
    java.lang.String str36 = calApplication33.printCalForYearMondayFirst(str_array35);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "hi!" };
    java.lang.String str40 = commApplication37.commOnlySecond(str_array39);
    java.lang.String str41 = calApplication33.printCalWithMondayFirst(str_array39);
    java.lang.String str42 = calApplication27.printCalWithMondayFirst(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array45 = new java.lang.String[] { "" };
    java.lang.String str46 = calApplication43.printCalForYearMondayFirst(str_array45);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array49 = new java.lang.String[] { "" };
    java.lang.String str50 = calApplication47.printCalForYearMondayFirst(str_array49);
    java.lang.String str51 = calApplication43.printCal(str_array49);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array55 = new java.lang.String[] { "hi!" };
    java.lang.String str56 = commApplication53.commOnlySecond(str_array55);
    java.lang.String str57 = calApplication52.printCalForYear(str_array55);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array60 = new java.lang.String[] { "hi!" };
    java.lang.String str61 = commApplication58.commOnlySecond(str_array60);
    java.lang.String str62 = calApplication52.printCalForYear(str_array60);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication63 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication64 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication65 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array67 = new java.lang.String[] { "" };
    java.lang.String str68 = calApplication65.printCalForYearMondayFirst(str_array67);
    java.util.List list69 = sortApplication64.sortCapitalNumbersSpecialChars(str_array67);
    java.util.List list70 = sortApplication63.sortSimpleSpecialChars(str_array67);
    java.lang.String str71 = calApplication52.printCal(str_array67);
    java.lang.String str72 = calApplication43.printCalForMonthYear(str_array67);
    java.lang.String str73 = calApplication27.printCal(str_array67);
    java.io.InputStream inputStream74 = null;
    java.io.OutputStream outputStream75 = null;
    calApplication24.run(str_array67, inputStream74, outputStream75);
    java.util.List list77 = sortApplication0.sortSpecialChars(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str31.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str40.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str56.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str61.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test201"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    java.lang.String str5 = calApplication0.printCalForYear(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication12.printCalForYear(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!" };
    java.lang.String str21 = commApplication18.commOnlySecond(str_array20);
    java.lang.String str22 = calApplication12.printCalForYear(str_array20);
    java.util.List list23 = sortApplication6.sortNumbersSpecialChars(str_array20);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "hi!" };
    java.lang.String str28 = commApplication25.commOnlySecond(str_array27);
    java.lang.String str29 = calApplication24.printCalForYear(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "hi!" };
    java.lang.String str33 = commApplication30.commOnlySecond(str_array32);
    java.lang.String str34 = calApplication24.printCalForYear(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication35 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication36 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "" };
    java.lang.String str40 = calApplication37.printCalForYearMondayFirst(str_array39);
    java.util.List list41 = sortApplication36.sortCapitalNumbersSpecialChars(str_array39);
    java.util.List list42 = sortApplication35.sortSimpleSpecialChars(str_array39);
    java.lang.String str43 = calApplication24.printCal(str_array39);
    java.util.List list44 = sortApplication6.sortStringsSimple(str_array39);
    java.lang.String str45 = calApplication0.printCalForMonthYearMondayFirst(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication46 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array49 = new java.lang.String[] { "" };
    java.lang.String str50 = calApplication47.printCalForYearMondayFirst(str_array49);
    java.util.List list51 = sortApplication46.sortCapitalNumbersSpecialChars(str_array49);
    java.io.InputStream inputStream52 = null;
    java.io.OutputStream outputStream53 = null;
    calApplication0.run(str_array49, inputStream52, outputStream53);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication55 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication56 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication57 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array60 = new java.lang.String[] { "" };
    java.lang.String str61 = calApplication58.printCalForYearMondayFirst(str_array60);
    java.util.List list62 = sortApplication57.sortCapitalNumbersSpecialChars(str_array60);
    java.util.List list63 = sortApplication56.sortSimpleSpecialChars(str_array60);
    java.io.InputStream inputStream64 = null;
    java.io.OutputStream outputStream65 = null;
    bcApplication55.run(str_array60, inputStream64, outputStream65);
    java.lang.String str67 = calApplication0.printCalWithMondayFirst(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str28.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str33.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test202"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    java.util.List list5 = sortApplication0.sortSimpleCapitalSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array13 = new java.lang.String[] { "" };
    java.lang.String str14 = calApplication11.printCalForYearMondayFirst(str_array13);
    java.lang.String str15 = calApplication7.printCal(str_array13);
    java.lang.String str16 = calApplication6.printCal(str_array13);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "hi!" };
    java.lang.String str23 = commApplication20.commOnlySecond(str_array22);
    java.lang.String str24 = calApplication19.printCalForYear(str_array22);
    java.lang.String str25 = commApplication18.commOnlySecond(str_array22);
    java.lang.String str26 = commApplication17.commBothMathches(str_array22);
    java.lang.String str27 = calApplication6.printCalForYear(str_array22);
    java.util.List list28 = sortApplication0.sortSimpleCapitalNumber(str_array22);
    java.lang.String[] str_array29 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list30 = sortApplication0.numericalSortCapitalNumbers(str_array29);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str23.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str25.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str26.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test203"); }


    sg.edu.nus.comp.cs4218.impl.app.CatApplication catApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CatApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    java.util.List list6 = sortApplication1.sortSimpleCapitalSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication8 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array11 = new java.lang.String[] { "" };
    java.lang.String str12 = calApplication9.printCalForYearMondayFirst(str_array11);
    java.util.List list13 = sortApplication8.sortCapitalNumbersSpecialChars(str_array11);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication14 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "" };
    java.lang.String str18 = calApplication15.printCalForYearMondayFirst(str_array17);
    java.util.List list19 = sortApplication14.sortCapitalNumbersSpecialChars(str_array17);
    java.util.List list20 = sortApplication8.numericalSortSimpleSpecialChars(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array25 = new java.lang.String[] { "hi!" };
    java.lang.String str26 = commApplication23.commOnlySecond(str_array25);
    java.lang.String str27 = calApplication22.printCalForYear(str_array25);
    java.lang.String str28 = commApplication21.commOnlySecond(str_array25);
    java.util.List list29 = sortApplication8.sortAll(str_array25);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication30 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication31 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "" };
    java.lang.String str35 = calApplication32.printCalForYearMondayFirst(str_array34);
    java.util.List list36 = sortApplication31.sortCapitalNumbersSpecialChars(str_array34);
    java.util.List list37 = sortApplication30.sortSimpleSpecialChars(str_array34);
    java.util.List list38 = sortApplication8.numericalSortCapitalSpecialChars(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "hi!" };
    java.lang.String str44 = commApplication41.commOnlySecond(str_array43);
    java.lang.String str45 = calApplication40.printCalForYear(str_array43);
    java.lang.String str46 = commApplication39.commOnlySecond(str_array43);
    java.util.List list47 = sortApplication8.sortAll(str_array43);
    java.lang.String str48 = calApplication7.printCalForYearMondayFirst(str_array43);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication49 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication50 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array53 = new java.lang.String[] { "" };
    java.lang.String str54 = calApplication51.printCalForYearMondayFirst(str_array53);
    java.util.List list55 = sortApplication50.sortCapitalNumbersSpecialChars(str_array53);
    java.util.List list56 = sortApplication49.sortSimpleSpecialChars(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication57 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array60 = new java.lang.String[] { "hi!" };
    java.lang.String str61 = commApplication58.commOnlySecond(str_array60);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication63 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array66 = new java.lang.String[] { "hi!" };
    java.lang.String str67 = commApplication64.commOnlySecond(str_array66);
    java.lang.String str68 = calApplication63.printCalForYear(str_array66);
    java.lang.String str69 = commApplication62.commOnlySecond(str_array66);
    java.lang.String str70 = commApplication58.commOnlySecond(str_array66);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication71 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication72 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication73 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array75 = new java.lang.String[] { "" };
    java.lang.String str76 = calApplication73.printCalForYearMondayFirst(str_array75);
    java.util.List list77 = sortApplication72.sortCapitalNumbersSpecialChars(str_array75);
    java.util.List list78 = sortApplication71.sortSimpleSpecialChars(str_array75);
    java.lang.String str79 = commApplication58.commAllMatches(str_array75);
    java.lang.String str80 = bcApplication57.lessThan(str_array75);
    java.util.List list81 = sortApplication49.sortSimpleCapital(str_array75);
    java.io.InputStream inputStream82 = null;
    java.io.OutputStream outputStream83 = null;
    calApplication7.run(str_array75, inputStream82, outputStream83);
    java.util.List list85 = sortApplication1.sortStringsCapital(str_array75);
    java.io.InputStream inputStream86 = null;
    java.io.OutputStream outputStream87 = null;
    // The following exception was thrown during execution in test generation
    try {
      catApplication0.run(str_array75, inputStream86, outputStream87);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CatException");
    } catch (sg.edu.nus.comp.cs4218.exception.CatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.CatException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CatException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str26.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str28.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str44.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str46.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str61.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str67.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str69.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str70.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str79.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list85);

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test204"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array2 = new java.lang.String[] { "" };
    java.lang.String str3 = calApplication0.printCalForYearMondayFirst(str_array2);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication4 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array7 = new java.lang.String[] { "" };
    java.lang.String str8 = calApplication5.printCalForYearMondayFirst(str_array7);
    java.util.List list9 = sortApplication4.sortCapitalNumbersSpecialChars(str_array7);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array13 = new java.lang.String[] { "hi!" };
    java.lang.String str14 = commApplication11.commOnlySecond(str_array13);
    java.lang.String str15 = calApplication10.printCalForYear(str_array13);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "hi!" };
    java.lang.String str19 = commApplication16.commOnlySecond(str_array18);
    java.lang.String str20 = calApplication10.printCalForYear(str_array18);
    java.util.List list21 = sortApplication4.sortNumbersSpecialChars(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array25 = new java.lang.String[] { "" };
    java.lang.String str26 = calApplication23.printCalForYearMondayFirst(str_array25);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array29 = new java.lang.String[] { "" };
    java.lang.String str30 = calApplication27.printCalForYearMondayFirst(str_array29);
    java.lang.String str31 = calApplication23.printCal(str_array29);
    java.lang.String str32 = calApplication22.printCal(str_array29);
    java.util.List list33 = sortApplication4.numericalSortCapitalNumbersSpecialChars(str_array29);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication34 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array37 = new java.lang.String[] { "" };
    java.lang.String str38 = calApplication35.printCalForYearMondayFirst(str_array37);
    java.util.List list39 = sortApplication34.sortCapitalNumbersSpecialChars(str_array37);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication40 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "" };
    java.lang.String str44 = calApplication41.printCalForYearMondayFirst(str_array43);
    java.util.List list45 = sortApplication40.sortCapitalNumbersSpecialChars(str_array43);
    java.util.List list46 = sortApplication34.numericalSortSimpleSpecialChars(str_array43);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array51 = new java.lang.String[] { "hi!" };
    java.lang.String str52 = commApplication49.commOnlySecond(str_array51);
    java.lang.String str53 = calApplication48.printCalForYear(str_array51);
    java.lang.String str54 = commApplication47.commOnlySecond(str_array51);
    java.util.List list55 = sortApplication34.sortAll(str_array51);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication56 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array59 = new java.lang.String[] { "" };
    java.lang.String str60 = calApplication57.printCalForYearMondayFirst(str_array59);
    java.util.List list61 = sortApplication56.sortCapitalNumbersSpecialChars(str_array59);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication62 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication63 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array65 = new java.lang.String[] { "" };
    java.lang.String str66 = calApplication63.printCalForYearMondayFirst(str_array65);
    java.util.List list67 = sortApplication62.sortCapitalNumbersSpecialChars(str_array65);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication69 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array71 = new java.lang.String[] { "hi!" };
    java.lang.String str72 = commApplication69.commOnlySecond(str_array71);
    java.lang.String str73 = calApplication68.printCalForYear(str_array71);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication74 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array76 = new java.lang.String[] { "hi!" };
    java.lang.String str77 = commApplication74.commOnlySecond(str_array76);
    java.lang.String str78 = calApplication68.printCalForYear(str_array76);
    java.util.List list79 = sortApplication62.sortNumbersSpecialChars(str_array76);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication80 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication81 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array83 = new java.lang.String[] { "" };
    java.lang.String str84 = calApplication81.printCalForYearMondayFirst(str_array83);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication85 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array87 = new java.lang.String[] { "" };
    java.lang.String str88 = calApplication85.printCalForYearMondayFirst(str_array87);
    java.lang.String str89 = calApplication81.printCal(str_array87);
    java.lang.String str90 = calApplication80.printCal(str_array87);
    java.util.List list91 = sortApplication62.numericalSortCapitalNumbersSpecialChars(str_array87);
    java.util.List list92 = sortApplication56.numericalSortCapitalNumbersSpecialChars(str_array87);
    java.util.List list93 = sortApplication34.numericalSortCapitalSpecialChars(str_array87);
    java.util.List list94 = sortApplication4.numericalSortAll(str_array87);
    java.lang.String str95 = calApplication0.printCalForYear(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str14.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str52.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str54.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str72.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str77.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str95);

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test205"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    java.util.List list12 = sortApplication0.numericalSortSimpleSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!" };
    java.lang.String str18 = commApplication15.commOnlySecond(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    java.lang.String str20 = commApplication13.commOnlySecond(str_array17);
    java.util.List list21 = sortApplication0.sortAll(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication22 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = calApplication24.printCalForYearMondayFirst(str_array26);
    java.util.List list28 = sortApplication23.sortCapitalNumbersSpecialChars(str_array26);
    java.util.List list29 = sortApplication22.sortSimpleSpecialChars(str_array26);
    java.util.List list30 = sortApplication0.numericalSortCapitalSpecialChars(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication31 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication32 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "" };
    java.lang.String str36 = calApplication33.printCalForYearMondayFirst(str_array35);
    java.util.List list37 = sortApplication32.sortCapitalNumbersSpecialChars(str_array35);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication38 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array41 = new java.lang.String[] { "" };
    java.lang.String str42 = calApplication39.printCalForYearMondayFirst(str_array41);
    java.util.List list43 = sortApplication38.sortCapitalNumbersSpecialChars(str_array41);
    java.util.List list44 = sortApplication32.numericalSortSimpleSpecialChars(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array49 = new java.lang.String[] { "hi!" };
    java.lang.String str50 = commApplication47.commOnlySecond(str_array49);
    java.lang.String str51 = calApplication46.printCalForYear(str_array49);
    java.lang.String str52 = commApplication45.commOnlySecond(str_array49);
    java.util.List list53 = sortApplication32.sortAll(str_array49);
    java.util.List list54 = sortApplication31.sortSimpleCapitalSpecialChars(str_array49);
    java.util.List list55 = sortApplication0.numericalSortAll(str_array49);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array58 = new java.lang.String[] { "" };
    java.lang.String str59 = calApplication56.printCalForYearMondayFirst(str_array58);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array62 = new java.lang.String[] { "" };
    java.lang.String str63 = calApplication60.printCalForYearMondayFirst(str_array62);
    java.lang.String str64 = calApplication56.printCal(str_array62);
    java.util.List list65 = sortApplication0.sortSimpleCapitalSpecialChars(str_array62);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication66 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication67 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array70 = new java.lang.String[] { "" };
    java.lang.String str71 = calApplication68.printCalForYearMondayFirst(str_array70);
    java.util.List list72 = sortApplication67.sortCapitalNumbersSpecialChars(str_array70);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication73 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication74 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array76 = new java.lang.String[] { "" };
    java.lang.String str77 = calApplication74.printCalForYearMondayFirst(str_array76);
    java.util.List list78 = sortApplication73.sortCapitalNumbersSpecialChars(str_array76);
    java.util.List list79 = sortApplication67.numericalSortSimpleSpecialChars(str_array76);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication80 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication81 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication82 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array84 = new java.lang.String[] { "hi!" };
    java.lang.String str85 = commApplication82.commOnlySecond(str_array84);
    java.lang.String str86 = calApplication81.printCalForYear(str_array84);
    java.lang.String str87 = commApplication80.commOnlySecond(str_array84);
    java.util.List list88 = sortApplication67.sortAll(str_array84);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication89 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication90 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication91 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array93 = new java.lang.String[] { "" };
    java.lang.String str94 = calApplication91.printCalForYearMondayFirst(str_array93);
    java.util.List list95 = sortApplication90.sortCapitalNumbersSpecialChars(str_array93);
    java.util.List list96 = sortApplication89.sortSimpleSpecialChars(str_array93);
    java.util.List list97 = sortApplication67.numericalSortCapitalSpecialChars(str_array93);
    java.lang.String str98 = bcApplication66.subtract(str_array93);
    java.util.List list99 = sortApplication0.sortSpecialChars(str_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str50.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str52.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str85.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str87.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list99);

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test206"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array2 = new java.lang.String[] { "" };
    java.lang.String str3 = calApplication0.printCalForYearMondayFirst(str_array2);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication4 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array6 = new java.lang.String[] { "" };
    java.lang.String str7 = calApplication4.printCalForYearMondayFirst(str_array6);
    java.lang.String str8 = calApplication0.printCal(str_array6);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array12 = new java.lang.String[] { "hi!" };
    java.lang.String str13 = commApplication10.commOnlySecond(str_array12);
    java.lang.String str14 = calApplication9.printCalForYear(str_array12);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!" };
    java.lang.String str18 = commApplication15.commOnlySecond(str_array17);
    java.lang.String str19 = calApplication9.printCalForYear(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication20 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication21 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array24 = new java.lang.String[] { "" };
    java.lang.String str25 = calApplication22.printCalForYearMondayFirst(str_array24);
    java.util.List list26 = sortApplication21.sortCapitalNumbersSpecialChars(str_array24);
    java.util.List list27 = sortApplication20.sortSimpleSpecialChars(str_array24);
    java.lang.String str28 = calApplication9.printCal(str_array24);
    java.lang.String str29 = calApplication0.printCalForMonthYear(str_array24);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication30 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "hi!" };
    java.lang.String str34 = commApplication31.commOnlySecond(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "hi!" };
    java.lang.String str40 = commApplication37.commOnlySecond(str_array39);
    java.lang.String str41 = calApplication36.printCalForYear(str_array39);
    java.lang.String str42 = commApplication35.commOnlySecond(str_array39);
    java.lang.String str43 = commApplication31.commOnlySecond(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication44 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array47 = new java.lang.String[] { "" };
    java.lang.String str48 = calApplication45.printCalForYearMondayFirst(str_array47);
    java.util.List list49 = sortApplication44.sortCapitalNumbersSpecialChars(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array53 = new java.lang.String[] { "hi!" };
    java.lang.String str54 = commApplication51.commOnlySecond(str_array53);
    java.lang.String str55 = calApplication50.printCalForYear(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array58 = new java.lang.String[] { "hi!" };
    java.lang.String str59 = commApplication56.commOnlySecond(str_array58);
    java.lang.String str60 = calApplication50.printCalForYear(str_array58);
    java.util.List list61 = sortApplication44.sortNumbersSpecialChars(str_array58);
    java.lang.String str62 = commApplication31.commBothMathches(str_array58);
    java.lang.String str63 = bcApplication30.add(str_array58);
    java.lang.String str64 = calApplication0.printCalForYear(str_array58);
    java.lang.String[] str_array65 = null;
    java.lang.String str66 = calApplication0.printCalForYear(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str40.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str42.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str43.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str54.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str59.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str62.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str66);

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test207"); }


    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    java.lang.String str6 = calApplication1.printCalForYear(str_array4);
    java.lang.String str7 = commApplication0.commOnlySecond(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "hi!" };
    java.lang.String str17 = commApplication14.commOnlySecond(str_array16);
    java.lang.String str18 = calApplication13.printCalForYear(str_array16);
    java.lang.String str19 = commApplication12.commOnlySecond(str_array16);
    java.lang.String str20 = commApplication8.commOnlySecond(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication21 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array24 = new java.lang.String[] { "" };
    java.lang.String str25 = calApplication22.printCalForYearMondayFirst(str_array24);
    java.util.List list26 = sortApplication21.sortCapitalNumbersSpecialChars(str_array24);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array30 = new java.lang.String[] { "hi!" };
    java.lang.String str31 = commApplication28.commOnlySecond(str_array30);
    java.lang.String str32 = calApplication27.printCalForYear(str_array30);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "hi!" };
    java.lang.String str36 = commApplication33.commOnlySecond(str_array35);
    java.lang.String str37 = calApplication27.printCalForYear(str_array35);
    java.util.List list38 = sortApplication21.sortNumbersSpecialChars(str_array35);
    java.lang.String str39 = commApplication8.commBothMathches(str_array35);
    java.lang.String str40 = commApplication0.commOnlyFirst(str_array35);
    java.lang.String[] str_array41 = null;
    java.lang.String str42 = commApplication0.commNoMatches(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str7.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str17.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str31.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str36.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str40.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "comm: terminated with error message comm: null"+ "'", str42.equals("comm: terminated with error message comm: null"));

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test208"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array1 = null;
    java.lang.String str2 = calApplication0.printCalForMonthYear(str_array1);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication3 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication4 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array6 = new java.lang.String[] { "" };
    java.lang.String str7 = calApplication4.printCalForYearMondayFirst(str_array6);
    java.util.List list8 = sortApplication3.sortCapitalNumbersSpecialChars(str_array6);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array12 = new java.lang.String[] { "hi!" };
    java.lang.String str13 = commApplication10.commOnlySecond(str_array12);
    java.lang.String str14 = calApplication9.printCalForYear(str_array12);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!" };
    java.lang.String str18 = commApplication15.commOnlySecond(str_array17);
    java.lang.String str19 = calApplication9.printCalForYear(str_array17);
    java.util.List list20 = sortApplication3.sortNumbersSpecialChars(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array24 = new java.lang.String[] { "" };
    java.lang.String str25 = calApplication22.printCalForYearMondayFirst(str_array24);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "" };
    java.lang.String str29 = calApplication26.printCalForYearMondayFirst(str_array28);
    java.lang.String str30 = calApplication22.printCal(str_array28);
    java.lang.String str31 = calApplication21.printCal(str_array28);
    java.util.List list32 = sortApplication3.numericalSortCapitalNumbersSpecialChars(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication33 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "" };
    java.lang.String str37 = calApplication34.printCalForYearMondayFirst(str_array36);
    java.util.List list38 = sortApplication33.sortCapitalNumbersSpecialChars(str_array36);
    java.util.List list39 = sortApplication3.numericalSortNumbersSpecialChars(str_array36);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication40 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "" };
    java.lang.String str44 = calApplication41.printCalForYearMondayFirst(str_array43);
    java.util.List list45 = sortApplication40.sortCapitalNumbersSpecialChars(str_array43);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array49 = new java.lang.String[] { "hi!" };
    java.lang.String str50 = commApplication47.commOnlySecond(str_array49);
    java.lang.String str51 = calApplication46.printCalForYear(str_array49);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array54 = new java.lang.String[] { "hi!" };
    java.lang.String str55 = commApplication52.commOnlySecond(str_array54);
    java.lang.String str56 = calApplication46.printCalForYear(str_array54);
    java.util.List list57 = sortApplication40.sortNumbersSpecialChars(str_array54);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication58 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication59 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array62 = new java.lang.String[] { "" };
    java.lang.String str63 = calApplication60.printCalForYearMondayFirst(str_array62);
    java.util.List list64 = sortApplication59.sortCapitalNumbersSpecialChars(str_array62);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication65 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication66 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array68 = new java.lang.String[] { "hi!" };
    java.lang.String str69 = commApplication66.commOnlySecond(str_array68);
    java.lang.String str70 = calApplication65.printCalForYear(str_array68);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication71 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array73 = new java.lang.String[] { "hi!" };
    java.lang.String str74 = commApplication71.commOnlySecond(str_array73);
    java.lang.String str75 = calApplication65.printCalForYear(str_array73);
    java.util.List list76 = sortApplication59.sortNumbersSpecialChars(str_array73);
    java.lang.String str77 = bcApplication58.notEqual(str_array73);
    java.util.List list78 = sortApplication40.sortSimpleNumbers(str_array73);
    java.util.List list79 = sortApplication3.numericalSortSpecialChars(str_array73);
    java.lang.String str80 = calApplication0.printCalForMonthYearMondayFirst(str_array73);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication81 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication82 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array84 = new java.lang.String[] { "hi!" };
    java.lang.String str85 = commApplication82.commOnlySecond(str_array84);
    java.util.List list86 = sortApplication81.sortSimpleCapitalSpecialChars(str_array84);
    java.io.InputStream inputStream87 = null;
    java.io.OutputStream outputStream88 = null;
    calApplication0.run(str_array84, inputStream87, outputStream88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str50.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str55.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str69.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str74.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str85.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list86);

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test209"); }


    sg.edu.nus.comp.cs4218.impl.app.CatApplication catApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CatApplication();
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication1 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication2 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = calApplication3.printCalForYearMondayFirst(str_array5);
    java.util.List list7 = sortApplication2.sortCapitalNumbersSpecialChars(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication8 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array11 = new java.lang.String[] { "" };
    java.lang.String str12 = calApplication9.printCalForYearMondayFirst(str_array11);
    java.util.List list13 = sortApplication8.sortCapitalNumbersSpecialChars(str_array11);
    java.util.List list14 = sortApplication2.numericalSortSimpleSpecialChars(str_array11);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "hi!" };
    java.lang.String str20 = commApplication17.commOnlySecond(str_array19);
    java.lang.String str21 = calApplication16.printCalForYear(str_array19);
    java.lang.String str22 = commApplication15.commOnlySecond(str_array19);
    java.util.List list23 = sortApplication2.sortAll(str_array19);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication24 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication25 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "" };
    java.lang.String str29 = calApplication26.printCalForYearMondayFirst(str_array28);
    java.util.List list30 = sortApplication25.sortCapitalNumbersSpecialChars(str_array28);
    java.util.List list31 = sortApplication24.sortSimpleSpecialChars(str_array28);
    java.util.List list32 = sortApplication2.numericalSortCapitalSpecialChars(str_array28);
    java.lang.String str33 = bcApplication1.subtract(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication34 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array37 = new java.lang.String[] { "" };
    java.lang.String str38 = calApplication35.printCalForYearMondayFirst(str_array37);
    java.util.List list39 = sortApplication34.sortCapitalNumbersSpecialChars(str_array37);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication40 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "" };
    java.lang.String str44 = calApplication41.printCalForYearMondayFirst(str_array43);
    java.util.List list45 = sortApplication40.sortCapitalNumbersSpecialChars(str_array43);
    java.util.List list46 = sortApplication34.numericalSortSimpleSpecialChars(str_array43);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array51 = new java.lang.String[] { "hi!" };
    java.lang.String str52 = commApplication49.commOnlySecond(str_array51);
    java.lang.String str53 = calApplication48.printCalForYear(str_array51);
    java.lang.String str54 = commApplication47.commOnlySecond(str_array51);
    java.util.List list55 = sortApplication34.sortAll(str_array51);
    java.lang.String str56 = bcApplication1.add(str_array51);
    java.io.InputStream inputStream57 = null;
    java.io.OutputStream outputStream58 = null;
    // The following exception was thrown during execution in test generation
    try {
      catApplication0.run(str_array51, inputStream57, outputStream58);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CatException");
    } catch (sg.edu.nus.comp.cs4218.exception.CatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.CatException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CatException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str22.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str52.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str54.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test210"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    java.lang.String str5 = calApplication0.printCalForYear(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "hi!" };
    java.lang.String str9 = commApplication6.commOnlySecond(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array14 = new java.lang.String[] { "hi!" };
    java.lang.String str15 = commApplication12.commOnlySecond(str_array14);
    java.lang.String str16 = calApplication11.printCalForYear(str_array14);
    java.lang.String str17 = commApplication10.commOnlySecond(str_array14);
    java.lang.String str18 = commApplication6.commOnlySecond(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication19 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = calApplication20.printCalForYearMondayFirst(str_array22);
    java.util.List list24 = sortApplication19.sortCapitalNumbersSpecialChars(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!" };
    java.lang.String str29 = commApplication26.commOnlySecond(str_array28);
    java.lang.String str30 = calApplication25.printCalForYear(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "hi!" };
    java.lang.String str34 = commApplication31.commOnlySecond(str_array33);
    java.lang.String str35 = calApplication25.printCalForYear(str_array33);
    java.util.List list36 = sortApplication19.sortNumbersSpecialChars(str_array33);
    java.lang.String str37 = commApplication6.commBothMathches(str_array33);
    java.lang.String str38 = calApplication0.printCalForMonthYearMondayFirst(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array42 = new java.lang.String[] { "hi!" };
    java.lang.String str43 = commApplication40.commOnlySecond(str_array42);
    java.lang.String str44 = calApplication39.printCalForYear(str_array42);
    java.io.InputStream inputStream45 = null;
    java.io.OutputStream outputStream46 = null;
    calApplication0.run(str_array42, inputStream45, outputStream46);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array51 = new java.lang.String[] { "hi!" };
    java.lang.String str52 = commApplication49.commOnlySecond(str_array51);
    java.lang.String str53 = calApplication48.printCalForYear(str_array51);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array56 = new java.lang.String[] { "hi!" };
    java.lang.String str57 = commApplication54.commOnlySecond(str_array56);
    java.lang.String str58 = calApplication48.printCalForYear(str_array56);
    java.lang.String str59 = calApplication0.printCalForMonthYearMondayFirst(str_array56);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array62 = new java.lang.String[] { "hi!" };
    java.lang.String str63 = commApplication60.commOnlySecond(str_array62);
    java.lang.String str64 = calApplication0.printCalForYear(str_array62);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication65 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication66 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication67 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array69 = new java.lang.String[] { "" };
    java.lang.String str70 = calApplication67.printCalForYearMondayFirst(str_array69);
    java.util.List list71 = sortApplication66.sortCapitalNumbersSpecialChars(str_array69);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication72 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication73 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array75 = new java.lang.String[] { "hi!" };
    java.lang.String str76 = commApplication73.commOnlySecond(str_array75);
    java.lang.String str77 = calApplication72.printCalForYear(str_array75);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication78 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array80 = new java.lang.String[] { "hi!" };
    java.lang.String str81 = commApplication78.commOnlySecond(str_array80);
    java.lang.String str82 = calApplication72.printCalForYear(str_array80);
    java.util.List list83 = sortApplication66.sortNumbersSpecialChars(str_array80);
    java.lang.String str84 = bcApplication65.notEqual(str_array80);
    java.lang.String str85 = calApplication0.printCalForMonthYearMondayFirst(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str9.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str15.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str17.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str37.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str43.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str52.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str57.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str63.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str76.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str81.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str85);

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test211"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    java.util.List list12 = sortApplication0.numericalSortSimpleSpecialChars(str_array9);
    java.lang.String[] str_array14 = new java.lang.String[] { "" };
    java.util.List list15 = sortApplication0.sortSimpleCapitalSpecialChars(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication16 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "hi!" };
    java.lang.String str20 = commApplication17.commOnlySecond(str_array19);
    java.util.List list21 = sortApplication16.sortSimpleCapitalSpecialChars(str_array19);
    java.util.List list22 = sortApplication0.numericalSortSimpleCapitalSpecialChars(str_array19);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication23 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "hi!" };
    java.lang.String str27 = commApplication24.commOnlySecond(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "hi!" };
    java.lang.String str33 = commApplication30.commOnlySecond(str_array32);
    java.lang.String str34 = calApplication29.printCalForYear(str_array32);
    java.lang.String str35 = commApplication28.commOnlySecond(str_array32);
    java.lang.String str36 = commApplication24.commOnlySecond(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication37 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication38 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array41 = new java.lang.String[] { "" };
    java.lang.String str42 = calApplication39.printCalForYearMondayFirst(str_array41);
    java.util.List list43 = sortApplication38.sortCapitalNumbersSpecialChars(str_array41);
    java.util.List list44 = sortApplication37.sortSimpleSpecialChars(str_array41);
    java.lang.String str45 = commApplication24.commAllMatches(str_array41);
    java.lang.String str46 = bcApplication23.lessThan(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array49 = new java.lang.String[] { "" };
    java.lang.String str50 = calApplication47.printCalForYearMondayFirst(str_array49);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array53 = new java.lang.String[] { "" };
    java.lang.String str54 = calApplication51.printCalForYearMondayFirst(str_array53);
    java.lang.String str55 = calApplication47.printCal(str_array53);
    java.lang.String str56 = bcApplication23.and(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication57 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication59 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array61 = new java.lang.String[] { "" };
    java.lang.String str62 = calApplication59.printCalForYearMondayFirst(str_array61);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication63 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array65 = new java.lang.String[] { "" };
    java.lang.String str66 = calApplication63.printCalForYearMondayFirst(str_array65);
    java.lang.String str67 = calApplication59.printCal(str_array65);
    java.lang.String str68 = calApplication58.printCal(str_array65);
    java.lang.String str69 = bcApplication57.negate(str_array65);
    java.lang.String str70 = bcApplication23.pow(str_array65);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication71 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication72 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array74 = new java.lang.String[] { "hi!" };
    java.lang.String str75 = commApplication72.commOnlySecond(str_array74);
    java.lang.String str76 = calApplication71.printCalForYear(str_array74);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication77 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array79 = new java.lang.String[] { "hi!" };
    java.lang.String str80 = commApplication77.commOnlySecond(str_array79);
    java.lang.String str81 = calApplication71.printCalForYear(str_array79);
    java.lang.String str82 = bcApplication23.lessThan(str_array79);
    java.util.List list83 = sortApplication0.numericalSortCapitalNumbersSpecialChars(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str27.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str33.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str35.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str36.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str45.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str75.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str80.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list83);

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test212"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    java.util.List list12 = sortApplication0.numericalSortSimpleSpecialChars(str_array9);
    java.lang.String[] str_array14 = new java.lang.String[] { "" };
    java.util.List list15 = sortApplication0.sortSimpleCapitalSpecialChars(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication16 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "hi!" };
    java.lang.String str20 = commApplication17.commOnlySecond(str_array19);
    java.util.List list21 = sortApplication16.sortSimpleCapitalSpecialChars(str_array19);
    java.util.List list22 = sortApplication0.numericalSortSimpleCapitalSpecialChars(str_array19);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication24 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = calApplication25.printCalForYearMondayFirst(str_array27);
    java.util.List list29 = sortApplication24.sortCapitalNumbersSpecialChars(str_array27);
    java.util.List list30 = sortApplication23.sortSimpleSpecialChars(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "hi!" };
    java.lang.String str35 = commApplication32.commOnlySecond(str_array34);
    java.lang.String str36 = calApplication31.printCalForYear(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "" };
    java.lang.String str40 = calApplication37.printCalForYearMondayFirst(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "hi!" };
    java.lang.String str44 = commApplication41.commOnlySecond(str_array43);
    java.lang.String str45 = calApplication37.printCalWithMondayFirst(str_array43);
    java.lang.String str46 = calApplication31.printCalWithMondayFirst(str_array43);
    java.util.List list47 = sortApplication23.numericalSortSimpleSpecialChars(str_array43);
    java.util.List list48 = sortApplication0.sortSpecialChars(str_array43);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication49 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array52 = new java.lang.String[] { "hi!" };
    java.lang.String str53 = commApplication50.commOnlySecond(str_array52);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array58 = new java.lang.String[] { "hi!" };
    java.lang.String str59 = commApplication56.commOnlySecond(str_array58);
    java.lang.String str60 = calApplication55.printCalForYear(str_array58);
    java.lang.String str61 = commApplication54.commOnlySecond(str_array58);
    java.lang.String str62 = commApplication50.commOnlySecond(str_array58);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication63 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array66 = new java.lang.String[] { "" };
    java.lang.String str67 = calApplication64.printCalForYearMondayFirst(str_array66);
    java.util.List list68 = sortApplication63.sortCapitalNumbersSpecialChars(str_array66);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication69 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication70 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array72 = new java.lang.String[] { "hi!" };
    java.lang.String str73 = commApplication70.commOnlySecond(str_array72);
    java.lang.String str74 = calApplication69.printCalForYear(str_array72);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication75 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array77 = new java.lang.String[] { "hi!" };
    java.lang.String str78 = commApplication75.commOnlySecond(str_array77);
    java.lang.String str79 = calApplication69.printCalForYear(str_array77);
    java.util.List list80 = sortApplication63.sortNumbersSpecialChars(str_array77);
    java.lang.String str81 = commApplication50.commBothMathches(str_array77);
    java.lang.String str82 = bcApplication49.add(str_array77);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication83 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication84 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication85 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication86 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array88 = new java.lang.String[] { "" };
    java.lang.String str89 = calApplication86.printCalForYearMondayFirst(str_array88);
    java.util.List list90 = sortApplication85.sortCapitalNumbersSpecialChars(str_array88);
    java.util.List list91 = sortApplication84.sortSimpleSpecialChars(str_array88);
    java.io.InputStream inputStream92 = null;
    java.io.OutputStream outputStream93 = null;
    bcApplication83.run(str_array88, inputStream92, outputStream93);
    java.lang.String str95 = bcApplication49.equalEqual(str_array88);
    java.util.List list96 = sortApplication0.sortCapitalNumbersSpecialChars(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str35.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str44.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str53.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str59.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str61.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str62.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str73.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str78.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str81.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list96);

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test213"); }


    sg.edu.nus.comp.cs4218.impl.app.FmtApplication fmtApplication0 = new sg.edu.nus.comp.cs4218.impl.app.FmtApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication2 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = calApplication3.printCalForYearMondayFirst(str_array5);
    java.util.List list7 = sortApplication2.sortCapitalNumbersSpecialChars(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication8 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array11 = new java.lang.String[] { "" };
    java.lang.String str12 = calApplication9.printCalForYearMondayFirst(str_array11);
    java.util.List list13 = sortApplication8.sortCapitalNumbersSpecialChars(str_array11);
    java.util.List list14 = sortApplication2.numericalSortSimpleSpecialChars(str_array11);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "hi!" };
    java.lang.String str20 = commApplication17.commOnlySecond(str_array19);
    java.lang.String str21 = calApplication16.printCalForYear(str_array19);
    java.lang.String str22 = commApplication15.commOnlySecond(str_array19);
    java.util.List list23 = sortApplication2.sortAll(str_array19);
    java.util.List list24 = sortApplication1.sortSimpleCapitalSpecialChars(str_array19);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication25 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!" };
    java.lang.String str29 = commApplication26.commOnlySecond(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "hi!" };
    java.lang.String str35 = commApplication32.commOnlySecond(str_array34);
    java.lang.String str36 = calApplication31.printCalForYear(str_array34);
    java.lang.String str37 = commApplication30.commOnlySecond(str_array34);
    java.lang.String str38 = commApplication26.commOnlySecond(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication39 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication40 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "" };
    java.lang.String str44 = calApplication41.printCalForYearMondayFirst(str_array43);
    java.util.List list45 = sortApplication40.sortCapitalNumbersSpecialChars(str_array43);
    java.util.List list46 = sortApplication39.sortSimpleSpecialChars(str_array43);
    java.lang.String str47 = commApplication26.commAllMatches(str_array43);
    java.lang.String str48 = bcApplication25.lessThan(str_array43);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array51 = new java.lang.String[] { "" };
    java.lang.String str52 = calApplication49.printCalForYearMondayFirst(str_array51);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array55 = new java.lang.String[] { "" };
    java.lang.String str56 = calApplication53.printCalForYearMondayFirst(str_array55);
    java.lang.String str57 = calApplication49.printCal(str_array55);
    java.lang.String str58 = bcApplication25.and(str_array55);
    java.util.List list59 = sortApplication1.numericalSortSimpleCapital(str_array55);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array64 = new java.lang.String[] { "hi!" };
    java.lang.String str65 = commApplication62.commOnlySecond(str_array64);
    java.lang.String str66 = calApplication61.printCalForYear(str_array64);
    java.lang.String str67 = commApplication60.commOnlySecond(str_array64);
    java.util.List list68 = sortApplication1.sortCapitalSpecialChars(str_array64);
    java.io.InputStream inputStream69 = null;
    java.io.OutputStream outputStream70 = null;
    // The following exception was thrown during execution in test generation
    try {
      fmtApplication0.run(str_array64, inputStream69, outputStream70);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.FmtException");
    } catch (sg.edu.nus.comp.cs4218.exception.FmtException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.FmtException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.FmtException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str22.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str35.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str37.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str38.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str47.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str65.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str67.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test214"); }


    sg.edu.nus.comp.cs4218.impl.app.CatApplication catApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CatApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication2 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = calApplication3.printCalForYearMondayFirst(str_array5);
    java.util.List list7 = sortApplication2.sortCapitalNumbersSpecialChars(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication8 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array11 = new java.lang.String[] { "" };
    java.lang.String str12 = calApplication9.printCalForYearMondayFirst(str_array11);
    java.util.List list13 = sortApplication8.sortCapitalNumbersSpecialChars(str_array11);
    java.util.List list14 = sortApplication2.numericalSortSimpleSpecialChars(str_array11);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "hi!" };
    java.lang.String str20 = commApplication17.commOnlySecond(str_array19);
    java.lang.String str21 = calApplication16.printCalForYear(str_array19);
    java.lang.String str22 = commApplication15.commOnlySecond(str_array19);
    java.util.List list23 = sortApplication2.sortAll(str_array19);
    java.util.List list24 = sortApplication1.sortSimpleCapitalSpecialChars(str_array19);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication25 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "" };
    java.lang.String str29 = calApplication26.printCalForYearMondayFirst(str_array28);
    java.util.List list30 = sortApplication25.sortCapitalNumbersSpecialChars(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "hi!" };
    java.lang.String str35 = commApplication32.commOnlySecond(str_array34);
    java.lang.String str36 = calApplication31.printCalForYear(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "hi!" };
    java.lang.String str40 = commApplication37.commOnlySecond(str_array39);
    java.lang.String str41 = calApplication31.printCalForYear(str_array39);
    java.util.List list42 = sortApplication25.sortNumbersSpecialChars(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication43 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = calApplication44.printCalForYearMondayFirst(str_array46);
    java.util.List list48 = sortApplication43.sortCapitalNumbersSpecialChars(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication49 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array52 = new java.lang.String[] { "" };
    java.lang.String str53 = calApplication50.printCalForYearMondayFirst(str_array52);
    java.util.List list54 = sortApplication49.sortCapitalNumbersSpecialChars(str_array52);
    java.util.List list55 = sortApplication43.numericalSortSimpleSpecialChars(str_array52);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array60 = new java.lang.String[] { "hi!" };
    java.lang.String str61 = commApplication58.commOnlySecond(str_array60);
    java.lang.String str62 = calApplication57.printCalForYear(str_array60);
    java.lang.String str63 = commApplication56.commOnlySecond(str_array60);
    java.util.List list64 = sortApplication43.sortAll(str_array60);
    java.util.List list65 = sortApplication25.numericalSortNumbersSpecialChars(str_array60);
    java.util.List list66 = sortApplication1.numericalSortSimpleNumbersSpecialChars(str_array60);
    java.io.InputStream inputStream67 = null;
    java.io.OutputStream outputStream68 = null;
    // The following exception was thrown during execution in test generation
    try {
      catApplication0.run(str_array60, inputStream67, outputStream68);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CatException");
    } catch (sg.edu.nus.comp.cs4218.exception.CatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.CatException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CatException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str22.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str35.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str40.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str61.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str63.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test215"); }


    sg.edu.nus.comp.cs4218.impl.app.DateApplication dateApplication0 = new sg.edu.nus.comp.cs4218.impl.app.DateApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    java.lang.String str6 = calApplication1.printCalForYear(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication1.printCalForYear(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication12 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication13 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "" };
    java.lang.String str17 = calApplication14.printCalForYearMondayFirst(str_array16);
    java.util.List list18 = sortApplication13.sortCapitalNumbersSpecialChars(str_array16);
    java.util.List list19 = sortApplication12.sortSimpleSpecialChars(str_array16);
    java.lang.String str20 = calApplication1.printCal(str_array16);
    java.io.InputStream inputStream21 = null;
    java.io.OutputStream outputStream22 = null;
    // The following exception was thrown during execution in test generation
    try {
      dateApplication0.run(str_array16, inputStream21, outputStream22);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException");
    } catch (sg.edu.nus.comp.cs4218.exception.DateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.DateException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test216"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    java.lang.String str12 = commApplication5.commOnlySecond(str_array9);
    java.lang.String str13 = commApplication1.commOnlySecond(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication14 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "" };
    java.lang.String str18 = calApplication15.printCalForYearMondayFirst(str_array17);
    java.util.List list19 = sortApplication14.sortCapitalNumbersSpecialChars(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array23 = new java.lang.String[] { "hi!" };
    java.lang.String str24 = commApplication21.commOnlySecond(str_array23);
    java.lang.String str25 = calApplication20.printCalForYear(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!" };
    java.lang.String str29 = commApplication26.commOnlySecond(str_array28);
    java.lang.String str30 = calApplication20.printCalForYear(str_array28);
    java.util.List list31 = sortApplication14.sortNumbersSpecialChars(str_array28);
    java.lang.String str32 = commApplication1.commBothMathches(str_array28);
    java.lang.String str33 = bcApplication0.add(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication34 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication35 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication36 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "" };
    java.lang.String str40 = calApplication37.printCalForYearMondayFirst(str_array39);
    java.util.List list41 = sortApplication36.sortCapitalNumbersSpecialChars(str_array39);
    java.util.List list42 = sortApplication35.sortSimpleSpecialChars(str_array39);
    java.io.InputStream inputStream43 = null;
    java.io.OutputStream outputStream44 = null;
    bcApplication34.run(str_array39, inputStream43, outputStream44);
    java.lang.String str46 = bcApplication0.equalEqual(str_array39);
    java.lang.String[] str_array47 = null;
    java.lang.String str48 = bcApplication0.equalEqual(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array51 = new java.lang.String[] { "hi!" };
    java.lang.String str52 = commApplication49.commOnlySecond(str_array51);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "hi!" };
    java.lang.String str58 = commApplication55.commOnlySecond(str_array57);
    java.lang.String str59 = calApplication54.printCalForYear(str_array57);
    java.lang.String str60 = commApplication53.commOnlySecond(str_array57);
    java.lang.String str61 = commApplication49.commOnlySecond(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication62 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication63 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array66 = new java.lang.String[] { "" };
    java.lang.String str67 = calApplication64.printCalForYearMondayFirst(str_array66);
    java.util.List list68 = sortApplication63.sortCapitalNumbersSpecialChars(str_array66);
    java.util.List list69 = sortApplication62.sortSimpleSpecialChars(str_array66);
    java.lang.String str70 = commApplication49.commAllMatches(str_array66);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication71 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication72 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication73 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array75 = new java.lang.String[] { "" };
    java.lang.String str76 = calApplication73.printCalForYearMondayFirst(str_array75);
    java.util.List list77 = sortApplication72.sortCapitalNumbersSpecialChars(str_array75);
    java.util.List list78 = sortApplication71.sortSimpleSpecialChars(str_array75);
    java.lang.String str79 = commApplication49.commAllMatches(str_array75);
    java.lang.String str80 = bcApplication0.divide(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str24.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str32.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str52.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str58.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str60.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str61.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str70.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str79.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str80);

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test217"); }


    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array2 = new java.lang.String[] { "hi!" };
    java.lang.String str3 = commApplication0.commOnlySecond(str_array2);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication4 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "hi!" };
    java.lang.String str9 = commApplication6.commOnlySecond(str_array8);
    java.lang.String str10 = calApplication5.printCalForYear(str_array8);
    java.lang.String str11 = commApplication4.commOnlySecond(str_array8);
    java.lang.String str12 = commApplication0.commOnlySecond(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication13 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "" };
    java.lang.String str17 = calApplication14.printCalForYearMondayFirst(str_array16);
    java.util.List list18 = sortApplication13.sortCapitalNumbersSpecialChars(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication19 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = calApplication20.printCalForYearMondayFirst(str_array22);
    java.util.List list24 = sortApplication19.sortCapitalNumbersSpecialChars(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!" };
    java.lang.String str29 = commApplication26.commOnlySecond(str_array28);
    java.lang.String str30 = calApplication25.printCalForYear(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "hi!" };
    java.lang.String str34 = commApplication31.commOnlySecond(str_array33);
    java.lang.String str35 = calApplication25.printCalForYear(str_array33);
    java.util.List list36 = sortApplication19.sortNumbersSpecialChars(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "" };
    java.lang.String str41 = calApplication38.printCalForYearMondayFirst(str_array40);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array44 = new java.lang.String[] { "" };
    java.lang.String str45 = calApplication42.printCalForYearMondayFirst(str_array44);
    java.lang.String str46 = calApplication38.printCal(str_array44);
    java.lang.String str47 = calApplication37.printCal(str_array44);
    java.util.List list48 = sortApplication19.numericalSortCapitalNumbersSpecialChars(str_array44);
    java.util.List list49 = sortApplication13.numericalSortCapitalNumbersSpecialChars(str_array44);
    java.lang.String str50 = commApplication0.commOnlySecond(str_array44);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array53 = new java.lang.String[] { "hi!" };
    java.lang.String str54 = commApplication51.commOnlySecond(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication55 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array58 = new java.lang.String[] { "hi!" };
    java.lang.String str59 = commApplication56.commOnlySecond(str_array58);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array64 = new java.lang.String[] { "hi!" };
    java.lang.String str65 = commApplication62.commOnlySecond(str_array64);
    java.lang.String str66 = calApplication61.printCalForYear(str_array64);
    java.lang.String str67 = commApplication60.commOnlySecond(str_array64);
    java.lang.String str68 = commApplication56.commOnlySecond(str_array64);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication69 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication70 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication71 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array73 = new java.lang.String[] { "" };
    java.lang.String str74 = calApplication71.printCalForYearMondayFirst(str_array73);
    java.util.List list75 = sortApplication70.sortCapitalNumbersSpecialChars(str_array73);
    java.util.List list76 = sortApplication69.sortSimpleSpecialChars(str_array73);
    java.lang.String str77 = commApplication56.commAllMatches(str_array73);
    java.lang.String str78 = bcApplication55.lessThan(str_array73);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication79 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication80 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array82 = new java.lang.String[] { "" };
    java.lang.String str83 = calApplication80.printCalForYearMondayFirst(str_array82);
    java.util.List list84 = sortApplication79.sortCapitalNumbersSpecialChars(str_array82);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication85 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication86 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array88 = new java.lang.String[] { "hi!" };
    java.lang.String str89 = commApplication86.commOnlySecond(str_array88);
    java.lang.String str90 = calApplication85.printCalForYear(str_array88);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication91 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array93 = new java.lang.String[] { "hi!" };
    java.lang.String str94 = commApplication91.commOnlySecond(str_array93);
    java.lang.String str95 = calApplication85.printCalForYear(str_array93);
    java.util.List list96 = sortApplication79.sortNumbersSpecialChars(str_array93);
    java.lang.String str97 = bcApplication55.negate(str_array93);
    java.lang.String str98 = commApplication51.commOnlyFirst(str_array93);
    java.lang.String str99 = commApplication0.commBothMathches(str_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str3.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str9.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str50.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str54.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str59.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str65.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str67.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str68.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str77.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str89.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str94 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str94.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str98 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str98.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str99 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str99.equals("comm: terminated with error message comm: file is not readable"));

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test218"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication7.printCalForYear(str_array15);
    java.util.List list18 = sortApplication1.sortNumbersSpecialChars(str_array15);
    java.lang.String str19 = bcApplication0.notEqual(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication20 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication21 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array24 = new java.lang.String[] { "" };
    java.lang.String str25 = calApplication22.printCalForYearMondayFirst(str_array24);
    java.util.List list26 = sortApplication21.sortCapitalNumbersSpecialChars(str_array24);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication27 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array30 = new java.lang.String[] { "" };
    java.lang.String str31 = calApplication28.printCalForYearMondayFirst(str_array30);
    java.util.List list32 = sortApplication27.sortCapitalNumbersSpecialChars(str_array30);
    java.util.List list33 = sortApplication21.numericalSortSimpleSpecialChars(str_array30);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array38 = new java.lang.String[] { "hi!" };
    java.lang.String str39 = commApplication36.commOnlySecond(str_array38);
    java.lang.String str40 = calApplication35.printCalForYear(str_array38);
    java.lang.String str41 = commApplication34.commOnlySecond(str_array38);
    java.util.List list42 = sortApplication21.sortAll(str_array38);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication43 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication44 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array47 = new java.lang.String[] { "" };
    java.lang.String str48 = calApplication45.printCalForYearMondayFirst(str_array47);
    java.util.List list49 = sortApplication44.sortCapitalNumbersSpecialChars(str_array47);
    java.util.List list50 = sortApplication43.sortSimpleSpecialChars(str_array47);
    java.util.List list51 = sortApplication21.numericalSortCapitalSpecialChars(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array56 = new java.lang.String[] { "hi!" };
    java.lang.String str57 = commApplication54.commOnlySecond(str_array56);
    java.lang.String str58 = calApplication53.printCalForYear(str_array56);
    java.lang.String str59 = commApplication52.commOnlySecond(str_array56);
    java.util.List list60 = sortApplication21.sortAll(str_array56);
    java.lang.String str61 = bcApplication20.equalEqual(str_array56);
    java.lang.String str62 = bcApplication0.greaterThanOrEqual(str_array56);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication63 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication64 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication65 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array67 = new java.lang.String[] { "" };
    java.lang.String str68 = calApplication65.printCalForYearMondayFirst(str_array67);
    java.util.List list69 = sortApplication64.sortCapitalNumbersSpecialChars(str_array67);
    java.util.List list70 = sortApplication63.sortSimpleSpecialChars(str_array67);
    java.lang.String str71 = bcApplication0.greaterThan(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str41.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str57.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str59.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str71);

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test219"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = calApplication8.printCalForYearMondayFirst(str_array10);
    java.util.List list12 = sortApplication7.sortCapitalNumbersSpecialChars(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "hi!" };
    java.lang.String str17 = commApplication14.commOnlySecond(str_array16);
    java.lang.String str18 = calApplication13.printCalForYear(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "hi!" };
    java.lang.String str22 = commApplication19.commOnlySecond(str_array21);
    java.lang.String str23 = calApplication13.printCalForYear(str_array21);
    java.util.List list24 = sortApplication7.sortNumbersSpecialChars(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "" };
    java.lang.String str29 = calApplication26.printCalForYearMondayFirst(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "" };
    java.lang.String str33 = calApplication30.printCalForYearMondayFirst(str_array32);
    java.lang.String str34 = calApplication26.printCal(str_array32);
    java.lang.String str35 = calApplication25.printCal(str_array32);
    java.util.List list36 = sortApplication7.numericalSortCapitalNumbersSpecialChars(str_array32);
    java.util.List list37 = sortApplication1.numericalSortCapitalNumbersSpecialChars(str_array32);
    java.lang.String[] str_array39 = new java.lang.String[] { "comm: terminated with error message comm: file is not readable" };
    java.util.List list40 = sortApplication1.numericalSortAll(str_array39);
    java.lang.String str41 = bcApplication0.bracket(str_array39);
    java.lang.String[] str_array42 = null;
    java.lang.String str43 = bcApplication0.not(str_array42);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = calApplication44.printCalForYearMondayFirst(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array50 = new java.lang.String[] { "" };
    java.lang.String str51 = calApplication48.printCalForYearMondayFirst(str_array50);
    java.lang.String str52 = calApplication44.printCal(str_array50);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array56 = new java.lang.String[] { "hi!" };
    java.lang.String str57 = commApplication54.commOnlySecond(str_array56);
    java.lang.String str58 = calApplication53.printCalForYear(str_array56);
    java.lang.String str59 = calApplication44.printCalForYearMondayFirst(str_array56);
    java.lang.String str60 = bcApplication0.add(str_array56);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication61 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array64 = new java.lang.String[] { "" };
    java.lang.String str65 = calApplication62.printCalForYearMondayFirst(str_array64);
    java.util.List list66 = sortApplication61.sortCapitalNumbersSpecialChars(str_array64);
    java.lang.String str67 = bcApplication0.multiply(str_array64);
    java.lang.String[] str_array69 = new java.lang.String[] { "comm: terminated with error message comm: null" };
    java.lang.String str70 = bcApplication0.divide(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str17.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str22.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str57.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test220"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    java.util.List list12 = sortApplication0.numericalSortSimpleSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!" };
    java.lang.String str18 = commApplication15.commOnlySecond(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    java.lang.String str20 = commApplication13.commOnlySecond(str_array17);
    java.util.List list21 = sortApplication0.sortAll(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication22 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = calApplication24.printCalForYearMondayFirst(str_array26);
    java.util.List list28 = sortApplication23.sortCapitalNumbersSpecialChars(str_array26);
    java.util.List list29 = sortApplication22.sortSimpleSpecialChars(str_array26);
    java.util.List list30 = sortApplication0.numericalSortCapitalSpecialChars(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication31 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "hi!" };
    java.lang.String str35 = commApplication32.commOnlySecond(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "hi!" };
    java.lang.String str41 = commApplication38.commOnlySecond(str_array40);
    java.lang.String str42 = calApplication37.printCalForYear(str_array40);
    java.lang.String str43 = commApplication36.commOnlySecond(str_array40);
    java.lang.String str44 = commApplication32.commOnlySecond(str_array40);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication45 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array48 = new java.lang.String[] { "" };
    java.lang.String str49 = calApplication46.printCalForYearMondayFirst(str_array48);
    java.util.List list50 = sortApplication45.sortCapitalNumbersSpecialChars(str_array48);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array54 = new java.lang.String[] { "hi!" };
    java.lang.String str55 = commApplication52.commOnlySecond(str_array54);
    java.lang.String str56 = calApplication51.printCalForYear(str_array54);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array59 = new java.lang.String[] { "hi!" };
    java.lang.String str60 = commApplication57.commOnlySecond(str_array59);
    java.lang.String str61 = calApplication51.printCalForYear(str_array59);
    java.util.List list62 = sortApplication45.sortNumbersSpecialChars(str_array59);
    java.lang.String str63 = commApplication32.commBothMathches(str_array59);
    java.lang.String str64 = bcApplication31.add(str_array59);
    java.util.List list65 = sortApplication0.sortCapitalNumbers(str_array59);
    java.lang.String[] str_array66 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list67 = sortApplication0.sortSimpleCapitalSpecialChars(str_array66);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str35.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str41.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str43.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str44.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str55.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str60.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str63.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test221"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    java.util.List list5 = sortApplication0.numericalSortNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.util.List list11 = sortApplication6.numericalSortNumbersSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication12 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "" };
    java.lang.String str16 = calApplication13.printCalForYearMondayFirst(str_array15);
    java.util.List list17 = sortApplication12.sortCapitalNumbersSpecialChars(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "hi!" };
    java.lang.String str22 = commApplication19.commOnlySecond(str_array21);
    java.lang.String str23 = calApplication18.printCalForYear(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "hi!" };
    java.lang.String str27 = commApplication24.commOnlySecond(str_array26);
    java.lang.String str28 = calApplication18.printCalForYear(str_array26);
    java.util.List list29 = sortApplication12.sortNumbersSpecialChars(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "hi!" };
    java.lang.String str34 = commApplication31.commOnlySecond(str_array33);
    java.lang.String str35 = calApplication30.printCalForYear(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array38 = new java.lang.String[] { "hi!" };
    java.lang.String str39 = commApplication36.commOnlySecond(str_array38);
    java.lang.String str40 = calApplication30.printCalForYear(str_array38);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication41 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication42 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array45 = new java.lang.String[] { "" };
    java.lang.String str46 = calApplication43.printCalForYearMondayFirst(str_array45);
    java.util.List list47 = sortApplication42.sortCapitalNumbersSpecialChars(str_array45);
    java.util.List list48 = sortApplication41.sortSimpleSpecialChars(str_array45);
    java.lang.String str49 = calApplication30.printCal(str_array45);
    java.util.List list50 = sortApplication12.sortStringsSimple(str_array45);
    java.util.List list51 = sortApplication6.sortSimpleCapitalNumber(str_array45);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication52 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array55 = new java.lang.String[] { "" };
    java.lang.String str56 = calApplication53.printCalForYearMondayFirst(str_array55);
    java.util.List list57 = sortApplication52.sortCapitalNumbersSpecialChars(str_array55);
    java.util.List list58 = sortApplication6.numericalSortSimpleSpecialChars(str_array55);
    java.util.List list59 = sortApplication0.sortStringsSimple(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str22.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str27.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test222"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    java.lang.String str5 = calApplication0.printCalForYear(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "hi!" };
    java.lang.String str9 = commApplication6.commOnlySecond(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array14 = new java.lang.String[] { "hi!" };
    java.lang.String str15 = commApplication12.commOnlySecond(str_array14);
    java.lang.String str16 = calApplication11.printCalForYear(str_array14);
    java.lang.String str17 = commApplication10.commOnlySecond(str_array14);
    java.lang.String str18 = commApplication6.commOnlySecond(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication19 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = calApplication20.printCalForYearMondayFirst(str_array22);
    java.util.List list24 = sortApplication19.sortCapitalNumbersSpecialChars(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!" };
    java.lang.String str29 = commApplication26.commOnlySecond(str_array28);
    java.lang.String str30 = calApplication25.printCalForYear(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "hi!" };
    java.lang.String str34 = commApplication31.commOnlySecond(str_array33);
    java.lang.String str35 = calApplication25.printCalForYear(str_array33);
    java.util.List list36 = sortApplication19.sortNumbersSpecialChars(str_array33);
    java.lang.String str37 = commApplication6.commBothMathches(str_array33);
    java.lang.String str38 = calApplication0.printCalForMonthYearMondayFirst(str_array33);
    java.lang.String[] str_array39 = null;
    java.io.InputStream inputStream40 = null;
    java.io.OutputStream outputStream41 = null;
    calApplication0.run(str_array39, inputStream40, outputStream41);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication43 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "hi!" };
    java.lang.String str47 = commApplication44.commOnlySecond(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array52 = new java.lang.String[] { "hi!" };
    java.lang.String str53 = commApplication50.commOnlySecond(str_array52);
    java.lang.String str54 = calApplication49.printCalForYear(str_array52);
    java.lang.String str55 = commApplication48.commOnlySecond(str_array52);
    java.lang.String str56 = commApplication44.commOnlySecond(str_array52);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication57 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication58 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication59 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array61 = new java.lang.String[] { "" };
    java.lang.String str62 = calApplication59.printCalForYearMondayFirst(str_array61);
    java.util.List list63 = sortApplication58.sortCapitalNumbersSpecialChars(str_array61);
    java.util.List list64 = sortApplication57.sortSimpleSpecialChars(str_array61);
    java.lang.String str65 = commApplication44.commAllMatches(str_array61);
    java.lang.String str66 = bcApplication43.lessThan(str_array61);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication67 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array70 = new java.lang.String[] { "" };
    java.lang.String str71 = calApplication68.printCalForYearMondayFirst(str_array70);
    java.util.List list72 = sortApplication67.sortCapitalNumbersSpecialChars(str_array70);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication73 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication74 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array76 = new java.lang.String[] { "hi!" };
    java.lang.String str77 = commApplication74.commOnlySecond(str_array76);
    java.lang.String str78 = calApplication73.printCalForYear(str_array76);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication79 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array81 = new java.lang.String[] { "hi!" };
    java.lang.String str82 = commApplication79.commOnlySecond(str_array81);
    java.lang.String str83 = calApplication73.printCalForYear(str_array81);
    java.util.List list84 = sortApplication67.sortNumbersSpecialChars(str_array81);
    java.lang.String str85 = bcApplication43.negate(str_array81);
    java.lang.String str86 = calApplication0.printCal(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str9.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str15.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str17.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str37.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str47.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str53.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str55.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str56.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str65.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str77.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str82.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str86);

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test223"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    java.util.List list5 = sortApplication0.numericalSortNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication12.printCalForYear(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!" };
    java.lang.String str21 = commApplication18.commOnlySecond(str_array20);
    java.lang.String str22 = calApplication12.printCalForYear(str_array20);
    java.util.List list23 = sortApplication6.sortNumbersSpecialChars(str_array20);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication24 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = calApplication25.printCalForYearMondayFirst(str_array27);
    java.util.List list29 = sortApplication24.sortCapitalNumbersSpecialChars(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication30 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "" };
    java.lang.String str34 = calApplication31.printCalForYearMondayFirst(str_array33);
    java.util.List list35 = sortApplication30.sortCapitalNumbersSpecialChars(str_array33);
    java.util.List list36 = sortApplication24.numericalSortSimpleSpecialChars(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array41 = new java.lang.String[] { "hi!" };
    java.lang.String str42 = commApplication39.commOnlySecond(str_array41);
    java.lang.String str43 = calApplication38.printCalForYear(str_array41);
    java.lang.String str44 = commApplication37.commOnlySecond(str_array41);
    java.util.List list45 = sortApplication24.sortAll(str_array41);
    java.util.List list46 = sortApplication6.numericalSortNumbersSpecialChars(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication47 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array50 = new java.lang.String[] { "" };
    java.lang.String str51 = calApplication48.printCalForYearMondayFirst(str_array50);
    java.util.List list52 = sortApplication47.sortCapitalNumbersSpecialChars(str_array50);
    java.util.List list53 = sortApplication6.numericalSortSimpleCapitalSpecialChars(str_array50);
    java.util.List list54 = sortApplication0.sortNumbers(str_array50);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication55 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array58 = new java.lang.String[] { "hi!" };
    java.lang.String str59 = commApplication56.commOnlySecond(str_array58);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array64 = new java.lang.String[] { "hi!" };
    java.lang.String str65 = commApplication62.commOnlySecond(str_array64);
    java.lang.String str66 = calApplication61.printCalForYear(str_array64);
    java.lang.String str67 = commApplication60.commOnlySecond(str_array64);
    java.lang.String str68 = commApplication56.commOnlySecond(str_array64);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication69 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication70 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication71 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array73 = new java.lang.String[] { "" };
    java.lang.String str74 = calApplication71.printCalForYearMondayFirst(str_array73);
    java.util.List list75 = sortApplication70.sortCapitalNumbersSpecialChars(str_array73);
    java.util.List list76 = sortApplication69.sortSimpleSpecialChars(str_array73);
    java.lang.String str77 = commApplication56.commAllMatches(str_array73);
    java.lang.String str78 = bcApplication55.lessThan(str_array73);
    java.util.List list79 = sortApplication0.numericalSortSimpleCapitalNumber(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str42.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str44.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str59.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str65.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str67.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str68.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str77.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list79);

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test224"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    java.util.List list5 = sortApplication0.sortSimpleCapitalSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication12.printCalForYear(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!" };
    java.lang.String str21 = commApplication18.commOnlySecond(str_array20);
    java.lang.String str22 = calApplication12.printCalForYear(str_array20);
    java.util.List list23 = sortApplication6.sortNumbersSpecialChars(str_array20);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "hi!" };
    java.lang.String str28 = commApplication25.commOnlySecond(str_array27);
    java.lang.String str29 = calApplication24.printCalForYear(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "hi!" };
    java.lang.String str33 = commApplication30.commOnlySecond(str_array32);
    java.lang.String str34 = calApplication24.printCalForYear(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication35 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication36 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "" };
    java.lang.String str40 = calApplication37.printCalForYearMondayFirst(str_array39);
    java.util.List list41 = sortApplication36.sortCapitalNumbersSpecialChars(str_array39);
    java.util.List list42 = sortApplication35.sortSimpleSpecialChars(str_array39);
    java.lang.String str43 = calApplication24.printCal(str_array39);
    java.util.List list44 = sortApplication6.sortStringsSimple(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication45 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array48 = new java.lang.String[] { "" };
    java.lang.String str49 = calApplication46.printCalForYearMondayFirst(str_array48);
    java.util.List list50 = sortApplication45.sortCapitalNumbersSpecialChars(str_array48);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication51 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array54 = new java.lang.String[] { "" };
    java.lang.String str55 = calApplication52.printCalForYearMondayFirst(str_array54);
    java.util.List list56 = sortApplication51.sortCapitalNumbersSpecialChars(str_array54);
    java.util.List list57 = sortApplication45.numericalSortSimpleSpecialChars(str_array54);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication59 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array62 = new java.lang.String[] { "hi!" };
    java.lang.String str63 = commApplication60.commOnlySecond(str_array62);
    java.lang.String str64 = calApplication59.printCalForYear(str_array62);
    java.lang.String str65 = commApplication58.commOnlySecond(str_array62);
    java.util.List list66 = sortApplication45.sortAll(str_array62);
    java.util.List list67 = sortApplication6.numericalSortSimpleNumbers(str_array62);
    java.util.List list68 = sortApplication0.numericalSortSimpleCapital(str_array62);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication69 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication70 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array72 = new java.lang.String[] { "hi!" };
    java.lang.String str73 = commApplication70.commOnlySecond(str_array72);
    java.util.List list74 = sortApplication69.numericalSortNumbersSpecialChars(str_array72);
    java.util.List list75 = sortApplication0.sortCapitalSpecialChars(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str28.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str33.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str63.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str65.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str73.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test225"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array14 = new java.lang.String[] { "hi!" };
    java.lang.String str15 = commApplication12.commOnlySecond(str_array14);
    java.lang.String str16 = calApplication6.printCalForYear(str_array14);
    java.util.List list17 = sortApplication0.sortNumbersSpecialChars(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = calApplication19.printCalForYearMondayFirst(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array25 = new java.lang.String[] { "" };
    java.lang.String str26 = calApplication23.printCalForYearMondayFirst(str_array25);
    java.lang.String str27 = calApplication19.printCal(str_array25);
    java.lang.String str28 = calApplication18.printCal(str_array25);
    java.util.List list29 = sortApplication0.numericalSortCapitalNumbersSpecialChars(str_array25);
    java.lang.String[] str_array30 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list31 = sortApplication0.numericalSortNumbersSpecialChars(str_array30);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str15.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test226"); }


    sg.edu.nus.comp.cs4218.impl.app.FmtApplication fmtApplication0 = new sg.edu.nus.comp.cs4218.impl.app.FmtApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    java.lang.String str12 = commApplication5.commOnlySecond(str_array9);
    java.lang.String str13 = commApplication1.commOnlySecond(str_array9);
    java.io.InputStream inputStream14 = null;
    java.io.OutputStream outputStream15 = null;
    // The following exception was thrown during execution in test generation
    try {
      fmtApplication0.run(str_array9, inputStream14, outputStream15);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.FmtException");
    } catch (sg.edu.nus.comp.cs4218.exception.FmtException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.FmtException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.FmtException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test227"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "" };
    java.lang.String str9 = calApplication6.printCalForYearMondayFirst(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array12 = new java.lang.String[] { "hi!" };
    java.lang.String str13 = commApplication10.commOnlySecond(str_array12);
    java.lang.String str14 = calApplication6.printCalWithMondayFirst(str_array12);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication15 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "" };
    java.lang.String str19 = calApplication16.printCalForYearMondayFirst(str_array18);
    java.util.List list20 = sortApplication15.sortCapitalNumbersSpecialChars(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication21 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array24 = new java.lang.String[] { "" };
    java.lang.String str25 = calApplication22.printCalForYearMondayFirst(str_array24);
    java.util.List list26 = sortApplication21.sortCapitalNumbersSpecialChars(str_array24);
    java.util.List list27 = sortApplication15.numericalSortSimpleSpecialChars(str_array24);
    java.lang.String str28 = calApplication6.printCalForYear(str_array24);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "hi!" };
    java.lang.String str33 = commApplication30.commOnlySecond(str_array32);
    java.lang.String str34 = calApplication29.printCalForYear(str_array32);
    java.lang.String str35 = calApplication6.printCalForYearMondayFirst(str_array32);
    java.util.List list36 = sortApplication0.sortSimpleCapitalNumber(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication37 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "" };
    java.lang.String str41 = calApplication38.printCalForYearMondayFirst(str_array40);
    java.util.List list42 = sortApplication37.sortCapitalNumbersSpecialChars(str_array40);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication43 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = calApplication44.printCalForYearMondayFirst(str_array46);
    java.util.List list48 = sortApplication43.sortCapitalNumbersSpecialChars(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array52 = new java.lang.String[] { "hi!" };
    java.lang.String str53 = commApplication50.commOnlySecond(str_array52);
    java.lang.String str54 = calApplication49.printCalForYear(str_array52);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "hi!" };
    java.lang.String str58 = commApplication55.commOnlySecond(str_array57);
    java.lang.String str59 = calApplication49.printCalForYear(str_array57);
    java.util.List list60 = sortApplication43.sortNumbersSpecialChars(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array64 = new java.lang.String[] { "" };
    java.lang.String str65 = calApplication62.printCalForYearMondayFirst(str_array64);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication66 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array68 = new java.lang.String[] { "" };
    java.lang.String str69 = calApplication66.printCalForYearMondayFirst(str_array68);
    java.lang.String str70 = calApplication62.printCal(str_array68);
    java.lang.String str71 = calApplication61.printCal(str_array68);
    java.util.List list72 = sortApplication43.numericalSortCapitalNumbersSpecialChars(str_array68);
    java.util.List list73 = sortApplication37.numericalSortCapitalNumbersSpecialChars(str_array68);
    java.lang.String[] str_array75 = new java.lang.String[] { "comm: terminated with error message comm: file is not readable" };
    java.util.List list76 = sortApplication37.numericalSortAll(str_array75);
    java.util.List list77 = sortApplication0.sortSimpleSpecialChars(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str33.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str53.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str58.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test228"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    java.util.List list7 = sortApplication0.sortSimpleSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array11 = new java.lang.String[] { "hi!" };
    java.lang.String str12 = commApplication9.commOnlySecond(str_array11);
    java.lang.String str13 = calApplication8.printCalForYear(str_array11);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "" };
    java.lang.String str17 = calApplication14.printCalForYearMondayFirst(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!" };
    java.lang.String str21 = commApplication18.commOnlySecond(str_array20);
    java.lang.String str22 = calApplication14.printCalWithMondayFirst(str_array20);
    java.lang.String str23 = calApplication8.printCalWithMondayFirst(str_array20);
    java.util.List list24 = sortApplication0.numericalSortSimpleSpecialChars(str_array20);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!" };
    java.lang.String str29 = commApplication26.commOnlySecond(str_array28);
    java.lang.String str30 = calApplication25.printCalForYear(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "hi!" };
    java.lang.String str34 = commApplication31.commOnlySecond(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "hi!" };
    java.lang.String str40 = commApplication37.commOnlySecond(str_array39);
    java.lang.String str41 = calApplication36.printCalForYear(str_array39);
    java.lang.String str42 = commApplication35.commOnlySecond(str_array39);
    java.lang.String str43 = commApplication31.commOnlySecond(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication44 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array47 = new java.lang.String[] { "" };
    java.lang.String str48 = calApplication45.printCalForYearMondayFirst(str_array47);
    java.util.List list49 = sortApplication44.sortCapitalNumbersSpecialChars(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array53 = new java.lang.String[] { "hi!" };
    java.lang.String str54 = commApplication51.commOnlySecond(str_array53);
    java.lang.String str55 = calApplication50.printCalForYear(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array58 = new java.lang.String[] { "hi!" };
    java.lang.String str59 = commApplication56.commOnlySecond(str_array58);
    java.lang.String str60 = calApplication50.printCalForYear(str_array58);
    java.util.List list61 = sortApplication44.sortNumbersSpecialChars(str_array58);
    java.lang.String str62 = commApplication31.commBothMathches(str_array58);
    java.lang.String str63 = calApplication25.printCalForMonthYearMondayFirst(str_array58);
    java.lang.String[] str_array64 = null;
    java.io.InputStream inputStream65 = null;
    java.io.OutputStream outputStream66 = null;
    calApplication25.run(str_array64, inputStream65, outputStream66);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication69 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication70 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication71 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array73 = new java.lang.String[] { "hi!" };
    java.lang.String str74 = commApplication71.commOnlySecond(str_array73);
    java.lang.String str75 = calApplication70.printCalForYear(str_array73);
    java.lang.String str76 = commApplication69.commOnlySecond(str_array73);
    java.lang.String str77 = commApplication68.commBothMathches(str_array73);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication78 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication79 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array81 = new java.lang.String[] { "" };
    java.lang.String str82 = calApplication79.printCalForYearMondayFirst(str_array81);
    java.util.List list83 = sortApplication78.sortCapitalNumbersSpecialChars(str_array81);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication84 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication85 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array87 = new java.lang.String[] { "" };
    java.lang.String str88 = calApplication85.printCalForYearMondayFirst(str_array87);
    java.util.List list89 = sortApplication84.sortCapitalNumbersSpecialChars(str_array87);
    java.util.List list90 = sortApplication78.numericalSortSimpleSpecialChars(str_array87);
    java.lang.String[] str_array92 = new java.lang.String[] { "" };
    java.util.List list93 = sortApplication78.sortSimpleCapitalSpecialChars(str_array92);
    java.lang.String str94 = commApplication68.commBothMathches(str_array92);
    java.lang.String str95 = calApplication25.printCalForYear(str_array92);
    java.util.List list96 = sortApplication0.numericalSortSimpleSpecialChars(str_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str40.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str42.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str43.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str54.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str59.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str62.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str74.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str76.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str77.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str94 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str94.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list96);

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test229"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication5 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "hi!" };
    java.lang.String str9 = commApplication6.commOnlySecond(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array14 = new java.lang.String[] { "hi!" };
    java.lang.String str15 = commApplication12.commOnlySecond(str_array14);
    java.lang.String str16 = calApplication11.printCalForYear(str_array14);
    java.lang.String str17 = commApplication10.commOnlySecond(str_array14);
    java.lang.String str18 = commApplication6.commOnlySecond(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication19 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication20 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array23 = new java.lang.String[] { "" };
    java.lang.String str24 = calApplication21.printCalForYearMondayFirst(str_array23);
    java.util.List list25 = sortApplication20.sortCapitalNumbersSpecialChars(str_array23);
    java.util.List list26 = sortApplication19.sortSimpleSpecialChars(str_array23);
    java.lang.String str27 = commApplication6.commAllMatches(str_array23);
    java.lang.String str28 = bcApplication5.lessThan(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication29 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "" };
    java.lang.String str33 = calApplication30.printCalForYearMondayFirst(str_array32);
    java.util.List list34 = sortApplication29.sortCapitalNumbersSpecialChars(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array38 = new java.lang.String[] { "hi!" };
    java.lang.String str39 = commApplication36.commOnlySecond(str_array38);
    java.lang.String str40 = calApplication35.printCalForYear(str_array38);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "hi!" };
    java.lang.String str44 = commApplication41.commOnlySecond(str_array43);
    java.lang.String str45 = calApplication35.printCalForYear(str_array43);
    java.util.List list46 = sortApplication29.sortNumbersSpecialChars(str_array43);
    java.lang.String str47 = bcApplication5.negate(str_array43);
    java.lang.String str48 = commApplication1.commOnlyFirst(str_array43);
    java.lang.String str49 = bcApplication0.lessThan(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str9.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str15.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str17.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str27.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str44.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str48.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test230"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "" };
    java.lang.String str9 = calApplication6.printCalForYearMondayFirst(str_array8);
    java.lang.String str10 = calApplication2.printCal(str_array8);
    java.lang.String str11 = calApplication1.printCal(str_array8);
    java.lang.String str12 = bcApplication0.negate(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication13 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "" };
    java.lang.String str17 = calApplication14.printCalForYearMondayFirst(str_array16);
    java.util.List list18 = sortApplication13.sortCapitalNumbersSpecialChars(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication19 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = calApplication20.printCalForYearMondayFirst(str_array22);
    java.util.List list24 = sortApplication19.sortCapitalNumbersSpecialChars(str_array22);
    java.util.List list25 = sortApplication13.numericalSortSimpleSpecialChars(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array30 = new java.lang.String[] { "hi!" };
    java.lang.String str31 = commApplication28.commOnlySecond(str_array30);
    java.lang.String str32 = calApplication27.printCalForYear(str_array30);
    java.lang.String str33 = commApplication26.commOnlySecond(str_array30);
    java.util.List list34 = sortApplication13.sortAll(str_array30);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication35 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication36 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "" };
    java.lang.String str40 = calApplication37.printCalForYearMondayFirst(str_array39);
    java.util.List list41 = sortApplication36.sortCapitalNumbersSpecialChars(str_array39);
    java.util.List list42 = sortApplication35.sortSimpleSpecialChars(str_array39);
    java.util.List list43 = sortApplication13.numericalSortCapitalSpecialChars(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array48 = new java.lang.String[] { "hi!" };
    java.lang.String str49 = commApplication46.commOnlySecond(str_array48);
    java.lang.String str50 = calApplication45.printCalForYear(str_array48);
    java.lang.String str51 = commApplication44.commOnlySecond(str_array48);
    java.util.List list52 = sortApplication13.sortAll(str_array48);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array55 = new java.lang.String[] { "hi!" };
    java.lang.String str56 = commApplication53.commOnlySecond(str_array55);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication59 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array61 = new java.lang.String[] { "hi!" };
    java.lang.String str62 = commApplication59.commOnlySecond(str_array61);
    java.lang.String str63 = calApplication58.printCalForYear(str_array61);
    java.lang.String str64 = commApplication57.commOnlySecond(str_array61);
    java.lang.String str65 = commApplication53.commOnlySecond(str_array61);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication66 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication67 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array70 = new java.lang.String[] { "" };
    java.lang.String str71 = calApplication68.printCalForYearMondayFirst(str_array70);
    java.util.List list72 = sortApplication67.sortCapitalNumbersSpecialChars(str_array70);
    java.util.List list73 = sortApplication66.sortSimpleSpecialChars(str_array70);
    java.lang.String str74 = commApplication53.commAllMatches(str_array70);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication75 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication76 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication77 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array79 = new java.lang.String[] { "" };
    java.lang.String str80 = calApplication77.printCalForYearMondayFirst(str_array79);
    java.util.List list81 = sortApplication76.sortCapitalNumbersSpecialChars(str_array79);
    java.util.List list82 = sortApplication75.sortSimpleSpecialChars(str_array79);
    java.lang.String str83 = commApplication53.commAllMatches(str_array79);
    java.util.List list84 = sortApplication13.numericalSortAll(str_array79);
    java.lang.String str85 = bcApplication0.notEqual(str_array79);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication86 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication87 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array89 = new java.lang.String[] { "hi!" };
    java.lang.String str90 = commApplication87.commOnlySecond(str_array89);
    java.util.List list91 = sortApplication86.sortSimpleCapitalSpecialChars(str_array89);
    java.lang.String str92 = bcApplication0.lessThanOrEqual(str_array89);
    java.lang.String[] str_array93 = null;
    java.lang.String str94 = bcApplication0.greaterThanOrEqual(str_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str31.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str33.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str49.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str51.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str56.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str62.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str64.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str65.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str74.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str83.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str90.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str94);

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test231"); }


    sg.edu.nus.comp.cs4218.impl.app.HeadApplication headApplication0 = new sg.edu.nus.comp.cs4218.impl.app.HeadApplication();
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication1 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    java.lang.String str13 = commApplication6.commOnlySecond(str_array10);
    java.lang.String str14 = commApplication2.commOnlySecond(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication15 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication16 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "" };
    java.lang.String str20 = calApplication17.printCalForYearMondayFirst(str_array19);
    java.util.List list21 = sortApplication16.sortCapitalNumbersSpecialChars(str_array19);
    java.util.List list22 = sortApplication15.sortSimpleSpecialChars(str_array19);
    java.lang.String str23 = commApplication2.commAllMatches(str_array19);
    java.lang.String str24 = bcApplication1.lessThan(str_array19);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = calApplication25.printCalForYearMondayFirst(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array31 = new java.lang.String[] { "" };
    java.lang.String str32 = calApplication29.printCalForYearMondayFirst(str_array31);
    java.lang.String str33 = calApplication25.printCal(str_array31);
    java.lang.String str34 = bcApplication1.and(str_array31);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication35 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "" };
    java.lang.String str40 = calApplication37.printCalForYearMondayFirst(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "" };
    java.lang.String str44 = calApplication41.printCalForYearMondayFirst(str_array43);
    java.lang.String str45 = calApplication37.printCal(str_array43);
    java.lang.String str46 = calApplication36.printCal(str_array43);
    java.lang.String str47 = bcApplication35.negate(str_array43);
    java.lang.String str48 = bcApplication1.pow(str_array43);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array52 = new java.lang.String[] { "hi!" };
    java.lang.String str53 = commApplication50.commOnlySecond(str_array52);
    java.lang.String str54 = calApplication49.printCalForYear(str_array52);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "hi!" };
    java.lang.String str58 = commApplication55.commOnlySecond(str_array57);
    java.lang.String str59 = calApplication49.printCalForYear(str_array57);
    java.lang.String str60 = bcApplication1.lessThan(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication61 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array64 = new java.lang.String[] { "" };
    java.lang.String str65 = calApplication62.printCalForYearMondayFirst(str_array64);
    java.util.List list66 = sortApplication61.sortCapitalNumbersSpecialChars(str_array64);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication67 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array70 = new java.lang.String[] { "hi!" };
    java.lang.String str71 = commApplication68.commOnlySecond(str_array70);
    java.lang.String str72 = calApplication67.printCalForYear(str_array70);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication73 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array75 = new java.lang.String[] { "hi!" };
    java.lang.String str76 = commApplication73.commOnlySecond(str_array75);
    java.lang.String str77 = calApplication67.printCalForYear(str_array75);
    java.util.List list78 = sortApplication61.sortNumbersSpecialChars(str_array75);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication79 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication80 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array82 = new java.lang.String[] { "" };
    java.lang.String str83 = calApplication80.printCalForYearMondayFirst(str_array82);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication84 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array86 = new java.lang.String[] { "" };
    java.lang.String str87 = calApplication84.printCalForYearMondayFirst(str_array86);
    java.lang.String str88 = calApplication80.printCal(str_array86);
    java.lang.String str89 = calApplication79.printCal(str_array86);
    java.util.List list90 = sortApplication61.numericalSortCapitalNumbersSpecialChars(str_array86);
    java.lang.String str91 = bcApplication1.or(str_array86);
    java.io.InputStream inputStream92 = null;
    java.io.OutputStream outputStream93 = null;
    // The following exception was thrown during execution in test generation
    try {
      headApplication0.run(str_array86, inputStream92, outputStream93);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.HeadException");
    } catch (sg.edu.nus.comp.cs4218.exception.HeadException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.HeadException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.HeadException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str14.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str23.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str53.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str58.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str71.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str76.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str91);

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test232"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array7 = new java.lang.String[] { "hi!" };
    java.lang.String str8 = commApplication5.commOnlySecond(str_array7);
    java.lang.String str9 = calApplication1.printCalWithMondayFirst(str_array7);
    java.util.List list10 = sortApplication0.sortCapitalNumbers(str_array7);
    java.lang.String[] str_array11 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list12 = sortApplication0.sortNumbers(str_array11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str8.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test233"); }


    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array2 = new java.lang.String[] { "hi!" };
    java.lang.String str3 = commApplication0.commOnlySecond(str_array2);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication4 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array7 = new java.lang.String[] { "hi!" };
    java.lang.String str8 = commApplication5.commOnlySecond(str_array7);
    java.lang.String str9 = calApplication4.printCalForYear(str_array7);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array12 = new java.lang.String[] { "hi!" };
    java.lang.String str13 = commApplication10.commOnlySecond(str_array12);
    java.lang.String str14 = calApplication4.printCalForYear(str_array12);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication15 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication16 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "" };
    java.lang.String str20 = calApplication17.printCalForYearMondayFirst(str_array19);
    java.util.List list21 = sortApplication16.sortCapitalNumbersSpecialChars(str_array19);
    java.util.List list22 = sortApplication15.sortSimpleSpecialChars(str_array19);
    java.lang.String str23 = calApplication4.printCal(str_array19);
    java.lang.String str24 = commApplication0.commOnlySecond(str_array19);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!" };
    java.lang.String str29 = commApplication26.commOnlySecond(str_array28);
    java.lang.String str30 = calApplication25.printCalForYear(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "hi!" };
    java.lang.String str34 = commApplication31.commOnlySecond(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "hi!" };
    java.lang.String str40 = commApplication37.commOnlySecond(str_array39);
    java.lang.String str41 = calApplication36.printCalForYear(str_array39);
    java.lang.String str42 = commApplication35.commOnlySecond(str_array39);
    java.lang.String str43 = commApplication31.commOnlySecond(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication44 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array47 = new java.lang.String[] { "" };
    java.lang.String str48 = calApplication45.printCalForYearMondayFirst(str_array47);
    java.util.List list49 = sortApplication44.sortCapitalNumbersSpecialChars(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array53 = new java.lang.String[] { "hi!" };
    java.lang.String str54 = commApplication51.commOnlySecond(str_array53);
    java.lang.String str55 = calApplication50.printCalForYear(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array58 = new java.lang.String[] { "hi!" };
    java.lang.String str59 = commApplication56.commOnlySecond(str_array58);
    java.lang.String str60 = calApplication50.printCalForYear(str_array58);
    java.util.List list61 = sortApplication44.sortNumbersSpecialChars(str_array58);
    java.lang.String str62 = commApplication31.commBothMathches(str_array58);
    java.lang.String str63 = calApplication25.printCalForMonthYearMondayFirst(str_array58);
    java.lang.String str64 = commApplication0.commNoMatches(str_array58);
    java.lang.String[] str_array65 = null;
    java.lang.String str66 = commApplication0.commAllMatches(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str3.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str8.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str24.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str40.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str42.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str43.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str54.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str59.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str62.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str64.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "comm: terminated with error message comm: null"+ "'", str66.equals("comm: terminated with error message comm: null"));

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test234"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "" };
    java.lang.String str9 = calApplication6.printCalForYearMondayFirst(str_array8);
    java.util.List list10 = sortApplication0.numericalSortSimpleCapitalNumber(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication11 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array14 = new java.lang.String[] { "" };
    java.lang.String str15 = calApplication12.printCalForYearMondayFirst(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "hi!" };
    java.lang.String str19 = commApplication16.commOnlySecond(str_array18);
    java.lang.String str20 = calApplication12.printCalWithMondayFirst(str_array18);
    java.util.List list21 = sortApplication11.sortCapitalNumbers(str_array18);
    java.util.List list22 = sortApplication0.sortCapitalSpecialChars(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array25 = new java.lang.String[] { "hi!" };
    java.lang.String str26 = commApplication23.commOnlySecond(str_array25);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication27 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array30 = new java.lang.String[] { "hi!" };
    java.lang.String str31 = commApplication28.commOnlySecond(str_array30);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "hi!" };
    java.lang.String str37 = commApplication34.commOnlySecond(str_array36);
    java.lang.String str38 = calApplication33.printCalForYear(str_array36);
    java.lang.String str39 = commApplication32.commOnlySecond(str_array36);
    java.lang.String str40 = commApplication28.commOnlySecond(str_array36);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication41 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication42 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array45 = new java.lang.String[] { "" };
    java.lang.String str46 = calApplication43.printCalForYearMondayFirst(str_array45);
    java.util.List list47 = sortApplication42.sortCapitalNumbersSpecialChars(str_array45);
    java.util.List list48 = sortApplication41.sortSimpleSpecialChars(str_array45);
    java.lang.String str49 = commApplication28.commAllMatches(str_array45);
    java.lang.String str50 = bcApplication27.lessThan(str_array45);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication51 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array54 = new java.lang.String[] { "" };
    java.lang.String str55 = calApplication52.printCalForYearMondayFirst(str_array54);
    java.util.List list56 = sortApplication51.sortCapitalNumbersSpecialChars(str_array54);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array60 = new java.lang.String[] { "hi!" };
    java.lang.String str61 = commApplication58.commOnlySecond(str_array60);
    java.lang.String str62 = calApplication57.printCalForYear(str_array60);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication63 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array65 = new java.lang.String[] { "hi!" };
    java.lang.String str66 = commApplication63.commOnlySecond(str_array65);
    java.lang.String str67 = calApplication57.printCalForYear(str_array65);
    java.util.List list68 = sortApplication51.sortNumbersSpecialChars(str_array65);
    java.lang.String str69 = bcApplication27.negate(str_array65);
    java.lang.String str70 = commApplication23.commOnlyFirst(str_array65);
    java.util.List list71 = sortApplication0.sortStringsSimple(str_array65);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication72 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication73 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array75 = new java.lang.String[] { "hi!" };
    java.lang.String str76 = commApplication73.commOnlySecond(str_array75);
    java.lang.String str77 = calApplication72.printCalForYear(str_array75);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication78 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array80 = new java.lang.String[] { "hi!" };
    java.lang.String str81 = commApplication78.commOnlySecond(str_array80);
    java.lang.String str82 = calApplication72.printCalForYear(str_array80);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication83 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication84 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication85 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array87 = new java.lang.String[] { "" };
    java.lang.String str88 = calApplication85.printCalForYearMondayFirst(str_array87);
    java.util.List list89 = sortApplication84.sortCapitalNumbersSpecialChars(str_array87);
    java.util.List list90 = sortApplication83.sortSimpleSpecialChars(str_array87);
    java.lang.String str91 = calApplication72.printCal(str_array87);
    java.util.List list92 = sortApplication0.numericalSortSimpleCapital(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str26.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str31.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str37.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str40.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str49.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str61.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str66.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str70.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str76.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str81.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list92);

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test235"); }


    sg.edu.nus.comp.cs4218.impl.app.FmtApplication fmtApplication0 = new sg.edu.nus.comp.cs4218.impl.app.FmtApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication4 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!" };
    java.lang.String str7 = commApplication4.commOnlySecond(str_array6);
    java.lang.String str8 = calApplication3.printCalForYear(str_array6);
    java.lang.String str9 = commApplication2.commOnlySecond(str_array6);
    java.lang.String str10 = commApplication1.commBothMathches(str_array6);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication11 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array14 = new java.lang.String[] { "" };
    java.lang.String str15 = calApplication12.printCalForYearMondayFirst(str_array14);
    java.util.List list16 = sortApplication11.sortCapitalNumbersSpecialChars(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication17 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array20 = new java.lang.String[] { "" };
    java.lang.String str21 = calApplication18.printCalForYearMondayFirst(str_array20);
    java.util.List list22 = sortApplication17.sortCapitalNumbersSpecialChars(str_array20);
    java.util.List list23 = sortApplication11.numericalSortSimpleSpecialChars(str_array20);
    java.lang.String[] str_array25 = new java.lang.String[] { "" };
    java.util.List list26 = sortApplication11.sortSimpleCapitalSpecialChars(str_array25);
    java.lang.String str27 = commApplication1.commBothMathches(str_array25);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array31 = new java.lang.String[] { "hi!" };
    java.lang.String str32 = commApplication29.commOnlySecond(str_array31);
    java.lang.String str33 = calApplication28.printCalForYear(str_array31);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "" };
    java.lang.String str37 = calApplication34.printCalForYearMondayFirst(str_array36);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "hi!" };
    java.lang.String str41 = commApplication38.commOnlySecond(str_array40);
    java.lang.String str42 = calApplication34.printCalWithMondayFirst(str_array40);
    java.lang.String str43 = calApplication28.printCalWithMondayFirst(str_array40);
    java.lang.String str44 = commApplication1.commBothMathches(str_array40);
    java.io.InputStream inputStream45 = null;
    java.io.OutputStream outputStream46 = null;
    // The following exception was thrown during execution in test generation
    try {
      fmtApplication0.run(str_array40, inputStream45, outputStream46);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.FmtException");
    } catch (sg.edu.nus.comp.cs4218.exception.FmtException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.FmtException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.FmtException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str7.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str9.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str27.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str32.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str41.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str44.equals("comm: terminated with error message comm: file is not readable"));

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test236"); }


    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication0 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication7.printCalForYear(str_array15);
    java.util.List list18 = sortApplication1.sortNumbersSpecialChars(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication19 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = calApplication20.printCalForYearMondayFirst(str_array22);
    java.util.List list24 = sortApplication19.sortCapitalNumbersSpecialChars(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication25 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "" };
    java.lang.String str29 = calApplication26.printCalForYearMondayFirst(str_array28);
    java.util.List list30 = sortApplication25.sortCapitalNumbersSpecialChars(str_array28);
    java.util.List list31 = sortApplication19.numericalSortSimpleSpecialChars(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "hi!" };
    java.lang.String str37 = commApplication34.commOnlySecond(str_array36);
    java.lang.String str38 = calApplication33.printCalForYear(str_array36);
    java.lang.String str39 = commApplication32.commOnlySecond(str_array36);
    java.util.List list40 = sortApplication19.sortAll(str_array36);
    java.util.List list41 = sortApplication1.numericalSortNumbersSpecialChars(str_array36);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication42 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication43 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = calApplication44.printCalForYearMondayFirst(str_array46);
    java.util.List list48 = sortApplication43.sortCapitalNumbersSpecialChars(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array52 = new java.lang.String[] { "hi!" };
    java.lang.String str53 = commApplication50.commOnlySecond(str_array52);
    java.lang.String str54 = calApplication49.printCalForYear(str_array52);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "hi!" };
    java.lang.String str58 = commApplication55.commOnlySecond(str_array57);
    java.lang.String str59 = calApplication49.printCalForYear(str_array57);
    java.util.List list60 = sortApplication43.sortNumbersSpecialChars(str_array57);
    java.lang.String str61 = bcApplication42.notEqual(str_array57);
    java.util.List list62 = sortApplication1.sortSimpleCapitalSpecialChars(str_array57);
    java.io.InputStream inputStream63 = null;
    java.io.OutputStream outputStream64 = null;
    // The following exception was thrown during execution in test generation
    try {
      echoApplication0.run(str_array57, inputStream63, outputStream64);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.EchoException");
    } catch (sg.edu.nus.comp.cs4218.exception.EchoException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.EchoException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.EchoException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str37.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str53.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str58.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test237"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array14 = new java.lang.String[] { "hi!" };
    java.lang.String str15 = commApplication12.commOnlySecond(str_array14);
    java.lang.String str16 = calApplication6.printCalForYear(str_array14);
    java.util.List list17 = sortApplication0.sortNumbersSpecialChars(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = calApplication19.printCalForYearMondayFirst(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array25 = new java.lang.String[] { "" };
    java.lang.String str26 = calApplication23.printCalForYearMondayFirst(str_array25);
    java.lang.String str27 = calApplication19.printCal(str_array25);
    java.lang.String str28 = calApplication18.printCal(str_array25);
    java.util.List list29 = sortApplication0.numericalSortCapitalNumbersSpecialChars(str_array25);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "hi!" };
    java.lang.String str34 = commApplication31.commOnlySecond(str_array33);
    java.lang.String str35 = calApplication30.printCalForYear(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array38 = new java.lang.String[] { "hi!" };
    java.lang.String str39 = commApplication36.commOnlySecond(str_array38);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array44 = new java.lang.String[] { "hi!" };
    java.lang.String str45 = commApplication42.commOnlySecond(str_array44);
    java.lang.String str46 = calApplication41.printCalForYear(str_array44);
    java.lang.String str47 = commApplication40.commOnlySecond(str_array44);
    java.lang.String str48 = commApplication36.commOnlySecond(str_array44);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication49 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array52 = new java.lang.String[] { "" };
    java.lang.String str53 = calApplication50.printCalForYearMondayFirst(str_array52);
    java.util.List list54 = sortApplication49.sortCapitalNumbersSpecialChars(str_array52);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array58 = new java.lang.String[] { "hi!" };
    java.lang.String str59 = commApplication56.commOnlySecond(str_array58);
    java.lang.String str60 = calApplication55.printCalForYear(str_array58);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array63 = new java.lang.String[] { "hi!" };
    java.lang.String str64 = commApplication61.commOnlySecond(str_array63);
    java.lang.String str65 = calApplication55.printCalForYear(str_array63);
    java.util.List list66 = sortApplication49.sortNumbersSpecialChars(str_array63);
    java.lang.String str67 = commApplication36.commBothMathches(str_array63);
    java.lang.String str68 = calApplication30.printCalForMonthYearMondayFirst(str_array63);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication69 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication70 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array72 = new java.lang.String[] { "hi!" };
    java.lang.String str73 = commApplication70.commOnlySecond(str_array72);
    java.lang.String str74 = calApplication69.printCalForYear(str_array72);
    java.io.InputStream inputStream75 = null;
    java.io.OutputStream outputStream76 = null;
    calApplication30.run(str_array72, inputStream75, outputStream76);
    java.util.List list78 = sortApplication0.numericalSortStringsSimple(str_array72);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication79 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication80 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array82 = new java.lang.String[] { "" };
    java.lang.String str83 = calApplication80.printCalForYearMondayFirst(str_array82);
    java.util.List list84 = sortApplication79.sortCapitalNumbersSpecialChars(str_array82);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication85 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array87 = new java.lang.String[] { "" };
    java.lang.String str88 = calApplication85.printCalForYearMondayFirst(str_array87);
    java.util.List list89 = sortApplication79.numericalSortSimpleCapitalNumber(str_array87);
    java.util.List list90 = sortApplication0.sortStringsSimple(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str15.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str45.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str47.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str48.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str59.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str64.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str67.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str73.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list90);

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test238"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array14 = new java.lang.String[] { "hi!" };
    java.lang.String str15 = commApplication12.commOnlySecond(str_array14);
    java.lang.String str16 = calApplication6.printCalForYear(str_array14);
    java.util.List list17 = sortApplication0.sortNumbersSpecialChars(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication18 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "hi!" };
    java.lang.String str22 = commApplication19.commOnlySecond(str_array21);
    java.util.List list23 = sortApplication18.sortSimpleCapitalSpecialChars(str_array21);
    java.util.List list24 = sortApplication0.sortSimpleNumbersSpecialChars(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication25 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "" };
    java.lang.String str29 = calApplication26.printCalForYearMondayFirst(str_array28);
    java.util.List list30 = sortApplication25.sortCapitalNumbersSpecialChars(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication31 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "" };
    java.lang.String str35 = calApplication32.printCalForYearMondayFirst(str_array34);
    java.util.List list36 = sortApplication31.sortCapitalNumbersSpecialChars(str_array34);
    java.util.List list37 = sortApplication25.numericalSortSimpleSpecialChars(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication38 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array41 = new java.lang.String[] { "" };
    java.lang.String str42 = calApplication39.printCalForYearMondayFirst(str_array41);
    java.util.List list43 = sortApplication38.sortCapitalNumbersSpecialChars(str_array41);
    java.util.List list44 = sortApplication25.numericalSortCapitalNumbersSpecialChars(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication45 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array48 = new java.lang.String[] { "hi!" };
    java.lang.String str49 = commApplication46.commOnlySecond(str_array48);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array54 = new java.lang.String[] { "hi!" };
    java.lang.String str55 = commApplication52.commOnlySecond(str_array54);
    java.lang.String str56 = calApplication51.printCalForYear(str_array54);
    java.lang.String str57 = commApplication50.commOnlySecond(str_array54);
    java.lang.String str58 = commApplication46.commOnlySecond(str_array54);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication59 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication60 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array63 = new java.lang.String[] { "" };
    java.lang.String str64 = calApplication61.printCalForYearMondayFirst(str_array63);
    java.util.List list65 = sortApplication60.sortCapitalNumbersSpecialChars(str_array63);
    java.util.List list66 = sortApplication59.sortSimpleSpecialChars(str_array63);
    java.lang.String str67 = commApplication46.commAllMatches(str_array63);
    java.lang.String str68 = bcApplication45.lessThan(str_array63);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication69 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array71 = new java.lang.String[] { "" };
    java.lang.String str72 = calApplication69.printCalForYearMondayFirst(str_array71);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication73 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array75 = new java.lang.String[] { "" };
    java.lang.String str76 = calApplication73.printCalForYearMondayFirst(str_array75);
    java.lang.String str77 = calApplication69.printCal(str_array75);
    java.lang.String str78 = bcApplication45.and(str_array75);
    java.util.List list79 = sortApplication25.numericalSortSimpleCapital(str_array75);
    java.util.List list80 = sortApplication0.sortStringsCapital(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str15.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str22.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str49.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str55.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str57.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str58.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str67.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test239"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    java.lang.String str12 = commApplication5.commOnlySecond(str_array9);
    java.lang.String str13 = commApplication1.commOnlySecond(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication14 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication15 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "" };
    java.lang.String str19 = calApplication16.printCalForYearMondayFirst(str_array18);
    java.util.List list20 = sortApplication15.sortCapitalNumbersSpecialChars(str_array18);
    java.util.List list21 = sortApplication14.sortSimpleSpecialChars(str_array18);
    java.lang.String str22 = commApplication1.commAllMatches(str_array18);
    java.lang.String str23 = bcApplication0.lessThan(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = calApplication24.printCalForYearMondayFirst(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array30 = new java.lang.String[] { "" };
    java.lang.String str31 = calApplication28.printCalForYearMondayFirst(str_array30);
    java.lang.String str32 = calApplication24.printCal(str_array30);
    java.lang.String str33 = bcApplication0.and(str_array30);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array37 = new java.lang.String[] { "hi!" };
    java.lang.String str38 = commApplication35.commOnlySecond(str_array37);
    java.lang.String str39 = calApplication34.printCalForYear(str_array37);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array42 = new java.lang.String[] { "hi!" };
    java.lang.String str43 = commApplication40.commOnlySecond(str_array42);
    java.lang.String str44 = calApplication34.printCalForYear(str_array42);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication45 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array48 = new java.lang.String[] { "" };
    java.lang.String str49 = calApplication46.printCalForYearMondayFirst(str_array48);
    java.util.List list50 = sortApplication45.sortCapitalNumbersSpecialChars(str_array48);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array54 = new java.lang.String[] { "hi!" };
    java.lang.String str55 = commApplication52.commOnlySecond(str_array54);
    java.lang.String str56 = calApplication51.printCalForYear(str_array54);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array59 = new java.lang.String[] { "hi!" };
    java.lang.String str60 = commApplication57.commOnlySecond(str_array59);
    java.lang.String str61 = calApplication51.printCalForYear(str_array59);
    java.util.List list62 = sortApplication45.sortNumbersSpecialChars(str_array59);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication63 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array66 = new java.lang.String[] { "" };
    java.lang.String str67 = calApplication64.printCalForYearMondayFirst(str_array66);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array70 = new java.lang.String[] { "" };
    java.lang.String str71 = calApplication68.printCalForYearMondayFirst(str_array70);
    java.lang.String str72 = calApplication64.printCal(str_array70);
    java.lang.String str73 = calApplication63.printCal(str_array70);
    java.util.List list74 = sortApplication45.numericalSortCapitalNumbersSpecialChars(str_array70);
    java.io.InputStream inputStream75 = null;
    java.io.OutputStream outputStream76 = null;
    calApplication34.run(str_array70, inputStream75, outputStream76);
    java.lang.String str78 = bcApplication0.greaterThan(str_array70);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication79 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication80 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array82 = new java.lang.String[] { "" };
    java.lang.String str83 = calApplication80.printCalForYearMondayFirst(str_array82);
    java.util.List list84 = sortApplication79.sortCapitalNumbersSpecialChars(str_array82);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication85 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication86 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array88 = new java.lang.String[] { "" };
    java.lang.String str89 = calApplication86.printCalForYearMondayFirst(str_array88);
    java.util.List list90 = sortApplication85.sortCapitalNumbersSpecialChars(str_array88);
    java.util.List list91 = sortApplication79.sortAll(str_array88);
    java.lang.String str92 = bcApplication0.bracket(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str22.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str38.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str43.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str55.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str60.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str92);

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test240"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = calApplication8.printCalForYearMondayFirst(str_array10);
    java.util.List list12 = sortApplication7.sortCapitalNumbersSpecialChars(str_array10);
    java.util.List list13 = sortApplication1.numericalSortSimpleSpecialChars(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "hi!" };
    java.lang.String str19 = commApplication16.commOnlySecond(str_array18);
    java.lang.String str20 = calApplication15.printCalForYear(str_array18);
    java.lang.String str21 = commApplication14.commOnlySecond(str_array18);
    java.util.List list22 = sortApplication1.sortAll(str_array18);
    java.util.List list23 = sortApplication0.sortSimpleCapitalSpecialChars(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication24 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = calApplication25.printCalForYearMondayFirst(str_array27);
    java.util.List list29 = sortApplication24.sortCapitalNumbersSpecialChars(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication30 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "" };
    java.lang.String str34 = calApplication31.printCalForYearMondayFirst(str_array33);
    java.util.List list35 = sortApplication30.sortCapitalNumbersSpecialChars(str_array33);
    java.util.List list36 = sortApplication24.numericalSortSimpleSpecialChars(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication37 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "" };
    java.lang.String str41 = calApplication38.printCalForYearMondayFirst(str_array40);
    java.util.List list42 = sortApplication37.sortCapitalNumbersSpecialChars(str_array40);
    java.util.List list43 = sortApplication24.numericalSortCapitalNumbersSpecialChars(str_array40);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication44 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array47 = new java.lang.String[] { "hi!" };
    java.lang.String str48 = commApplication45.commOnlySecond(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array53 = new java.lang.String[] { "hi!" };
    java.lang.String str54 = commApplication51.commOnlySecond(str_array53);
    java.lang.String str55 = calApplication50.printCalForYear(str_array53);
    java.lang.String str56 = commApplication49.commOnlySecond(str_array53);
    java.lang.String str57 = commApplication45.commOnlySecond(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication58 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication59 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array62 = new java.lang.String[] { "" };
    java.lang.String str63 = calApplication60.printCalForYearMondayFirst(str_array62);
    java.util.List list64 = sortApplication59.sortCapitalNumbersSpecialChars(str_array62);
    java.util.List list65 = sortApplication58.sortSimpleSpecialChars(str_array62);
    java.lang.String str66 = commApplication45.commAllMatches(str_array62);
    java.lang.String str67 = bcApplication44.lessThan(str_array62);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array70 = new java.lang.String[] { "" };
    java.lang.String str71 = calApplication68.printCalForYearMondayFirst(str_array70);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication72 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array74 = new java.lang.String[] { "" };
    java.lang.String str75 = calApplication72.printCalForYearMondayFirst(str_array74);
    java.lang.String str76 = calApplication68.printCal(str_array74);
    java.lang.String str77 = bcApplication44.and(str_array74);
    java.util.List list78 = sortApplication24.numericalSortSimpleCapital(str_array74);
    java.util.List list79 = sortApplication0.sortAll(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str48.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str54.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str56.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str57.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str66.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list79);

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test241"); }


    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication0 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication2 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = calApplication3.printCalForYearMondayFirst(str_array5);
    java.util.List list7 = sortApplication2.sortCapitalNumbersSpecialChars(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication8 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array11 = new java.lang.String[] { "" };
    java.lang.String str12 = calApplication9.printCalForYearMondayFirst(str_array11);
    java.util.List list13 = sortApplication8.sortCapitalNumbersSpecialChars(str_array11);
    java.util.List list14 = sortApplication2.numericalSortSimpleSpecialChars(str_array11);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "hi!" };
    java.lang.String str20 = commApplication17.commOnlySecond(str_array19);
    java.lang.String str21 = calApplication16.printCalForYear(str_array19);
    java.lang.String str22 = commApplication15.commOnlySecond(str_array19);
    java.util.List list23 = sortApplication2.sortAll(str_array19);
    java.util.List list24 = sortApplication1.sortSimpleCapitalSpecialChars(str_array19);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication25 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "" };
    java.lang.String str29 = calApplication26.printCalForYearMondayFirst(str_array28);
    java.util.List list30 = sortApplication25.sortCapitalNumbersSpecialChars(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "hi!" };
    java.lang.String str35 = commApplication32.commOnlySecond(str_array34);
    java.lang.String str36 = calApplication31.printCalForYear(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "hi!" };
    java.lang.String str40 = commApplication37.commOnlySecond(str_array39);
    java.lang.String str41 = calApplication31.printCalForYear(str_array39);
    java.util.List list42 = sortApplication25.sortNumbersSpecialChars(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication43 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = calApplication44.printCalForYearMondayFirst(str_array46);
    java.util.List list48 = sortApplication43.sortCapitalNumbersSpecialChars(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication49 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array52 = new java.lang.String[] { "" };
    java.lang.String str53 = calApplication50.printCalForYearMondayFirst(str_array52);
    java.util.List list54 = sortApplication49.sortCapitalNumbersSpecialChars(str_array52);
    java.util.List list55 = sortApplication43.numericalSortSimpleSpecialChars(str_array52);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array60 = new java.lang.String[] { "hi!" };
    java.lang.String str61 = commApplication58.commOnlySecond(str_array60);
    java.lang.String str62 = calApplication57.printCalForYear(str_array60);
    java.lang.String str63 = commApplication56.commOnlySecond(str_array60);
    java.util.List list64 = sortApplication43.sortAll(str_array60);
    java.util.List list65 = sortApplication25.numericalSortNumbersSpecialChars(str_array60);
    java.util.List list66 = sortApplication1.numericalSortSimpleNumbersSpecialChars(str_array60);
    java.io.InputStream inputStream67 = null;
    java.io.OutputStream outputStream68 = null;
    // The following exception was thrown during execution in test generation
    try {
      echoApplication0.run(str_array60, inputStream67, outputStream68);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.EchoException");
    } catch (sg.edu.nus.comp.cs4218.exception.EchoException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.EchoException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.EchoException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str22.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str35.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str40.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str61.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str63.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test242"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    java.util.List list12 = sortApplication0.numericalSortSimpleSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!" };
    java.lang.String str18 = commApplication15.commOnlySecond(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    java.lang.String str20 = commApplication13.commOnlySecond(str_array17);
    java.util.List list21 = sortApplication0.sortAll(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication22 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = calApplication24.printCalForYearMondayFirst(str_array26);
    java.util.List list28 = sortApplication23.sortCapitalNumbersSpecialChars(str_array26);
    java.util.List list29 = sortApplication22.sortSimpleSpecialChars(str_array26);
    java.util.List list30 = sortApplication0.numericalSortCapitalSpecialChars(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "hi!" };
    java.lang.String str36 = commApplication33.commOnlySecond(str_array35);
    java.lang.String str37 = calApplication32.printCalForYear(str_array35);
    java.lang.String str38 = commApplication31.commOnlySecond(str_array35);
    java.util.List list39 = sortApplication0.sortAll(str_array35);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array44 = new java.lang.String[] { "hi!" };
    java.lang.String str45 = commApplication42.commOnlySecond(str_array44);
    java.lang.String str46 = calApplication41.printCalForYear(str_array44);
    java.lang.String str47 = commApplication40.commOnlySecond(str_array44);
    java.lang.String[] str_array49 = new java.lang.String[] { "hi!" };
    java.lang.String str50 = commApplication40.commAllMatches(str_array49);
    java.util.List list51 = sortApplication0.sortStringsSimple(str_array49);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array55 = new java.lang.String[] { "hi!" };
    java.lang.String str56 = commApplication53.commOnlySecond(str_array55);
    java.lang.String str57 = calApplication52.printCalForYear(str_array55);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array60 = new java.lang.String[] { "" };
    java.lang.String str61 = calApplication58.printCalForYearMondayFirst(str_array60);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array64 = new java.lang.String[] { "hi!" };
    java.lang.String str65 = commApplication62.commOnlySecond(str_array64);
    java.lang.String str66 = calApplication58.printCalWithMondayFirst(str_array64);
    java.lang.String str67 = calApplication52.printCalWithMondayFirst(str_array64);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array70 = new java.lang.String[] { "" };
    java.lang.String str71 = calApplication68.printCalForYearMondayFirst(str_array70);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication72 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array74 = new java.lang.String[] { "" };
    java.lang.String str75 = calApplication72.printCalForYearMondayFirst(str_array74);
    java.lang.String str76 = calApplication68.printCal(str_array74);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication77 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication78 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array80 = new java.lang.String[] { "hi!" };
    java.lang.String str81 = commApplication78.commOnlySecond(str_array80);
    java.lang.String str82 = calApplication77.printCalForYear(str_array80);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication83 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array85 = new java.lang.String[] { "hi!" };
    java.lang.String str86 = commApplication83.commOnlySecond(str_array85);
    java.lang.String str87 = calApplication77.printCalForYear(str_array85);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication88 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication89 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication90 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array92 = new java.lang.String[] { "" };
    java.lang.String str93 = calApplication90.printCalForYearMondayFirst(str_array92);
    java.util.List list94 = sortApplication89.sortCapitalNumbersSpecialChars(str_array92);
    java.util.List list95 = sortApplication88.sortSimpleSpecialChars(str_array92);
    java.lang.String str96 = calApplication77.printCal(str_array92);
    java.lang.String str97 = calApplication68.printCalForMonthYear(str_array92);
    java.lang.String str98 = calApplication52.printCal(str_array92);
    java.util.List list99 = sortApplication0.sortStringsCapital(str_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str36.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str38.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str45.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str47.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str50.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str56.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str65.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str81.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str86.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list99);

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test243"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = calApplication8.printCalForYearMondayFirst(str_array10);
    java.util.List list12 = sortApplication7.sortCapitalNumbersSpecialChars(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "hi!" };
    java.lang.String str17 = commApplication14.commOnlySecond(str_array16);
    java.lang.String str18 = calApplication13.printCalForYear(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "hi!" };
    java.lang.String str22 = commApplication19.commOnlySecond(str_array21);
    java.lang.String str23 = calApplication13.printCalForYear(str_array21);
    java.util.List list24 = sortApplication7.sortNumbersSpecialChars(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "" };
    java.lang.String str29 = calApplication26.printCalForYearMondayFirst(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "" };
    java.lang.String str33 = calApplication30.printCalForYearMondayFirst(str_array32);
    java.lang.String str34 = calApplication26.printCal(str_array32);
    java.lang.String str35 = calApplication25.printCal(str_array32);
    java.util.List list36 = sortApplication7.numericalSortCapitalNumbersSpecialChars(str_array32);
    java.util.List list37 = sortApplication1.numericalSortCapitalNumbersSpecialChars(str_array32);
    java.lang.String[] str_array39 = new java.lang.String[] { "comm: terminated with error message comm: file is not readable" };
    java.util.List list40 = sortApplication1.numericalSortAll(str_array39);
    java.lang.String str41 = bcApplication0.bracket(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication42 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication43 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = calApplication44.printCalForYearMondayFirst(str_array46);
    java.util.List list48 = sortApplication43.sortCapitalNumbersSpecialChars(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication49 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array52 = new java.lang.String[] { "" };
    java.lang.String str53 = calApplication50.printCalForYearMondayFirst(str_array52);
    java.util.List list54 = sortApplication49.sortCapitalNumbersSpecialChars(str_array52);
    java.util.List list55 = sortApplication43.numericalSortSimpleSpecialChars(str_array52);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array60 = new java.lang.String[] { "hi!" };
    java.lang.String str61 = commApplication58.commOnlySecond(str_array60);
    java.lang.String str62 = calApplication57.printCalForYear(str_array60);
    java.lang.String str63 = commApplication56.commOnlySecond(str_array60);
    java.util.List list64 = sortApplication43.sortAll(str_array60);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication65 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication66 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication67 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array69 = new java.lang.String[] { "" };
    java.lang.String str70 = calApplication67.printCalForYearMondayFirst(str_array69);
    java.util.List list71 = sortApplication66.sortCapitalNumbersSpecialChars(str_array69);
    java.util.List list72 = sortApplication65.sortSimpleSpecialChars(str_array69);
    java.util.List list73 = sortApplication43.numericalSortCapitalSpecialChars(str_array69);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication74 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication75 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication76 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array78 = new java.lang.String[] { "hi!" };
    java.lang.String str79 = commApplication76.commOnlySecond(str_array78);
    java.lang.String str80 = calApplication75.printCalForYear(str_array78);
    java.lang.String str81 = commApplication74.commOnlySecond(str_array78);
    java.util.List list82 = sortApplication43.sortAll(str_array78);
    java.lang.String str83 = bcApplication42.equalEqual(str_array78);
    java.lang.String str84 = bcApplication0.number(str_array78);
    java.lang.String[] str_array85 = null;
    java.lang.String str86 = bcApplication0.multiply(str_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str17.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str22.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str61.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str63.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str79.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str81.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str86);

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test244"); }


    sg.edu.nus.comp.cs4218.impl.app.CatApplication catApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CatApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication7.printCalForYear(str_array15);
    java.util.List list18 = sortApplication1.sortNumbersSpecialChars(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication19 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = calApplication20.printCalForYearMondayFirst(str_array22);
    java.util.List list24 = sortApplication19.sortCapitalNumbersSpecialChars(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication25 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "" };
    java.lang.String str29 = calApplication26.printCalForYearMondayFirst(str_array28);
    java.util.List list30 = sortApplication25.sortCapitalNumbersSpecialChars(str_array28);
    java.util.List list31 = sortApplication19.numericalSortSimpleSpecialChars(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "hi!" };
    java.lang.String str37 = commApplication34.commOnlySecond(str_array36);
    java.lang.String str38 = calApplication33.printCalForYear(str_array36);
    java.lang.String str39 = commApplication32.commOnlySecond(str_array36);
    java.util.List list40 = sortApplication19.sortAll(str_array36);
    java.util.List list41 = sortApplication1.numericalSortNumbersSpecialChars(str_array36);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array44 = new java.lang.String[] { "" };
    java.lang.String str45 = calApplication42.printCalForYearMondayFirst(str_array44);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array48 = new java.lang.String[] { "hi!" };
    java.lang.String str49 = commApplication46.commOnlySecond(str_array48);
    java.lang.String str50 = calApplication42.printCalWithMondayFirst(str_array48);
    java.util.List list51 = sortApplication1.numericalSortSimpleSpecialChars(str_array48);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array55 = new java.lang.String[] { "" };
    java.lang.String str56 = calApplication53.printCalForYearMondayFirst(str_array55);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array59 = new java.lang.String[] { "" };
    java.lang.String str60 = calApplication57.printCalForYearMondayFirst(str_array59);
    java.lang.String str61 = calApplication53.printCal(str_array59);
    java.lang.String str62 = calApplication52.printCal(str_array59);
    java.util.List list63 = sortApplication1.numericalSortSimpleSpecialChars(str_array59);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array66 = new java.lang.String[] { "hi!" };
    java.lang.String str67 = commApplication64.commOnlySecond(str_array66);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication69 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication70 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array72 = new java.lang.String[] { "hi!" };
    java.lang.String str73 = commApplication70.commOnlySecond(str_array72);
    java.lang.String str74 = calApplication69.printCalForYear(str_array72);
    java.lang.String str75 = commApplication68.commOnlySecond(str_array72);
    java.lang.String str76 = commApplication64.commOnlySecond(str_array72);
    java.util.List list77 = sortApplication1.sortSimpleNumbersSpecialChars(str_array72);
    java.io.InputStream inputStream78 = null;
    java.io.OutputStream outputStream79 = null;
    // The following exception was thrown during execution in test generation
    try {
      catApplication0.run(str_array72, inputStream78, outputStream79);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CatException");
    } catch (sg.edu.nus.comp.cs4218.exception.CatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.CatException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CatException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str37.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str49.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str67.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str73.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str75.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str76.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test245"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    java.util.List list5 = sortApplication0.sortSimpleCapitalSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication12.printCalForYear(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!" };
    java.lang.String str21 = commApplication18.commOnlySecond(str_array20);
    java.lang.String str22 = calApplication12.printCalForYear(str_array20);
    java.util.List list23 = sortApplication6.sortNumbersSpecialChars(str_array20);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "hi!" };
    java.lang.String str28 = commApplication25.commOnlySecond(str_array27);
    java.lang.String str29 = calApplication24.printCalForYear(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "hi!" };
    java.lang.String str33 = commApplication30.commOnlySecond(str_array32);
    java.lang.String str34 = calApplication24.printCalForYear(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication35 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication36 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "" };
    java.lang.String str40 = calApplication37.printCalForYearMondayFirst(str_array39);
    java.util.List list41 = sortApplication36.sortCapitalNumbersSpecialChars(str_array39);
    java.util.List list42 = sortApplication35.sortSimpleSpecialChars(str_array39);
    java.lang.String str43 = calApplication24.printCal(str_array39);
    java.util.List list44 = sortApplication6.sortStringsSimple(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication45 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array48 = new java.lang.String[] { "" };
    java.lang.String str49 = calApplication46.printCalForYearMondayFirst(str_array48);
    java.util.List list50 = sortApplication45.sortCapitalNumbersSpecialChars(str_array48);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication51 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array54 = new java.lang.String[] { "" };
    java.lang.String str55 = calApplication52.printCalForYearMondayFirst(str_array54);
    java.util.List list56 = sortApplication51.sortCapitalNumbersSpecialChars(str_array54);
    java.util.List list57 = sortApplication45.numericalSortSimpleSpecialChars(str_array54);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication59 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array62 = new java.lang.String[] { "hi!" };
    java.lang.String str63 = commApplication60.commOnlySecond(str_array62);
    java.lang.String str64 = calApplication59.printCalForYear(str_array62);
    java.lang.String str65 = commApplication58.commOnlySecond(str_array62);
    java.util.List list66 = sortApplication45.sortAll(str_array62);
    java.util.List list67 = sortApplication6.numericalSortSimpleNumbers(str_array62);
    java.util.List list68 = sortApplication0.numericalSortSimpleCapital(str_array62);
    java.lang.String[] str_array69 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list70 = sortApplication0.numericalSortCapitalSpecialChars(str_array69);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str28.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str33.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str63.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str65.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test246"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    java.lang.String str12 = commApplication5.commOnlySecond(str_array9);
    java.lang.String str13 = commApplication1.commOnlySecond(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication14 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "" };
    java.lang.String str18 = calApplication15.printCalForYearMondayFirst(str_array17);
    java.util.List list19 = sortApplication14.sortCapitalNumbersSpecialChars(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array23 = new java.lang.String[] { "hi!" };
    java.lang.String str24 = commApplication21.commOnlySecond(str_array23);
    java.lang.String str25 = calApplication20.printCalForYear(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!" };
    java.lang.String str29 = commApplication26.commOnlySecond(str_array28);
    java.lang.String str30 = calApplication20.printCalForYear(str_array28);
    java.util.List list31 = sortApplication14.sortNumbersSpecialChars(str_array28);
    java.lang.String str32 = commApplication1.commBothMathches(str_array28);
    java.lang.String str33 = bcApplication0.add(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication34 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array37 = new java.lang.String[] { "" };
    java.lang.String str38 = calApplication35.printCalForYearMondayFirst(str_array37);
    java.util.List list39 = sortApplication34.sortCapitalNumbersSpecialChars(str_array37);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication40 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "" };
    java.lang.String str44 = calApplication41.printCalForYearMondayFirst(str_array43);
    java.util.List list45 = sortApplication40.sortCapitalNumbersSpecialChars(str_array43);
    java.util.List list46 = sortApplication34.numericalSortSimpleSpecialChars(str_array43);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication47 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication48 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array51 = new java.lang.String[] { "" };
    java.lang.String str52 = calApplication49.printCalForYearMondayFirst(str_array51);
    java.util.List list53 = sortApplication48.sortCapitalNumbersSpecialChars(str_array51);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication54 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "" };
    java.lang.String str58 = calApplication55.printCalForYearMondayFirst(str_array57);
    java.util.List list59 = sortApplication54.sortCapitalNumbersSpecialChars(str_array57);
    java.util.List list60 = sortApplication48.numericalSortSimpleSpecialChars(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication63 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array65 = new java.lang.String[] { "hi!" };
    java.lang.String str66 = commApplication63.commOnlySecond(str_array65);
    java.lang.String str67 = calApplication62.printCalForYear(str_array65);
    java.lang.String str68 = commApplication61.commOnlySecond(str_array65);
    java.util.List list69 = sortApplication48.sortAll(str_array65);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication70 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication71 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication72 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array74 = new java.lang.String[] { "" };
    java.lang.String str75 = calApplication72.printCalForYearMondayFirst(str_array74);
    java.util.List list76 = sortApplication71.sortCapitalNumbersSpecialChars(str_array74);
    java.util.List list77 = sortApplication70.sortSimpleSpecialChars(str_array74);
    java.util.List list78 = sortApplication48.numericalSortCapitalSpecialChars(str_array74);
    java.lang.String str79 = bcApplication47.subtract(str_array74);
    java.util.List list80 = sortApplication34.numericalSortSimpleCapitalSpecialChars(str_array74);
    java.lang.String str81 = bcApplication0.bracket(str_array74);
    java.lang.String[] str_array82 = null;
    java.lang.String str83 = bcApplication0.greaterThan(str_array82);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication84 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication85 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array87 = new java.lang.String[] { "" };
    java.lang.String str88 = calApplication85.printCalForYearMondayFirst(str_array87);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication89 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array91 = new java.lang.String[] { "hi!" };
    java.lang.String str92 = commApplication89.commOnlySecond(str_array91);
    java.lang.String str93 = calApplication85.printCalWithMondayFirst(str_array91);
    java.util.List list94 = sortApplication84.sortCapitalNumbers(str_array91);
    java.lang.String str95 = bcApplication0.greaterThanOrEqual(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str24.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str32.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str66.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str68.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str92 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str92.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str95);

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test247"); }


    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication0 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    java.lang.String str6 = calApplication1.printCalForYear(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array11 = new java.lang.String[] { "hi!" };
    java.lang.String str12 = commApplication9.commOnlySecond(str_array11);
    java.lang.String str13 = calApplication8.printCalForYear(str_array11);
    java.lang.String str14 = commApplication7.commOnlySecond(str_array11);
    java.lang.String str15 = calApplication1.printCalForMonthYearMondayFirst(str_array11);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication16 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication17 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array20 = new java.lang.String[] { "" };
    java.lang.String str21 = calApplication18.printCalForYearMondayFirst(str_array20);
    java.util.List list22 = sortApplication17.sortCapitalNumbersSpecialChars(str_array20);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = calApplication24.printCalForYearMondayFirst(str_array26);
    java.util.List list28 = sortApplication23.sortCapitalNumbersSpecialChars(str_array26);
    java.util.List list29 = sortApplication17.numericalSortSimpleSpecialChars(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "hi!" };
    java.lang.String str35 = commApplication32.commOnlySecond(str_array34);
    java.lang.String str36 = calApplication31.printCalForYear(str_array34);
    java.lang.String str37 = commApplication30.commOnlySecond(str_array34);
    java.util.List list38 = sortApplication17.sortAll(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication39 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication40 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "" };
    java.lang.String str44 = calApplication41.printCalForYearMondayFirst(str_array43);
    java.util.List list45 = sortApplication40.sortCapitalNumbersSpecialChars(str_array43);
    java.util.List list46 = sortApplication39.sortSimpleSpecialChars(str_array43);
    java.util.List list47 = sortApplication17.numericalSortCapitalSpecialChars(str_array43);
    java.lang.String str48 = bcApplication16.subtract(str_array43);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication49 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array52 = new java.lang.String[] { "" };
    java.lang.String str53 = calApplication50.printCalForYearMondayFirst(str_array52);
    java.util.List list54 = sortApplication49.sortCapitalNumbersSpecialChars(str_array52);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication55 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array58 = new java.lang.String[] { "" };
    java.lang.String str59 = calApplication56.printCalForYearMondayFirst(str_array58);
    java.util.List list60 = sortApplication55.sortCapitalNumbersSpecialChars(str_array58);
    java.util.List list61 = sortApplication49.numericalSortSimpleSpecialChars(str_array58);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication63 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array66 = new java.lang.String[] { "hi!" };
    java.lang.String str67 = commApplication64.commOnlySecond(str_array66);
    java.lang.String str68 = calApplication63.printCalForYear(str_array66);
    java.lang.String str69 = commApplication62.commOnlySecond(str_array66);
    java.util.List list70 = sortApplication49.sortAll(str_array66);
    java.lang.String str71 = bcApplication16.add(str_array66);
    java.lang.String str72 = calApplication1.printCalForYearMondayFirst(str_array66);
    java.io.InputStream inputStream73 = null;
    java.io.OutputStream outputStream74 = null;
    // The following exception was thrown during execution in test generation
    try {
      echoApplication0.run(str_array66, inputStream73, outputStream74);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.EchoException");
    } catch (sg.edu.nus.comp.cs4218.exception.EchoException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.EchoException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.EchoException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str14.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str35.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str37.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str67.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str69.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test248"); }


    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication0 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = calApplication8.printCalForYearMondayFirst(str_array10);
    java.util.List list12 = sortApplication7.sortCapitalNumbersSpecialChars(str_array10);
    java.util.List list13 = sortApplication1.numericalSortSimpleSpecialChars(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "hi!" };
    java.lang.String str19 = commApplication16.commOnlySecond(str_array18);
    java.lang.String str20 = calApplication15.printCalForYear(str_array18);
    java.lang.String str21 = commApplication14.commOnlySecond(str_array18);
    java.util.List list22 = sortApplication1.sortAll(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication24 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = calApplication25.printCalForYearMondayFirst(str_array27);
    java.util.List list29 = sortApplication24.sortCapitalNumbersSpecialChars(str_array27);
    java.util.List list30 = sortApplication23.sortSimpleSpecialChars(str_array27);
    java.util.List list31 = sortApplication1.numericalSortCapitalSpecialChars(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "hi!" };
    java.lang.String str37 = commApplication34.commOnlySecond(str_array36);
    java.lang.String str38 = calApplication33.printCalForYear(str_array36);
    java.lang.String str39 = commApplication32.commOnlySecond(str_array36);
    java.util.List list40 = sortApplication1.sortAll(str_array36);
    java.io.InputStream inputStream41 = null;
    java.io.OutputStream outputStream42 = null;
    // The following exception was thrown during execution in test generation
    try {
      echoApplication0.run(str_array36, inputStream41, outputStream42);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.EchoException");
    } catch (sg.edu.nus.comp.cs4218.exception.EchoException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.EchoException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.EchoException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str37.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test249"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    java.lang.String str5 = calApplication0.printCalForYear(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    java.lang.String str13 = commApplication6.commOnlySecond(str_array10);
    java.lang.String str14 = calApplication0.printCalForMonthYearMondayFirst(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication15 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication16 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "" };
    java.lang.String str20 = calApplication17.printCalForYearMondayFirst(str_array19);
    java.util.List list21 = sortApplication16.sortCapitalNumbersSpecialChars(str_array19);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication22 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array25 = new java.lang.String[] { "" };
    java.lang.String str26 = calApplication23.printCalForYearMondayFirst(str_array25);
    java.util.List list27 = sortApplication22.sortCapitalNumbersSpecialChars(str_array25);
    java.util.List list28 = sortApplication16.numericalSortSimpleSpecialChars(str_array25);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "hi!" };
    java.lang.String str34 = commApplication31.commOnlySecond(str_array33);
    java.lang.String str35 = calApplication30.printCalForYear(str_array33);
    java.lang.String str36 = commApplication29.commOnlySecond(str_array33);
    java.util.List list37 = sortApplication16.sortAll(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication38 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication39 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array42 = new java.lang.String[] { "" };
    java.lang.String str43 = calApplication40.printCalForYearMondayFirst(str_array42);
    java.util.List list44 = sortApplication39.sortCapitalNumbersSpecialChars(str_array42);
    java.util.List list45 = sortApplication38.sortSimpleSpecialChars(str_array42);
    java.util.List list46 = sortApplication16.numericalSortCapitalSpecialChars(str_array42);
    java.lang.String str47 = bcApplication15.subtract(str_array42);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication48 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array51 = new java.lang.String[] { "" };
    java.lang.String str52 = calApplication49.printCalForYearMondayFirst(str_array51);
    java.util.List list53 = sortApplication48.sortCapitalNumbersSpecialChars(str_array51);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication54 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "" };
    java.lang.String str58 = calApplication55.printCalForYearMondayFirst(str_array57);
    java.util.List list59 = sortApplication54.sortCapitalNumbersSpecialChars(str_array57);
    java.util.List list60 = sortApplication48.numericalSortSimpleSpecialChars(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication63 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array65 = new java.lang.String[] { "hi!" };
    java.lang.String str66 = commApplication63.commOnlySecond(str_array65);
    java.lang.String str67 = calApplication62.printCalForYear(str_array65);
    java.lang.String str68 = commApplication61.commOnlySecond(str_array65);
    java.util.List list69 = sortApplication48.sortAll(str_array65);
    java.lang.String str70 = bcApplication15.add(str_array65);
    java.lang.String str71 = calApplication0.printCalForYearMondayFirst(str_array65);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication72 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array74 = new java.lang.String[] { "" };
    java.lang.String str75 = calApplication72.printCalForYearMondayFirst(str_array74);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication76 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array78 = new java.lang.String[] { "hi!" };
    java.lang.String str79 = commApplication76.commOnlySecond(str_array78);
    java.lang.String str80 = calApplication72.printCalWithMondayFirst(str_array78);
    java.lang.String str81 = calApplication0.printCal(str_array78);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication82 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication83 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication84 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication85 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array87 = new java.lang.String[] { "" };
    java.lang.String str88 = calApplication85.printCalForYearMondayFirst(str_array87);
    java.util.List list89 = sortApplication84.sortCapitalNumbersSpecialChars(str_array87);
    java.util.List list90 = sortApplication83.sortSimpleSpecialChars(str_array87);
    java.lang.String str91 = bcApplication82.lessThan(str_array87);
    java.lang.String str92 = calApplication0.printCalWithMondayFirst(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str36.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str66.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str68.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str79.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str92);

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test250"); }


    sg.edu.nus.comp.cs4218.impl.app.FmtApplication fmtApplication0 = new sg.edu.nus.comp.cs4218.impl.app.FmtApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = calApplication8.printCalForYearMondayFirst(str_array10);
    java.util.List list12 = sortApplication7.sortCapitalNumbersSpecialChars(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "hi!" };
    java.lang.String str17 = commApplication14.commOnlySecond(str_array16);
    java.lang.String str18 = calApplication13.printCalForYear(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "hi!" };
    java.lang.String str22 = commApplication19.commOnlySecond(str_array21);
    java.lang.String str23 = calApplication13.printCalForYear(str_array21);
    java.util.List list24 = sortApplication7.sortNumbersSpecialChars(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "" };
    java.lang.String str29 = calApplication26.printCalForYearMondayFirst(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "" };
    java.lang.String str33 = calApplication30.printCalForYearMondayFirst(str_array32);
    java.lang.String str34 = calApplication26.printCal(str_array32);
    java.lang.String str35 = calApplication25.printCal(str_array32);
    java.util.List list36 = sortApplication7.numericalSortCapitalNumbersSpecialChars(str_array32);
    java.util.List list37 = sortApplication1.numericalSortCapitalNumbersSpecialChars(str_array32);
    java.lang.String[] str_array39 = new java.lang.String[] { "comm: terminated with error message comm: file is not readable" };
    java.util.List list40 = sortApplication1.numericalSortAll(str_array39);
    java.io.InputStream inputStream41 = null;
    java.io.OutputStream outputStream42 = null;
    // The following exception was thrown during execution in test generation
    try {
      fmtApplication0.run(str_array39, inputStream41, outputStream42);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.FmtException");
    } catch (sg.edu.nus.comp.cs4218.exception.FmtException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.FmtException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.FmtException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str17.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str22.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test251"); }


    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array2 = new java.lang.String[] { "hi!" };
    java.lang.String str3 = commApplication0.commOnlySecond(str_array2);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication4 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array7 = new java.lang.String[] { "hi!" };
    java.lang.String str8 = commApplication5.commOnlySecond(str_array7);
    java.lang.String str9 = calApplication4.printCalForYear(str_array7);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array12 = new java.lang.String[] { "hi!" };
    java.lang.String str13 = commApplication10.commOnlySecond(str_array12);
    java.lang.String str14 = calApplication4.printCalForYear(str_array12);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication15 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication16 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "" };
    java.lang.String str20 = calApplication17.printCalForYearMondayFirst(str_array19);
    java.util.List list21 = sortApplication16.sortCapitalNumbersSpecialChars(str_array19);
    java.util.List list22 = sortApplication15.sortSimpleSpecialChars(str_array19);
    java.lang.String str23 = calApplication4.printCal(str_array19);
    java.lang.String str24 = commApplication0.commOnlySecond(str_array19);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication25 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication26 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array29 = new java.lang.String[] { "" };
    java.lang.String str30 = calApplication27.printCalForYearMondayFirst(str_array29);
    java.util.List list31 = sortApplication26.sortCapitalNumbersSpecialChars(str_array29);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "hi!" };
    java.lang.String str36 = commApplication33.commOnlySecond(str_array35);
    java.lang.String str37 = calApplication32.printCalForYear(str_array35);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "hi!" };
    java.lang.String str41 = commApplication38.commOnlySecond(str_array40);
    java.lang.String str42 = calApplication32.printCalForYear(str_array40);
    java.util.List list43 = sortApplication26.sortNumbersSpecialChars(str_array40);
    java.lang.String str44 = bcApplication25.notEqual(str_array40);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication45 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array48 = new java.lang.String[] { "" };
    java.lang.String str49 = calApplication46.printCalForYearMondayFirst(str_array48);
    java.util.List list50 = sortApplication45.sortCapitalNumbersSpecialChars(str_array48);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication51 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array54 = new java.lang.String[] { "" };
    java.lang.String str55 = calApplication52.printCalForYearMondayFirst(str_array54);
    java.util.List list56 = sortApplication51.sortCapitalNumbersSpecialChars(str_array54);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array60 = new java.lang.String[] { "hi!" };
    java.lang.String str61 = commApplication58.commOnlySecond(str_array60);
    java.lang.String str62 = calApplication57.printCalForYear(str_array60);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication63 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array65 = new java.lang.String[] { "hi!" };
    java.lang.String str66 = commApplication63.commOnlySecond(str_array65);
    java.lang.String str67 = calApplication57.printCalForYear(str_array65);
    java.util.List list68 = sortApplication51.sortNumbersSpecialChars(str_array65);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication69 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication70 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array72 = new java.lang.String[] { "" };
    java.lang.String str73 = calApplication70.printCalForYearMondayFirst(str_array72);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication74 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array76 = new java.lang.String[] { "" };
    java.lang.String str77 = calApplication74.printCalForYearMondayFirst(str_array76);
    java.lang.String str78 = calApplication70.printCal(str_array76);
    java.lang.String str79 = calApplication69.printCal(str_array76);
    java.util.List list80 = sortApplication51.numericalSortCapitalNumbersSpecialChars(str_array76);
    java.util.List list81 = sortApplication45.numericalSortCapitalNumbersSpecialChars(str_array76);
    java.lang.String[] str_array83 = new java.lang.String[] { "comm: terminated with error message comm: file is not readable" };
    java.util.List list84 = sortApplication45.numericalSortAll(str_array83);
    java.lang.String str85 = bcApplication25.notEqual(str_array83);
    java.io.InputStream inputStream86 = null;
    java.io.OutputStream outputStream87 = null;
    // The following exception was thrown during execution in test generation
    try {
      commApplication0.run(str_array83, inputStream86, outputStream87);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CommException");
    } catch (sg.edu.nus.comp.cs4218.exception.CommException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.CommException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CommException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str3.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str8.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str24.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str36.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str41.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str61.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str66.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str85);

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test252"); }


    sg.edu.nus.comp.cs4218.impl.app.TailApplication tailApplication0 = new sg.edu.nus.comp.cs4218.impl.app.TailApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication7.printCalForYear(str_array15);
    java.util.List list18 = sortApplication1.sortNumbersSpecialChars(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication19 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication20 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array23 = new java.lang.String[] { "" };
    java.lang.String str24 = calApplication21.printCalForYearMondayFirst(str_array23);
    java.util.List list25 = sortApplication20.sortCapitalNumbersSpecialChars(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array29 = new java.lang.String[] { "hi!" };
    java.lang.String str30 = commApplication27.commOnlySecond(str_array29);
    java.lang.String str31 = calApplication26.printCalForYear(str_array29);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "hi!" };
    java.lang.String str35 = commApplication32.commOnlySecond(str_array34);
    java.lang.String str36 = calApplication26.printCalForYear(str_array34);
    java.util.List list37 = sortApplication20.sortNumbersSpecialChars(str_array34);
    java.lang.String str38 = bcApplication19.notEqual(str_array34);
    java.util.List list39 = sortApplication1.sortSimpleNumbers(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "hi!" };
    java.lang.String str44 = commApplication41.commOnlySecond(str_array43);
    java.lang.String str45 = calApplication40.printCalForYear(str_array43);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array48 = new java.lang.String[] { "hi!" };
    java.lang.String str49 = commApplication46.commOnlySecond(str_array48);
    java.lang.String str50 = calApplication40.printCalForYear(str_array48);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication51 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication52 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array55 = new java.lang.String[] { "" };
    java.lang.String str56 = calApplication53.printCalForYearMondayFirst(str_array55);
    java.util.List list57 = sortApplication52.sortCapitalNumbersSpecialChars(str_array55);
    java.util.List list58 = sortApplication51.sortSimpleSpecialChars(str_array55);
    java.lang.String str59 = calApplication40.printCal(str_array55);
    java.util.List list60 = sortApplication1.sortStringsCapital(str_array55);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array64 = new java.lang.String[] { "hi!" };
    java.lang.String str65 = commApplication62.commOnlySecond(str_array64);
    java.lang.String str66 = calApplication61.printCalForYear(str_array64);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication67 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array69 = new java.lang.String[] { "hi!" };
    java.lang.String str70 = commApplication67.commOnlySecond(str_array69);
    java.lang.String str71 = calApplication61.printCalForYear(str_array69);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication72 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication73 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication74 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array76 = new java.lang.String[] { "" };
    java.lang.String str77 = calApplication74.printCalForYearMondayFirst(str_array76);
    java.util.List list78 = sortApplication73.sortCapitalNumbersSpecialChars(str_array76);
    java.util.List list79 = sortApplication72.sortSimpleSpecialChars(str_array76);
    java.lang.String str80 = calApplication61.printCal(str_array76);
    java.util.List list81 = sortApplication1.numericalSortAll(str_array76);
    java.io.InputStream inputStream82 = null;
    java.io.OutputStream outputStream83 = null;
    // The following exception was thrown during execution in test generation
    try {
      tailApplication0.run(str_array76, inputStream82, outputStream83);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException");
    } catch (sg.edu.nus.comp.cs4218.exception.TailException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.TailException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str30.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str35.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str44.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str49.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str65.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str70.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list81);

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test253"); }


    sg.edu.nus.comp.cs4218.impl.app.DateApplication dateApplication0 = new sg.edu.nus.comp.cs4218.impl.app.DateApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    java.lang.String str6 = calApplication1.printCalForYear(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array11 = new java.lang.String[] { "hi!" };
    java.lang.String str12 = commApplication9.commOnlySecond(str_array11);
    java.lang.String str13 = calApplication8.printCalForYear(str_array11);
    java.lang.String str14 = commApplication7.commOnlySecond(str_array11);
    java.lang.String str15 = calApplication1.printCalForMonthYearMondayFirst(str_array11);
    java.io.InputStream inputStream16 = null;
    java.io.OutputStream outputStream17 = null;
    // The following exception was thrown during execution in test generation
    try {
      dateApplication0.run(str_array11, inputStream16, outputStream17);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException");
    } catch (sg.edu.nus.comp.cs4218.exception.DateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.DateException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str14.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str15);

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test254"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    java.util.List list12 = sortApplication0.sortAll(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "" };
    java.lang.String str16 = calApplication13.printCalForYearMondayFirst(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "hi!" };
    java.lang.String str20 = commApplication17.commOnlySecond(str_array19);
    java.lang.String str21 = calApplication13.printCalWithMondayFirst(str_array19);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication22 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array25 = new java.lang.String[] { "" };
    java.lang.String str26 = calApplication23.printCalForYearMondayFirst(str_array25);
    java.util.List list27 = sortApplication22.sortCapitalNumbersSpecialChars(str_array25);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication28 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array31 = new java.lang.String[] { "" };
    java.lang.String str32 = calApplication29.printCalForYearMondayFirst(str_array31);
    java.util.List list33 = sortApplication28.sortCapitalNumbersSpecialChars(str_array31);
    java.util.List list34 = sortApplication22.numericalSortSimpleSpecialChars(str_array31);
    java.lang.String str35 = calApplication13.printCalForYear(str_array31);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array38 = new java.lang.String[] { "hi!" };
    java.lang.String str39 = commApplication36.commOnlySecond(str_array38);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication40 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "hi!" };
    java.lang.String str44 = commApplication41.commOnlySecond(str_array43);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array49 = new java.lang.String[] { "hi!" };
    java.lang.String str50 = commApplication47.commOnlySecond(str_array49);
    java.lang.String str51 = calApplication46.printCalForYear(str_array49);
    java.lang.String str52 = commApplication45.commOnlySecond(str_array49);
    java.lang.String str53 = commApplication41.commOnlySecond(str_array49);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication54 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication55 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array58 = new java.lang.String[] { "" };
    java.lang.String str59 = calApplication56.printCalForYearMondayFirst(str_array58);
    java.util.List list60 = sortApplication55.sortCapitalNumbersSpecialChars(str_array58);
    java.util.List list61 = sortApplication54.sortSimpleSpecialChars(str_array58);
    java.lang.String str62 = commApplication41.commAllMatches(str_array58);
    java.lang.String str63 = bcApplication40.lessThan(str_array58);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication64 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication65 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array67 = new java.lang.String[] { "" };
    java.lang.String str68 = calApplication65.printCalForYearMondayFirst(str_array67);
    java.util.List list69 = sortApplication64.sortCapitalNumbersSpecialChars(str_array67);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication70 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication71 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array73 = new java.lang.String[] { "hi!" };
    java.lang.String str74 = commApplication71.commOnlySecond(str_array73);
    java.lang.String str75 = calApplication70.printCalForYear(str_array73);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication76 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array78 = new java.lang.String[] { "hi!" };
    java.lang.String str79 = commApplication76.commOnlySecond(str_array78);
    java.lang.String str80 = calApplication70.printCalForYear(str_array78);
    java.util.List list81 = sortApplication64.sortNumbersSpecialChars(str_array78);
    java.lang.String str82 = bcApplication40.negate(str_array78);
    java.lang.String str83 = commApplication36.commOnlyFirst(str_array78);
    java.lang.String str84 = calApplication13.printCalForYearMondayFirst(str_array78);
    java.util.List list85 = sortApplication0.sortSimpleNumbersSpecialChars(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str44.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str50.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str52.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str53.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str62.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str74.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str79.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str83.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list85);

  }

  @Test
  public void test255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test255"); }


    sg.edu.nus.comp.cs4218.impl.app.FmtApplication fmtApplication0 = new sg.edu.nus.comp.cs4218.impl.app.FmtApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    java.util.List list6 = sortApplication1.sortSimpleCapitalSpecialChars(str_array4);
    java.io.InputStream inputStream7 = null;
    java.io.OutputStream outputStream8 = null;
    // The following exception was thrown during execution in test generation
    try {
      fmtApplication0.run(str_array4, inputStream7, outputStream8);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.FmtException");
    } catch (sg.edu.nus.comp.cs4218.exception.FmtException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.FmtException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.FmtException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);

  }

  @Test
  public void test256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test256"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    java.util.List list12 = sortApplication0.numericalSortSimpleSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication13 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "" };
    java.lang.String str17 = calApplication14.printCalForYearMondayFirst(str_array16);
    java.util.List list18 = sortApplication13.sortCapitalNumbersSpecialChars(str_array16);
    java.util.List list19 = sortApplication0.numericalSortCapitalNumbersSpecialChars(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication20 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array23 = new java.lang.String[] { "hi!" };
    java.lang.String str24 = commApplication21.commOnlySecond(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array29 = new java.lang.String[] { "hi!" };
    java.lang.String str30 = commApplication27.commOnlySecond(str_array29);
    java.lang.String str31 = calApplication26.printCalForYear(str_array29);
    java.lang.String str32 = commApplication25.commOnlySecond(str_array29);
    java.lang.String str33 = commApplication21.commOnlySecond(str_array29);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication34 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication35 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array38 = new java.lang.String[] { "" };
    java.lang.String str39 = calApplication36.printCalForYearMondayFirst(str_array38);
    java.util.List list40 = sortApplication35.sortCapitalNumbersSpecialChars(str_array38);
    java.util.List list41 = sortApplication34.sortSimpleSpecialChars(str_array38);
    java.lang.String str42 = commApplication21.commAllMatches(str_array38);
    java.lang.String str43 = bcApplication20.lessThan(str_array38);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = calApplication44.printCalForYearMondayFirst(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array50 = new java.lang.String[] { "" };
    java.lang.String str51 = calApplication48.printCalForYearMondayFirst(str_array50);
    java.lang.String str52 = calApplication44.printCal(str_array50);
    java.lang.String str53 = bcApplication20.and(str_array50);
    java.util.List list54 = sortApplication0.numericalSortSimpleCapital(str_array50);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "hi!" };
    java.lang.String str58 = commApplication55.commOnlySecond(str_array57);
    java.util.List list59 = sortApplication0.numericalSortCapitalSpecialChars(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str24.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str30.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str32.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str33.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str42.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str58.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);

  }

  @Test
  public void test257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test257"); }


    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    java.lang.String str6 = calApplication1.printCalForYear(str_array4);
    java.lang.String str7 = commApplication0.commOnlySecond(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication12 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "" };
    java.lang.String str16 = calApplication13.printCalForYearMondayFirst(str_array15);
    java.util.List list17 = sortApplication12.sortCapitalNumbersSpecialChars(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication18 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = calApplication19.printCalForYearMondayFirst(str_array21);
    java.util.List list23 = sortApplication18.sortCapitalNumbersSpecialChars(str_array21);
    java.util.List list24 = sortApplication12.numericalSortSimpleSpecialChars(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array29 = new java.lang.String[] { "hi!" };
    java.lang.String str30 = commApplication27.commOnlySecond(str_array29);
    java.lang.String str31 = calApplication26.printCalForYear(str_array29);
    java.lang.String str32 = commApplication25.commOnlySecond(str_array29);
    java.util.List list33 = sortApplication12.sortAll(str_array29);
    java.lang.String str34 = commApplication8.commOnlyFirst(str_array29);
    java.io.InputStream inputStream35 = null;
    java.io.OutputStream outputStream36 = null;
    // The following exception was thrown during execution in test generation
    try {
      commApplication0.run(str_array29, inputStream35, outputStream36);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CommException");
    } catch (sg.edu.nus.comp.cs4218.exception.CommException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.CommException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CommException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str7.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str30.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str32.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));

  }

  @Test
  public void test258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test258"); }


    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication2 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array5 = new java.lang.String[] { "hi!" };
    java.lang.String str6 = commApplication3.commOnlySecond(str_array5);
    java.util.List list7 = sortApplication2.sortSimpleCapitalSpecialChars(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication8 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array11 = new java.lang.String[] { "" };
    java.lang.String str12 = calApplication9.printCalForYearMondayFirst(str_array11);
    java.util.List list13 = sortApplication8.sortCapitalNumbersSpecialChars(str_array11);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!" };
    java.lang.String str18 = commApplication15.commOnlySecond(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "hi!" };
    java.lang.String str23 = commApplication20.commOnlySecond(str_array22);
    java.lang.String str24 = calApplication14.printCalForYear(str_array22);
    java.util.List list25 = sortApplication8.sortNumbersSpecialChars(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array29 = new java.lang.String[] { "hi!" };
    java.lang.String str30 = commApplication27.commOnlySecond(str_array29);
    java.lang.String str31 = calApplication26.printCalForYear(str_array29);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "hi!" };
    java.lang.String str35 = commApplication32.commOnlySecond(str_array34);
    java.lang.String str36 = calApplication26.printCalForYear(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication37 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication38 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array41 = new java.lang.String[] { "" };
    java.lang.String str42 = calApplication39.printCalForYearMondayFirst(str_array41);
    java.util.List list43 = sortApplication38.sortCapitalNumbersSpecialChars(str_array41);
    java.util.List list44 = sortApplication37.sortSimpleSpecialChars(str_array41);
    java.lang.String str45 = calApplication26.printCal(str_array41);
    java.util.List list46 = sortApplication8.sortStringsSimple(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication47 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array50 = new java.lang.String[] { "" };
    java.lang.String str51 = calApplication48.printCalForYearMondayFirst(str_array50);
    java.util.List list52 = sortApplication47.sortCapitalNumbersSpecialChars(str_array50);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication53 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array56 = new java.lang.String[] { "" };
    java.lang.String str57 = calApplication54.printCalForYearMondayFirst(str_array56);
    java.util.List list58 = sortApplication53.sortCapitalNumbersSpecialChars(str_array56);
    java.util.List list59 = sortApplication47.numericalSortSimpleSpecialChars(str_array56);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array64 = new java.lang.String[] { "hi!" };
    java.lang.String str65 = commApplication62.commOnlySecond(str_array64);
    java.lang.String str66 = calApplication61.printCalForYear(str_array64);
    java.lang.String str67 = commApplication60.commOnlySecond(str_array64);
    java.util.List list68 = sortApplication47.sortAll(str_array64);
    java.util.List list69 = sortApplication8.numericalSortSimpleNumbers(str_array64);
    java.util.List list70 = sortApplication2.numericalSortSimpleCapital(str_array64);
    java.lang.String str71 = commApplication1.commNoMatches(str_array64);
    java.lang.String str72 = commApplication0.commOnlySecond(str_array64);
    java.lang.String[] str_array73 = null;
    java.lang.String str74 = commApplication0.commNoMatches(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str6.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str23.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str30.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str35.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str65.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str67.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str71.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str72.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "comm: terminated with error message comm: null"+ "'", str74.equals("comm: terminated with error message comm: null"));

  }

  @Test
  public void test259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test259"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    java.lang.String str12 = commApplication5.commOnlySecond(str_array9);
    java.lang.String str13 = commApplication1.commOnlySecond(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication14 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication15 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "" };
    java.lang.String str19 = calApplication16.printCalForYearMondayFirst(str_array18);
    java.util.List list20 = sortApplication15.sortCapitalNumbersSpecialChars(str_array18);
    java.util.List list21 = sortApplication14.sortSimpleSpecialChars(str_array18);
    java.lang.String str22 = commApplication1.commAllMatches(str_array18);
    java.lang.String str23 = bcApplication0.lessThan(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication24 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = calApplication25.printCalForYearMondayFirst(str_array27);
    java.util.List list29 = sortApplication24.sortCapitalNumbersSpecialChars(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "hi!" };
    java.lang.String str34 = commApplication31.commOnlySecond(str_array33);
    java.lang.String str35 = calApplication30.printCalForYear(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array38 = new java.lang.String[] { "hi!" };
    java.lang.String str39 = commApplication36.commOnlySecond(str_array38);
    java.lang.String str40 = calApplication30.printCalForYear(str_array38);
    java.util.List list41 = sortApplication24.sortNumbersSpecialChars(str_array38);
    java.lang.String str42 = bcApplication0.negate(str_array38);
    java.lang.String[] str_array43 = null;
    java.lang.String str44 = bcApplication0.negate(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str22.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);

  }

  @Test
  public void test260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test260"); }


    sg.edu.nus.comp.cs4218.impl.app.CatApplication catApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CatApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    java.lang.String str6 = calApplication1.printCalForYear(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array13 = new java.lang.String[] { "hi!" };
    java.lang.String str14 = commApplication11.commOnlySecond(str_array13);
    java.lang.String str15 = calApplication7.printCalWithMondayFirst(str_array13);
    java.lang.String str16 = calApplication1.printCalWithMondayFirst(str_array13);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "" };
    java.lang.String str20 = calApplication17.printCalForYearMondayFirst(str_array19);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array23 = new java.lang.String[] { "" };
    java.lang.String str24 = calApplication21.printCalForYearMondayFirst(str_array23);
    java.lang.String str25 = calApplication17.printCal(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array29 = new java.lang.String[] { "hi!" };
    java.lang.String str30 = commApplication27.commOnlySecond(str_array29);
    java.lang.String str31 = calApplication26.printCalForYear(str_array29);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "hi!" };
    java.lang.String str35 = commApplication32.commOnlySecond(str_array34);
    java.lang.String str36 = calApplication26.printCalForYear(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication37 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication38 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array41 = new java.lang.String[] { "" };
    java.lang.String str42 = calApplication39.printCalForYearMondayFirst(str_array41);
    java.util.List list43 = sortApplication38.sortCapitalNumbersSpecialChars(str_array41);
    java.util.List list44 = sortApplication37.sortSimpleSpecialChars(str_array41);
    java.lang.String str45 = calApplication26.printCal(str_array41);
    java.lang.String str46 = calApplication17.printCalForMonthYear(str_array41);
    java.lang.String str47 = calApplication1.printCal(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication48 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication49 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array52 = new java.lang.String[] { "" };
    java.lang.String str53 = calApplication50.printCalForYearMondayFirst(str_array52);
    java.util.List list54 = sortApplication49.sortCapitalNumbersSpecialChars(str_array52);
    java.util.List list55 = sortApplication48.sortSimpleSpecialChars(str_array52);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication56 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array59 = new java.lang.String[] { "" };
    java.lang.String str60 = calApplication57.printCalForYearMondayFirst(str_array59);
    java.util.List list61 = sortApplication56.sortCapitalNumbersSpecialChars(str_array59);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array64 = new java.lang.String[] { "" };
    java.lang.String str65 = calApplication62.printCalForYearMondayFirst(str_array64);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication66 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array68 = new java.lang.String[] { "hi!" };
    java.lang.String str69 = commApplication66.commOnlySecond(str_array68);
    java.lang.String str70 = calApplication62.printCalWithMondayFirst(str_array68);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication71 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication72 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array74 = new java.lang.String[] { "" };
    java.lang.String str75 = calApplication72.printCalForYearMondayFirst(str_array74);
    java.util.List list76 = sortApplication71.sortCapitalNumbersSpecialChars(str_array74);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication77 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication78 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array80 = new java.lang.String[] { "" };
    java.lang.String str81 = calApplication78.printCalForYearMondayFirst(str_array80);
    java.util.List list82 = sortApplication77.sortCapitalNumbersSpecialChars(str_array80);
    java.util.List list83 = sortApplication71.numericalSortSimpleSpecialChars(str_array80);
    java.lang.String str84 = calApplication62.printCalForYear(str_array80);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication85 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication86 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array88 = new java.lang.String[] { "hi!" };
    java.lang.String str89 = commApplication86.commOnlySecond(str_array88);
    java.lang.String str90 = calApplication85.printCalForYear(str_array88);
    java.lang.String str91 = calApplication62.printCalForYearMondayFirst(str_array88);
    java.util.List list92 = sortApplication56.sortSimpleCapitalNumber(str_array88);
    java.util.List list93 = sortApplication48.numericalSortSpecialChars(str_array88);
    java.lang.String str94 = calApplication1.printCalWithMondayFirst(str_array88);
    java.io.InputStream inputStream95 = null;
    java.io.OutputStream outputStream96 = null;
    // The following exception was thrown during execution in test generation
    try {
      catApplication0.run(str_array88, inputStream95, outputStream96);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CatException");
    } catch (sg.edu.nus.comp.cs4218.exception.CatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.CatException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CatException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str14.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str30.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str35.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str69.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str89.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str94);

  }

  @Test
  public void test261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test261"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array14 = new java.lang.String[] { "hi!" };
    java.lang.String str15 = commApplication12.commOnlySecond(str_array14);
    java.lang.String str16 = calApplication6.printCalForYear(str_array14);
    java.util.List list17 = sortApplication0.sortNumbersSpecialChars(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = calApplication19.printCalForYearMondayFirst(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array25 = new java.lang.String[] { "" };
    java.lang.String str26 = calApplication23.printCalForYearMondayFirst(str_array25);
    java.lang.String str27 = calApplication19.printCal(str_array25);
    java.lang.String str28 = calApplication18.printCal(str_array25);
    java.util.List list29 = sortApplication0.numericalSortCapitalNumbersSpecialChars(str_array25);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication30 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "" };
    java.lang.String str34 = calApplication31.printCalForYearMondayFirst(str_array33);
    java.util.List list35 = sortApplication30.sortCapitalNumbersSpecialChars(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication36 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "" };
    java.lang.String str40 = calApplication37.printCalForYearMondayFirst(str_array39);
    java.util.List list41 = sortApplication36.sortCapitalNumbersSpecialChars(str_array39);
    java.util.List list42 = sortApplication30.numericalSortSimpleSpecialChars(str_array39);
    java.util.List list43 = sortApplication0.sortSpecialChars(str_array39);
    java.lang.String[] str_array44 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list45 = sortApplication0.sortAll(str_array44);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str15.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);

  }

  @Test
  public void test262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test262"); }


    sg.edu.nus.comp.cs4218.impl.app.CatApplication catApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CatApplication();
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication1 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    java.lang.String str13 = commApplication6.commOnlySecond(str_array10);
    java.lang.String str14 = commApplication2.commOnlySecond(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication15 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication16 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "" };
    java.lang.String str20 = calApplication17.printCalForYearMondayFirst(str_array19);
    java.util.List list21 = sortApplication16.sortCapitalNumbersSpecialChars(str_array19);
    java.util.List list22 = sortApplication15.sortSimpleSpecialChars(str_array19);
    java.lang.String str23 = commApplication2.commAllMatches(str_array19);
    java.lang.String str24 = bcApplication1.lessThan(str_array19);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!" };
    java.lang.String str29 = commApplication26.commOnlySecond(str_array28);
    java.lang.String str30 = calApplication25.printCalForYear(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "hi!" };
    java.lang.String str34 = commApplication31.commOnlySecond(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "hi!" };
    java.lang.String str40 = commApplication37.commOnlySecond(str_array39);
    java.lang.String str41 = calApplication36.printCalForYear(str_array39);
    java.lang.String str42 = commApplication35.commOnlySecond(str_array39);
    java.lang.String str43 = commApplication31.commOnlySecond(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication44 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array47 = new java.lang.String[] { "" };
    java.lang.String str48 = calApplication45.printCalForYearMondayFirst(str_array47);
    java.util.List list49 = sortApplication44.sortCapitalNumbersSpecialChars(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array53 = new java.lang.String[] { "hi!" };
    java.lang.String str54 = commApplication51.commOnlySecond(str_array53);
    java.lang.String str55 = calApplication50.printCalForYear(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array58 = new java.lang.String[] { "hi!" };
    java.lang.String str59 = commApplication56.commOnlySecond(str_array58);
    java.lang.String str60 = calApplication50.printCalForYear(str_array58);
    java.util.List list61 = sortApplication44.sortNumbersSpecialChars(str_array58);
    java.lang.String str62 = commApplication31.commBothMathches(str_array58);
    java.lang.String str63 = calApplication25.printCalForMonthYearMondayFirst(str_array58);
    java.lang.String str64 = bcApplication1.number(str_array58);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication65 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array67 = new java.lang.String[] { "" };
    java.lang.String str68 = calApplication65.printCalForYearMondayFirst(str_array67);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication69 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array71 = new java.lang.String[] { "hi!" };
    java.lang.String str72 = commApplication69.commOnlySecond(str_array71);
    java.lang.String str73 = calApplication65.printCalWithMondayFirst(str_array71);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication74 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication75 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array77 = new java.lang.String[] { "" };
    java.lang.String str78 = calApplication75.printCalForYearMondayFirst(str_array77);
    java.util.List list79 = sortApplication74.sortCapitalNumbersSpecialChars(str_array77);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication80 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication81 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array83 = new java.lang.String[] { "" };
    java.lang.String str84 = calApplication81.printCalForYearMondayFirst(str_array83);
    java.util.List list85 = sortApplication80.sortCapitalNumbersSpecialChars(str_array83);
    java.util.List list86 = sortApplication74.numericalSortSimpleSpecialChars(str_array83);
    java.lang.String str87 = calApplication65.printCalForYear(str_array83);
    java.lang.String str88 = bcApplication1.lessThanOrEqual(str_array83);
    java.io.InputStream inputStream89 = null;
    java.io.OutputStream outputStream90 = null;
    // The following exception was thrown during execution in test generation
    try {
      catApplication0.run(str_array83, inputStream89, outputStream90);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CatException");
    } catch (sg.edu.nus.comp.cs4218.exception.CatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.CatException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CatException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str14.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str23.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str40.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str42.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str43.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str54.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str59.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str62.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str72.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str88);

  }

  @Test
  public void test263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test263"); }


    sg.edu.nus.comp.cs4218.impl.app.CatApplication catApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CatApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    java.lang.String str6 = calApplication1.printCalForYear(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array13 = new java.lang.String[] { "hi!" };
    java.lang.String str14 = commApplication11.commOnlySecond(str_array13);
    java.lang.String str15 = calApplication7.printCalWithMondayFirst(str_array13);
    java.lang.String str16 = calApplication1.printCalWithMondayFirst(str_array13);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "" };
    java.lang.String str20 = calApplication17.printCalForYearMondayFirst(str_array19);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array23 = new java.lang.String[] { "" };
    java.lang.String str24 = calApplication21.printCalForYearMondayFirst(str_array23);
    java.lang.String str25 = calApplication17.printCal(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array29 = new java.lang.String[] { "hi!" };
    java.lang.String str30 = commApplication27.commOnlySecond(str_array29);
    java.lang.String str31 = calApplication26.printCalForYear(str_array29);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "hi!" };
    java.lang.String str35 = commApplication32.commOnlySecond(str_array34);
    java.lang.String str36 = calApplication26.printCalForYear(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication37 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication38 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array41 = new java.lang.String[] { "" };
    java.lang.String str42 = calApplication39.printCalForYearMondayFirst(str_array41);
    java.util.List list43 = sortApplication38.sortCapitalNumbersSpecialChars(str_array41);
    java.util.List list44 = sortApplication37.sortSimpleSpecialChars(str_array41);
    java.lang.String str45 = calApplication26.printCal(str_array41);
    java.lang.String str46 = calApplication17.printCalForMonthYear(str_array41);
    java.lang.String str47 = calApplication1.printCal(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication48 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array51 = new java.lang.String[] { "" };
    java.lang.String str52 = calApplication49.printCalForYearMondayFirst(str_array51);
    java.util.List list53 = sortApplication48.sortCapitalNumbersSpecialChars(str_array51);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "hi!" };
    java.lang.String str58 = commApplication55.commOnlySecond(str_array57);
    java.lang.String str59 = calApplication54.printCalForYear(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array62 = new java.lang.String[] { "hi!" };
    java.lang.String str63 = commApplication60.commOnlySecond(str_array62);
    java.lang.String str64 = calApplication54.printCalForYear(str_array62);
    java.util.List list65 = sortApplication48.sortNumbersSpecialChars(str_array62);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication66 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication67 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array69 = new java.lang.String[] { "" };
    java.lang.String str70 = calApplication67.printCalForYearMondayFirst(str_array69);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication71 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array73 = new java.lang.String[] { "" };
    java.lang.String str74 = calApplication71.printCalForYearMondayFirst(str_array73);
    java.lang.String str75 = calApplication67.printCal(str_array73);
    java.lang.String str76 = calApplication66.printCal(str_array73);
    java.util.List list77 = sortApplication48.numericalSortCapitalNumbersSpecialChars(str_array73);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication78 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication79 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array81 = new java.lang.String[] { "" };
    java.lang.String str82 = calApplication79.printCalForYearMondayFirst(str_array81);
    java.util.List list83 = sortApplication78.sortCapitalNumbersSpecialChars(str_array81);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication84 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication85 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array87 = new java.lang.String[] { "" };
    java.lang.String str88 = calApplication85.printCalForYearMondayFirst(str_array87);
    java.util.List list89 = sortApplication84.sortCapitalNumbersSpecialChars(str_array87);
    java.util.List list90 = sortApplication78.numericalSortSimpleSpecialChars(str_array87);
    java.util.List list91 = sortApplication48.sortSpecialChars(str_array87);
    java.io.InputStream inputStream92 = null;
    java.io.OutputStream outputStream93 = null;
    calApplication1.run(str_array87, inputStream92, outputStream93);
    java.io.InputStream inputStream95 = null;
    java.io.OutputStream outputStream96 = null;
    // The following exception was thrown during execution in test generation
    try {
      catApplication0.run(str_array87, inputStream95, outputStream96);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CatException");
    } catch (sg.edu.nus.comp.cs4218.exception.CatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.CatException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CatException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str14.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str30.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str35.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str58.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str63.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list91);

  }

  @Test
  public void test264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test264"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    java.lang.String str5 = calApplication0.printCalForYear(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "hi!" };
    java.lang.String str9 = commApplication6.commOnlySecond(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array14 = new java.lang.String[] { "hi!" };
    java.lang.String str15 = commApplication12.commOnlySecond(str_array14);
    java.lang.String str16 = calApplication11.printCalForYear(str_array14);
    java.lang.String str17 = commApplication10.commOnlySecond(str_array14);
    java.lang.String str18 = commApplication6.commOnlySecond(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication19 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = calApplication20.printCalForYearMondayFirst(str_array22);
    java.util.List list24 = sortApplication19.sortCapitalNumbersSpecialChars(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!" };
    java.lang.String str29 = commApplication26.commOnlySecond(str_array28);
    java.lang.String str30 = calApplication25.printCalForYear(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "hi!" };
    java.lang.String str34 = commApplication31.commOnlySecond(str_array33);
    java.lang.String str35 = calApplication25.printCalForYear(str_array33);
    java.util.List list36 = sortApplication19.sortNumbersSpecialChars(str_array33);
    java.lang.String str37 = commApplication6.commBothMathches(str_array33);
    java.lang.String str38 = calApplication0.printCalForMonthYearMondayFirst(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array42 = new java.lang.String[] { "hi!" };
    java.lang.String str43 = commApplication40.commOnlySecond(str_array42);
    java.lang.String str44 = calApplication39.printCalForYear(str_array42);
    java.io.InputStream inputStream45 = null;
    java.io.OutputStream outputStream46 = null;
    calApplication0.run(str_array42, inputStream45, outputStream46);
    java.lang.String[] str_array48 = null;
    java.lang.String str49 = calApplication0.printCalForMonthYear(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str9.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str15.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str17.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str37.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str43.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);

  }

  @Test
  public void test265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test265"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "hi!" };
    java.lang.String str9 = commApplication6.commOnlySecond(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array14 = new java.lang.String[] { "hi!" };
    java.lang.String str15 = commApplication12.commOnlySecond(str_array14);
    java.lang.String str16 = calApplication11.printCalForYear(str_array14);
    java.lang.String str17 = commApplication10.commOnlySecond(str_array14);
    java.lang.String str18 = commApplication6.commOnlySecond(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication19 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication20 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array23 = new java.lang.String[] { "" };
    java.lang.String str24 = calApplication21.printCalForYearMondayFirst(str_array23);
    java.util.List list25 = sortApplication20.sortCapitalNumbersSpecialChars(str_array23);
    java.util.List list26 = sortApplication19.sortSimpleSpecialChars(str_array23);
    java.lang.String str27 = commApplication6.commAllMatches(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication28 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication29 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "" };
    java.lang.String str33 = calApplication30.printCalForYearMondayFirst(str_array32);
    java.util.List list34 = sortApplication29.sortCapitalNumbersSpecialChars(str_array32);
    java.util.List list35 = sortApplication28.sortSimpleSpecialChars(str_array32);
    java.lang.String str36 = commApplication6.commAllMatches(str_array32);
    java.util.List list37 = sortApplication0.numericalSortSimpleSpecialChars(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str9.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str15.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str17.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str27.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str36.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);

  }

  @Test
  public void test266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test266"); }


    sg.edu.nus.comp.cs4218.impl.app.HeadApplication headApplication0 = new sg.edu.nus.comp.cs4218.impl.app.HeadApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    java.lang.String str6 = calApplication1.printCalForYear(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array11 = new java.lang.String[] { "hi!" };
    java.lang.String str12 = commApplication9.commOnlySecond(str_array11);
    java.lang.String str13 = calApplication8.printCalForYear(str_array11);
    java.lang.String str14 = commApplication7.commOnlySecond(str_array11);
    java.lang.String str15 = calApplication1.printCalForMonthYearMondayFirst(str_array11);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication16 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication17 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array20 = new java.lang.String[] { "" };
    java.lang.String str21 = calApplication18.printCalForYearMondayFirst(str_array20);
    java.util.List list22 = sortApplication17.sortCapitalNumbersSpecialChars(str_array20);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = calApplication24.printCalForYearMondayFirst(str_array26);
    java.util.List list28 = sortApplication23.sortCapitalNumbersSpecialChars(str_array26);
    java.util.List list29 = sortApplication17.numericalSortSimpleSpecialChars(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "hi!" };
    java.lang.String str35 = commApplication32.commOnlySecond(str_array34);
    java.lang.String str36 = calApplication31.printCalForYear(str_array34);
    java.lang.String str37 = commApplication30.commOnlySecond(str_array34);
    java.util.List list38 = sortApplication17.sortAll(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication39 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication40 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "" };
    java.lang.String str44 = calApplication41.printCalForYearMondayFirst(str_array43);
    java.util.List list45 = sortApplication40.sortCapitalNumbersSpecialChars(str_array43);
    java.util.List list46 = sortApplication39.sortSimpleSpecialChars(str_array43);
    java.util.List list47 = sortApplication17.numericalSortCapitalSpecialChars(str_array43);
    java.lang.String str48 = bcApplication16.subtract(str_array43);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication49 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array52 = new java.lang.String[] { "" };
    java.lang.String str53 = calApplication50.printCalForYearMondayFirst(str_array52);
    java.util.List list54 = sortApplication49.sortCapitalNumbersSpecialChars(str_array52);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication55 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array58 = new java.lang.String[] { "" };
    java.lang.String str59 = calApplication56.printCalForYearMondayFirst(str_array58);
    java.util.List list60 = sortApplication55.sortCapitalNumbersSpecialChars(str_array58);
    java.util.List list61 = sortApplication49.numericalSortSimpleSpecialChars(str_array58);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication63 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array66 = new java.lang.String[] { "hi!" };
    java.lang.String str67 = commApplication64.commOnlySecond(str_array66);
    java.lang.String str68 = calApplication63.printCalForYear(str_array66);
    java.lang.String str69 = commApplication62.commOnlySecond(str_array66);
    java.util.List list70 = sortApplication49.sortAll(str_array66);
    java.lang.String str71 = bcApplication16.add(str_array66);
    java.lang.String str72 = calApplication1.printCalForYearMondayFirst(str_array66);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication73 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array75 = new java.lang.String[] { "" };
    java.lang.String str76 = calApplication73.printCalForYearMondayFirst(str_array75);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication77 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array79 = new java.lang.String[] { "hi!" };
    java.lang.String str80 = commApplication77.commOnlySecond(str_array79);
    java.lang.String str81 = calApplication73.printCalWithMondayFirst(str_array79);
    java.lang.String str82 = calApplication1.printCal(str_array79);
    java.io.InputStream inputStream83 = null;
    java.io.OutputStream outputStream84 = null;
    // The following exception was thrown during execution in test generation
    try {
      headApplication0.run(str_array79, inputStream83, outputStream84);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.HeadException");
    } catch (sg.edu.nus.comp.cs4218.exception.HeadException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.HeadException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.HeadException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str14.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str35.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str37.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str67.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str69.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str80.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str82);

  }

  @Test
  public void test267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test267"); }


    sg.edu.nus.comp.cs4218.impl.app.TailApplication tailApplication0 = new sg.edu.nus.comp.cs4218.impl.app.TailApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication7.printCalForYear(str_array15);
    java.util.List list18 = sortApplication1.sortNumbersSpecialChars(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication19 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = calApplication20.printCalForYearMondayFirst(str_array22);
    java.util.List list24 = sortApplication19.sortCapitalNumbersSpecialChars(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication25 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "" };
    java.lang.String str29 = calApplication26.printCalForYearMondayFirst(str_array28);
    java.util.List list30 = sortApplication25.sortCapitalNumbersSpecialChars(str_array28);
    java.util.List list31 = sortApplication19.numericalSortSimpleSpecialChars(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "hi!" };
    java.lang.String str37 = commApplication34.commOnlySecond(str_array36);
    java.lang.String str38 = calApplication33.printCalForYear(str_array36);
    java.lang.String str39 = commApplication32.commOnlySecond(str_array36);
    java.util.List list40 = sortApplication19.sortAll(str_array36);
    java.util.List list41 = sortApplication1.numericalSortNumbersSpecialChars(str_array36);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication42 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array45 = new java.lang.String[] { "" };
    java.lang.String str46 = calApplication43.printCalForYearMondayFirst(str_array45);
    java.util.List list47 = sortApplication42.sortCapitalNumbersSpecialChars(str_array45);
    java.util.List list48 = sortApplication1.numericalSortSimpleCapitalSpecialChars(str_array45);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication49 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication50 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array53 = new java.lang.String[] { "" };
    java.lang.String str54 = calApplication51.printCalForYearMondayFirst(str_array53);
    java.util.List list55 = sortApplication50.sortCapitalNumbersSpecialChars(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication56 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array59 = new java.lang.String[] { "" };
    java.lang.String str60 = calApplication57.printCalForYearMondayFirst(str_array59);
    java.util.List list61 = sortApplication56.sortCapitalNumbersSpecialChars(str_array59);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication63 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array65 = new java.lang.String[] { "hi!" };
    java.lang.String str66 = commApplication63.commOnlySecond(str_array65);
    java.lang.String str67 = calApplication62.printCalForYear(str_array65);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array70 = new java.lang.String[] { "hi!" };
    java.lang.String str71 = commApplication68.commOnlySecond(str_array70);
    java.lang.String str72 = calApplication62.printCalForYear(str_array70);
    java.util.List list73 = sortApplication56.sortNumbersSpecialChars(str_array70);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication74 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication75 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array77 = new java.lang.String[] { "" };
    java.lang.String str78 = calApplication75.printCalForYearMondayFirst(str_array77);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication79 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array81 = new java.lang.String[] { "" };
    java.lang.String str82 = calApplication79.printCalForYearMondayFirst(str_array81);
    java.lang.String str83 = calApplication75.printCal(str_array81);
    java.lang.String str84 = calApplication74.printCal(str_array81);
    java.util.List list85 = sortApplication56.numericalSortCapitalNumbersSpecialChars(str_array81);
    java.util.List list86 = sortApplication50.numericalSortCapitalNumbersSpecialChars(str_array81);
    java.lang.String[] str_array88 = new java.lang.String[] { "comm: terminated with error message comm: file is not readable" };
    java.util.List list89 = sortApplication50.numericalSortAll(str_array88);
    java.lang.String str90 = bcApplication49.bracket(str_array88);
    java.util.List list91 = sortApplication1.sortSimpleCapitalSpecialChars(str_array88);
    java.io.InputStream inputStream92 = null;
    java.io.OutputStream outputStream93 = null;
    // The following exception was thrown during execution in test generation
    try {
      tailApplication0.run(str_array88, inputStream92, outputStream93);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException");
    } catch (sg.edu.nus.comp.cs4218.exception.TailException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.TailException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str37.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str66.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str71.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list91);

  }

  @Test
  public void test268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test268"); }


    sg.edu.nus.comp.cs4218.impl.app.HeadApplication headApplication0 = new sg.edu.nus.comp.cs4218.impl.app.HeadApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication2 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = calApplication3.printCalForYearMondayFirst(str_array5);
    java.util.List list7 = sortApplication2.sortCapitalNumbersSpecialChars(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication8 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array11 = new java.lang.String[] { "" };
    java.lang.String str12 = calApplication9.printCalForYearMondayFirst(str_array11);
    java.util.List list13 = sortApplication8.sortCapitalNumbersSpecialChars(str_array11);
    java.util.List list14 = sortApplication2.numericalSortSimpleSpecialChars(str_array11);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "hi!" };
    java.lang.String str20 = commApplication17.commOnlySecond(str_array19);
    java.lang.String str21 = calApplication16.printCalForYear(str_array19);
    java.lang.String str22 = commApplication15.commOnlySecond(str_array19);
    java.util.List list23 = sortApplication2.sortAll(str_array19);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication24 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication25 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "" };
    java.lang.String str29 = calApplication26.printCalForYearMondayFirst(str_array28);
    java.util.List list30 = sortApplication25.sortCapitalNumbersSpecialChars(str_array28);
    java.util.List list31 = sortApplication24.sortSimpleSpecialChars(str_array28);
    java.util.List list32 = sortApplication2.numericalSortCapitalSpecialChars(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array37 = new java.lang.String[] { "hi!" };
    java.lang.String str38 = commApplication35.commOnlySecond(str_array37);
    java.lang.String str39 = calApplication34.printCalForYear(str_array37);
    java.lang.String str40 = commApplication33.commOnlySecond(str_array37);
    java.util.List list41 = sortApplication2.sortAll(str_array37);
    java.lang.String str42 = calApplication1.printCalForYearMondayFirst(str_array37);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication43 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication44 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array47 = new java.lang.String[] { "" };
    java.lang.String str48 = calApplication45.printCalForYearMondayFirst(str_array47);
    java.util.List list49 = sortApplication44.sortCapitalNumbersSpecialChars(str_array47);
    java.util.List list50 = sortApplication43.sortSimpleSpecialChars(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication51 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array54 = new java.lang.String[] { "hi!" };
    java.lang.String str55 = commApplication52.commOnlySecond(str_array54);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array60 = new java.lang.String[] { "hi!" };
    java.lang.String str61 = commApplication58.commOnlySecond(str_array60);
    java.lang.String str62 = calApplication57.printCalForYear(str_array60);
    java.lang.String str63 = commApplication56.commOnlySecond(str_array60);
    java.lang.String str64 = commApplication52.commOnlySecond(str_array60);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication65 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication66 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication67 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array69 = new java.lang.String[] { "" };
    java.lang.String str70 = calApplication67.printCalForYearMondayFirst(str_array69);
    java.util.List list71 = sortApplication66.sortCapitalNumbersSpecialChars(str_array69);
    java.util.List list72 = sortApplication65.sortSimpleSpecialChars(str_array69);
    java.lang.String str73 = commApplication52.commAllMatches(str_array69);
    java.lang.String str74 = bcApplication51.lessThan(str_array69);
    java.util.List list75 = sortApplication43.sortSimpleCapital(str_array69);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication76 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication77 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array79 = new java.lang.String[] { "" };
    java.lang.String str80 = calApplication77.printCalForYearMondayFirst(str_array79);
    java.util.List list81 = sortApplication76.sortCapitalNumbersSpecialChars(str_array79);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication82 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication83 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array85 = new java.lang.String[] { "" };
    java.lang.String str86 = calApplication83.printCalForYearMondayFirst(str_array85);
    java.util.List list87 = sortApplication82.sortCapitalNumbersSpecialChars(str_array85);
    java.util.List list88 = sortApplication76.numericalSortSimpleSpecialChars(str_array85);
    java.util.List list89 = sortApplication43.sortNumbers(str_array85);
    java.lang.String str90 = calApplication1.printCalForMonthYearMondayFirst(str_array85);
    java.io.InputStream inputStream91 = null;
    java.io.OutputStream outputStream92 = null;
    // The following exception was thrown during execution in test generation
    try {
      headApplication0.run(str_array85, inputStream91, outputStream92);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.HeadException");
    } catch (sg.edu.nus.comp.cs4218.exception.HeadException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.HeadException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.HeadException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str22.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str38.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str40.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str55.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str61.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str63.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str64.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str73.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str90);

  }

  @Test
  public void test269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test269"); }


    sg.edu.nus.comp.cs4218.impl.app.FmtApplication fmtApplication0 = new sg.edu.nus.comp.cs4218.impl.app.FmtApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = calApplication8.printCalForYearMondayFirst(str_array10);
    java.util.List list12 = sortApplication7.sortCapitalNumbersSpecialChars(str_array10);
    java.util.List list13 = sortApplication1.numericalSortSimpleSpecialChars(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "hi!" };
    java.lang.String str19 = commApplication16.commOnlySecond(str_array18);
    java.lang.String str20 = calApplication15.printCalForYear(str_array18);
    java.lang.String str21 = commApplication14.commOnlySecond(str_array18);
    java.util.List list22 = sortApplication1.sortAll(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication24 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = calApplication25.printCalForYearMondayFirst(str_array27);
    java.util.List list29 = sortApplication24.sortCapitalNumbersSpecialChars(str_array27);
    java.util.List list30 = sortApplication23.sortSimpleSpecialChars(str_array27);
    java.util.List list31 = sortApplication1.numericalSortCapitalSpecialChars(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "hi!" };
    java.lang.String str37 = commApplication34.commOnlySecond(str_array36);
    java.lang.String str38 = calApplication33.printCalForYear(str_array36);
    java.lang.String str39 = commApplication32.commOnlySecond(str_array36);
    java.util.List list40 = sortApplication1.sortAll(str_array36);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array45 = new java.lang.String[] { "hi!" };
    java.lang.String str46 = commApplication43.commOnlySecond(str_array45);
    java.lang.String str47 = calApplication42.printCalForYear(str_array45);
    java.lang.String str48 = commApplication41.commOnlySecond(str_array45);
    java.lang.String[] str_array50 = new java.lang.String[] { "hi!" };
    java.lang.String str51 = commApplication41.commAllMatches(str_array50);
    java.util.List list52 = sortApplication1.sortStringsSimple(str_array50);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication53 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication54 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "" };
    java.lang.String str58 = calApplication55.printCalForYearMondayFirst(str_array57);
    java.util.List list59 = sortApplication54.sortCapitalNumbersSpecialChars(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication60 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array63 = new java.lang.String[] { "" };
    java.lang.String str64 = calApplication61.printCalForYearMondayFirst(str_array63);
    java.util.List list65 = sortApplication60.sortCapitalNumbersSpecialChars(str_array63);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication66 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication67 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array69 = new java.lang.String[] { "hi!" };
    java.lang.String str70 = commApplication67.commOnlySecond(str_array69);
    java.lang.String str71 = calApplication66.printCalForYear(str_array69);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication72 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array74 = new java.lang.String[] { "hi!" };
    java.lang.String str75 = commApplication72.commOnlySecond(str_array74);
    java.lang.String str76 = calApplication66.printCalForYear(str_array74);
    java.util.List list77 = sortApplication60.sortNumbersSpecialChars(str_array74);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication78 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication79 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array81 = new java.lang.String[] { "" };
    java.lang.String str82 = calApplication79.printCalForYearMondayFirst(str_array81);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication83 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array85 = new java.lang.String[] { "" };
    java.lang.String str86 = calApplication83.printCalForYearMondayFirst(str_array85);
    java.lang.String str87 = calApplication79.printCal(str_array85);
    java.lang.String str88 = calApplication78.printCal(str_array85);
    java.util.List list89 = sortApplication60.numericalSortCapitalNumbersSpecialChars(str_array85);
    java.util.List list90 = sortApplication54.numericalSortCapitalNumbersSpecialChars(str_array85);
    java.lang.String[] str_array92 = new java.lang.String[] { "comm: terminated with error message comm: file is not readable" };
    java.util.List list93 = sortApplication54.numericalSortAll(str_array92);
    java.lang.String str94 = bcApplication53.bracket(str_array92);
    java.util.List list95 = sortApplication1.sortCapitalNumbers(str_array92);
    java.io.InputStream inputStream96 = null;
    java.io.OutputStream outputStream97 = null;
    // The following exception was thrown during execution in test generation
    try {
      fmtApplication0.run(str_array92, inputStream96, outputStream97);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.FmtException");
    } catch (sg.edu.nus.comp.cs4218.exception.FmtException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.FmtException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.FmtException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str37.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str46.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str48.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str51.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str70.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str75.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list95);

  }

  @Test
  public void test270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test270"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "" };
    java.lang.String str9 = calApplication6.printCalForYearMondayFirst(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array12 = new java.lang.String[] { "hi!" };
    java.lang.String str13 = commApplication10.commOnlySecond(str_array12);
    java.lang.String str14 = calApplication6.printCalWithMondayFirst(str_array12);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication15 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "" };
    java.lang.String str19 = calApplication16.printCalForYearMondayFirst(str_array18);
    java.util.List list20 = sortApplication15.sortCapitalNumbersSpecialChars(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication21 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array24 = new java.lang.String[] { "" };
    java.lang.String str25 = calApplication22.printCalForYearMondayFirst(str_array24);
    java.util.List list26 = sortApplication21.sortCapitalNumbersSpecialChars(str_array24);
    java.util.List list27 = sortApplication15.numericalSortSimpleSpecialChars(str_array24);
    java.lang.String str28 = calApplication6.printCalForYear(str_array24);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "hi!" };
    java.lang.String str33 = commApplication30.commOnlySecond(str_array32);
    java.lang.String str34 = calApplication29.printCalForYear(str_array32);
    java.lang.String str35 = calApplication6.printCalForYearMondayFirst(str_array32);
    java.util.List list36 = sortApplication0.sortSimpleCapitalNumber(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication37 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication38 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication39 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array42 = new java.lang.String[] { "" };
    java.lang.String str43 = calApplication40.printCalForYearMondayFirst(str_array42);
    java.util.List list44 = sortApplication39.sortCapitalNumbersSpecialChars(str_array42);
    java.util.List list45 = sortApplication38.sortSimpleSpecialChars(str_array42);
    java.io.InputStream inputStream46 = null;
    java.io.OutputStream outputStream47 = null;
    bcApplication37.run(str_array42, inputStream46, outputStream47);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication49 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication50 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array53 = new java.lang.String[] { "" };
    java.lang.String str54 = calApplication51.printCalForYearMondayFirst(str_array53);
    java.util.List list55 = sortApplication50.sortCapitalNumbersSpecialChars(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication56 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array59 = new java.lang.String[] { "" };
    java.lang.String str60 = calApplication57.printCalForYearMondayFirst(str_array59);
    java.util.List list61 = sortApplication56.sortCapitalNumbersSpecialChars(str_array59);
    java.util.List list62 = sortApplication50.numericalSortSimpleSpecialChars(str_array59);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication63 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication65 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array67 = new java.lang.String[] { "hi!" };
    java.lang.String str68 = commApplication65.commOnlySecond(str_array67);
    java.lang.String str69 = calApplication64.printCalForYear(str_array67);
    java.lang.String str70 = commApplication63.commOnlySecond(str_array67);
    java.util.List list71 = sortApplication50.sortAll(str_array67);
    java.util.List list72 = sortApplication49.sortSimpleCapitalSpecialChars(str_array67);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication73 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array75 = new java.lang.String[] { "" };
    java.lang.String str76 = calApplication73.printCalForYearMondayFirst(str_array75);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication77 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array79 = new java.lang.String[] { "hi!" };
    java.lang.String str80 = commApplication77.commOnlySecond(str_array79);
    java.lang.String str81 = calApplication73.printCalWithMondayFirst(str_array79);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication82 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication83 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array85 = new java.lang.String[] { "" };
    java.lang.String str86 = calApplication83.printCalForYearMondayFirst(str_array85);
    java.util.List list87 = sortApplication82.sortCapitalNumbersSpecialChars(str_array85);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication88 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication89 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array91 = new java.lang.String[] { "" };
    java.lang.String str92 = calApplication89.printCalForYearMondayFirst(str_array91);
    java.util.List list93 = sortApplication88.sortCapitalNumbersSpecialChars(str_array91);
    java.util.List list94 = sortApplication82.numericalSortSimpleSpecialChars(str_array91);
    java.lang.String str95 = calApplication73.printCalForYear(str_array91);
    java.util.List list96 = sortApplication49.sortNumbers(str_array91);
    java.lang.String str97 = bcApplication37.pow(str_array91);
    java.util.List list98 = sortApplication0.numericalSortSimpleNumbers(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str33.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str68.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str70.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str80.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list98);

  }

  @Test
  public void test271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test271"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    java.lang.String str12 = commApplication5.commOnlySecond(str_array9);
    java.lang.String str13 = commApplication1.commOnlySecond(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication14 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication15 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "" };
    java.lang.String str19 = calApplication16.printCalForYearMondayFirst(str_array18);
    java.util.List list20 = sortApplication15.sortCapitalNumbersSpecialChars(str_array18);
    java.util.List list21 = sortApplication14.sortSimpleSpecialChars(str_array18);
    java.lang.String str22 = commApplication1.commAllMatches(str_array18);
    java.lang.String str23 = bcApplication0.lessThan(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "hi!" };
    java.lang.String str28 = commApplication25.commOnlySecond(str_array27);
    java.lang.String str29 = calApplication24.printCalForYear(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "hi!" };
    java.lang.String str33 = commApplication30.commOnlySecond(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array38 = new java.lang.String[] { "hi!" };
    java.lang.String str39 = commApplication36.commOnlySecond(str_array38);
    java.lang.String str40 = calApplication35.printCalForYear(str_array38);
    java.lang.String str41 = commApplication34.commOnlySecond(str_array38);
    java.lang.String str42 = commApplication30.commOnlySecond(str_array38);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication43 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = calApplication44.printCalForYearMondayFirst(str_array46);
    java.util.List list48 = sortApplication43.sortCapitalNumbersSpecialChars(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array52 = new java.lang.String[] { "hi!" };
    java.lang.String str53 = commApplication50.commOnlySecond(str_array52);
    java.lang.String str54 = calApplication49.printCalForYear(str_array52);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "hi!" };
    java.lang.String str58 = commApplication55.commOnlySecond(str_array57);
    java.lang.String str59 = calApplication49.printCalForYear(str_array57);
    java.util.List list60 = sortApplication43.sortNumbersSpecialChars(str_array57);
    java.lang.String str61 = commApplication30.commBothMathches(str_array57);
    java.lang.String str62 = calApplication24.printCalForMonthYearMondayFirst(str_array57);
    java.lang.String str63 = bcApplication0.number(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array66 = new java.lang.String[] { "hi!" };
    java.lang.String str67 = commApplication64.commOnlySecond(str_array66);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication69 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication70 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array72 = new java.lang.String[] { "hi!" };
    java.lang.String str73 = commApplication70.commOnlySecond(str_array72);
    java.lang.String str74 = calApplication69.printCalForYear(str_array72);
    java.lang.String str75 = commApplication68.commOnlySecond(str_array72);
    java.lang.String str76 = commApplication64.commOnlySecond(str_array72);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication77 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication78 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication79 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array81 = new java.lang.String[] { "" };
    java.lang.String str82 = calApplication79.printCalForYearMondayFirst(str_array81);
    java.util.List list83 = sortApplication78.sortCapitalNumbersSpecialChars(str_array81);
    java.util.List list84 = sortApplication77.sortSimpleSpecialChars(str_array81);
    java.lang.String str85 = commApplication64.commAllMatches(str_array81);
    java.lang.String str86 = bcApplication0.or(str_array81);
    java.lang.String[] str_array87 = null;
    java.lang.String str88 = bcApplication0.greaterThan(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str22.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str28.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str33.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str41.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str42.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str53.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str58.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str61.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str67.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str73.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str75.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str76.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str85.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str88);

  }

  @Test
  public void test272() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test272"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication6 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication12.printCalForYear(str_array15);
    java.lang.String str18 = commApplication11.commOnlySecond(str_array15);
    java.lang.String str19 = commApplication7.commOnlySecond(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication20 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication21 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array24 = new java.lang.String[] { "" };
    java.lang.String str25 = calApplication22.printCalForYearMondayFirst(str_array24);
    java.util.List list26 = sortApplication21.sortCapitalNumbersSpecialChars(str_array24);
    java.util.List list27 = sortApplication20.sortSimpleSpecialChars(str_array24);
    java.lang.String str28 = commApplication7.commAllMatches(str_array24);
    java.lang.String str29 = bcApplication6.lessThan(str_array24);
    java.util.List list30 = sortApplication0.numericalSortCapitalNumbersSpecialChars(str_array24);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication31 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication32 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "" };
    java.lang.String str36 = calApplication33.printCalForYearMondayFirst(str_array35);
    java.util.List list37 = sortApplication32.sortCapitalNumbersSpecialChars(str_array35);
    java.util.List list38 = sortApplication31.sortSimpleSpecialChars(str_array35);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication39 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array42 = new java.lang.String[] { "" };
    java.lang.String str43 = calApplication40.printCalForYearMondayFirst(str_array42);
    java.util.List list44 = sortApplication39.sortCapitalNumbersSpecialChars(str_array42);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array48 = new java.lang.String[] { "hi!" };
    java.lang.String str49 = commApplication46.commOnlySecond(str_array48);
    java.lang.String str50 = calApplication45.printCalForYear(str_array48);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array53 = new java.lang.String[] { "hi!" };
    java.lang.String str54 = commApplication51.commOnlySecond(str_array53);
    java.lang.String str55 = calApplication45.printCalForYear(str_array53);
    java.util.List list56 = sortApplication39.sortNumbersSpecialChars(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication57 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array60 = new java.lang.String[] { "" };
    java.lang.String str61 = calApplication58.printCalForYearMondayFirst(str_array60);
    java.util.List list62 = sortApplication57.sortCapitalNumbersSpecialChars(str_array60);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication63 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array66 = new java.lang.String[] { "hi!" };
    java.lang.String str67 = commApplication64.commOnlySecond(str_array66);
    java.lang.String str68 = calApplication63.printCalForYear(str_array66);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication69 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array71 = new java.lang.String[] { "hi!" };
    java.lang.String str72 = commApplication69.commOnlySecond(str_array71);
    java.lang.String str73 = calApplication63.printCalForYear(str_array71);
    java.util.List list74 = sortApplication57.sortNumbersSpecialChars(str_array71);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication75 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication76 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array78 = new java.lang.String[] { "hi!" };
    java.lang.String str79 = commApplication76.commOnlySecond(str_array78);
    java.lang.String str80 = calApplication75.printCalForYear(str_array78);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication81 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array83 = new java.lang.String[] { "hi!" };
    java.lang.String str84 = commApplication81.commOnlySecond(str_array83);
    java.lang.String str85 = calApplication75.printCalForYear(str_array83);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication86 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication87 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication88 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array90 = new java.lang.String[] { "" };
    java.lang.String str91 = calApplication88.printCalForYearMondayFirst(str_array90);
    java.util.List list92 = sortApplication87.sortCapitalNumbersSpecialChars(str_array90);
    java.util.List list93 = sortApplication86.sortSimpleSpecialChars(str_array90);
    java.lang.String str94 = calApplication75.printCal(str_array90);
    java.util.List list95 = sortApplication57.sortStringsSimple(str_array90);
    java.util.List list96 = sortApplication39.sortSimpleNumbers(str_array90);
    java.util.List list97 = sortApplication31.sortStringsSimple(str_array90);
    java.util.List list98 = sortApplication0.numericalSortSimpleNumbersSpecialChars(str_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str28.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str49.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str54.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str67.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str72.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str79.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str84.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list98);

  }

  @Test
  public void test273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test273"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    java.util.List list7 = sortApplication0.sortSimpleSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication8 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array11 = new java.lang.String[] { "hi!" };
    java.lang.String str12 = commApplication9.commOnlySecond(str_array11);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!" };
    java.lang.String str18 = commApplication15.commOnlySecond(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    java.lang.String str20 = commApplication13.commOnlySecond(str_array17);
    java.lang.String str21 = commApplication9.commOnlySecond(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication22 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = calApplication24.printCalForYearMondayFirst(str_array26);
    java.util.List list28 = sortApplication23.sortCapitalNumbersSpecialChars(str_array26);
    java.util.List list29 = sortApplication22.sortSimpleSpecialChars(str_array26);
    java.lang.String str30 = commApplication9.commAllMatches(str_array26);
    java.lang.String str31 = bcApplication8.lessThan(str_array26);
    java.util.List list32 = sortApplication0.sortSimpleCapital(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "hi!" };
    java.lang.String str36 = commApplication33.commOnlySecond(str_array35);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array41 = new java.lang.String[] { "hi!" };
    java.lang.String str42 = commApplication39.commOnlySecond(str_array41);
    java.lang.String str43 = calApplication38.printCalForYear(str_array41);
    java.lang.String str44 = commApplication37.commOnlySecond(str_array41);
    java.lang.String str45 = commApplication33.commOnlySecond(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication46 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array49 = new java.lang.String[] { "" };
    java.lang.String str50 = calApplication47.printCalForYearMondayFirst(str_array49);
    java.util.List list51 = sortApplication46.sortCapitalNumbersSpecialChars(str_array49);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array55 = new java.lang.String[] { "hi!" };
    java.lang.String str56 = commApplication53.commOnlySecond(str_array55);
    java.lang.String str57 = calApplication52.printCalForYear(str_array55);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array60 = new java.lang.String[] { "hi!" };
    java.lang.String str61 = commApplication58.commOnlySecond(str_array60);
    java.lang.String str62 = calApplication52.printCalForYear(str_array60);
    java.util.List list63 = sortApplication46.sortNumbersSpecialChars(str_array60);
    java.lang.String str64 = commApplication33.commBothMathches(str_array60);
    java.util.List list65 = sortApplication0.numericalSortStringsSimple(str_array60);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication66 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication67 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication68 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication69 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array71 = new java.lang.String[] { "" };
    java.lang.String str72 = calApplication69.printCalForYearMondayFirst(str_array71);
    java.util.List list73 = sortApplication68.sortCapitalNumbersSpecialChars(str_array71);
    java.util.List list74 = sortApplication67.sortSimpleSpecialChars(str_array71);
    java.lang.String str75 = bcApplication66.lessThan(str_array71);
    java.util.List list76 = sortApplication0.sortNumbersSpecialChars(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str30.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str36.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str42.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str44.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str45.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str56.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str61.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str64.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);

  }

  @Test
  public void test274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test274"); }


    sg.edu.nus.comp.cs4218.impl.app.DateApplication dateApplication0 = new sg.edu.nus.comp.cs4218.impl.app.DateApplication();
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication1 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = calApplication3.printCalForYearMondayFirst(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.lang.String str11 = calApplication3.printCal(str_array9);
    java.lang.String str12 = calApplication2.printCal(str_array9);
    java.lang.String str13 = bcApplication1.negate(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication14 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!" };
    java.lang.String str18 = commApplication15.commOnlySecond(str_array17);
    java.util.List list19 = sortApplication14.sortSimpleCapitalSpecialChars(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication20 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array23 = new java.lang.String[] { "" };
    java.lang.String str24 = calApplication21.printCalForYearMondayFirst(str_array23);
    java.util.List list25 = sortApplication20.sortCapitalNumbersSpecialChars(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array29 = new java.lang.String[] { "hi!" };
    java.lang.String str30 = commApplication27.commOnlySecond(str_array29);
    java.lang.String str31 = calApplication26.printCalForYear(str_array29);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "hi!" };
    java.lang.String str35 = commApplication32.commOnlySecond(str_array34);
    java.lang.String str36 = calApplication26.printCalForYear(str_array34);
    java.util.List list37 = sortApplication20.sortNumbersSpecialChars(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array41 = new java.lang.String[] { "hi!" };
    java.lang.String str42 = commApplication39.commOnlySecond(str_array41);
    java.lang.String str43 = calApplication38.printCalForYear(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "hi!" };
    java.lang.String str47 = commApplication44.commOnlySecond(str_array46);
    java.lang.String str48 = calApplication38.printCalForYear(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication49 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication50 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array53 = new java.lang.String[] { "" };
    java.lang.String str54 = calApplication51.printCalForYearMondayFirst(str_array53);
    java.util.List list55 = sortApplication50.sortCapitalNumbersSpecialChars(str_array53);
    java.util.List list56 = sortApplication49.sortSimpleSpecialChars(str_array53);
    java.lang.String str57 = calApplication38.printCal(str_array53);
    java.util.List list58 = sortApplication20.sortStringsSimple(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication59 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array62 = new java.lang.String[] { "" };
    java.lang.String str63 = calApplication60.printCalForYearMondayFirst(str_array62);
    java.util.List list64 = sortApplication59.sortCapitalNumbersSpecialChars(str_array62);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication65 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication66 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array68 = new java.lang.String[] { "" };
    java.lang.String str69 = calApplication66.printCalForYearMondayFirst(str_array68);
    java.util.List list70 = sortApplication65.sortCapitalNumbersSpecialChars(str_array68);
    java.util.List list71 = sortApplication59.numericalSortSimpleSpecialChars(str_array68);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication72 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication73 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication74 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array76 = new java.lang.String[] { "hi!" };
    java.lang.String str77 = commApplication74.commOnlySecond(str_array76);
    java.lang.String str78 = calApplication73.printCalForYear(str_array76);
    java.lang.String str79 = commApplication72.commOnlySecond(str_array76);
    java.util.List list80 = sortApplication59.sortAll(str_array76);
    java.util.List list81 = sortApplication20.numericalSortSimpleNumbers(str_array76);
    java.util.List list82 = sortApplication14.numericalSortSimpleCapital(str_array76);
    java.lang.String str83 = bcApplication1.bracket(str_array76);
    java.io.InputStream inputStream84 = null;
    java.io.OutputStream outputStream85 = null;
    // The following exception was thrown during execution in test generation
    try {
      dateApplication0.run(str_array76, inputStream84, outputStream85);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException");
    } catch (sg.edu.nus.comp.cs4218.exception.DateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.DateException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str30.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str35.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str42.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str47.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str77.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str79.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str83);

  }

  @Test
  public void test275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test275"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    java.util.List list5 = sortApplication0.sortSimpleCapitalSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "" };
    java.lang.String str9 = calApplication6.printCalForYearMondayFirst(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array12 = new java.lang.String[] { "hi!" };
    java.lang.String str13 = commApplication10.commOnlySecond(str_array12);
    java.lang.String str14 = calApplication6.printCalWithMondayFirst(str_array12);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication15 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "" };
    java.lang.String str19 = calApplication16.printCalForYearMondayFirst(str_array18);
    java.util.List list20 = sortApplication15.sortCapitalNumbersSpecialChars(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication21 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array24 = new java.lang.String[] { "" };
    java.lang.String str25 = calApplication22.printCalForYearMondayFirst(str_array24);
    java.util.List list26 = sortApplication21.sortCapitalNumbersSpecialChars(str_array24);
    java.util.List list27 = sortApplication15.numericalSortSimpleSpecialChars(str_array24);
    java.lang.String str28 = calApplication6.printCalForYear(str_array24);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "hi!" };
    java.lang.String str33 = commApplication30.commOnlySecond(str_array32);
    java.lang.String str34 = calApplication29.printCalForYear(str_array32);
    java.lang.String str35 = calApplication6.printCalForYearMondayFirst(str_array32);
    java.util.List list36 = sortApplication0.sortCapitalNumbersSpecialChars(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array42 = new java.lang.String[] { "hi!" };
    java.lang.String str43 = commApplication40.commOnlySecond(str_array42);
    java.lang.String str44 = calApplication39.printCalForYear(str_array42);
    java.lang.String str45 = commApplication38.commOnlySecond(str_array42);
    java.lang.String str46 = commApplication37.commBothMathches(str_array42);
    java.util.List list47 = sortApplication0.numericalSortCapitalNumbers(str_array42);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array52 = new java.lang.String[] { "hi!" };
    java.lang.String str53 = commApplication50.commOnlySecond(str_array52);
    java.lang.String str54 = calApplication49.printCalForYear(str_array52);
    java.lang.String str55 = commApplication48.commOnlySecond(str_array52);
    java.lang.String[] str_array57 = new java.lang.String[] { "hi!" };
    java.lang.String str58 = commApplication48.commAllMatches(str_array57);
    java.util.List list59 = sortApplication0.sortSimpleNumbers(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str33.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str43.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str45.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str46.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str53.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str55.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str58.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);

  }

  @Test
  public void test276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test276"); }


    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication0 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication1 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication2 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = calApplication3.printCalForYearMondayFirst(str_array5);
    java.util.List list7 = sortApplication2.sortCapitalNumbersSpecialChars(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array11 = new java.lang.String[] { "hi!" };
    java.lang.String str12 = commApplication9.commOnlySecond(str_array11);
    java.lang.String str13 = calApplication8.printCalForYear(str_array11);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "hi!" };
    java.lang.String str17 = commApplication14.commOnlySecond(str_array16);
    java.lang.String str18 = calApplication8.printCalForYear(str_array16);
    java.util.List list19 = sortApplication2.sortNumbersSpecialChars(str_array16);
    java.lang.String str20 = bcApplication1.notEqual(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array24 = new java.lang.String[] { "hi!" };
    java.lang.String str25 = commApplication22.commOnlySecond(str_array24);
    java.lang.String str26 = calApplication21.printCalForYear(str_array24);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array29 = new java.lang.String[] { "hi!" };
    java.lang.String str30 = commApplication27.commOnlySecond(str_array29);
    java.lang.String str31 = calApplication21.printCalForYear(str_array29);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication32 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication33 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "" };
    java.lang.String str37 = calApplication34.printCalForYearMondayFirst(str_array36);
    java.util.List list38 = sortApplication33.sortCapitalNumbersSpecialChars(str_array36);
    java.util.List list39 = sortApplication32.sortSimpleSpecialChars(str_array36);
    java.lang.String str40 = calApplication21.printCal(str_array36);
    java.lang.String str41 = bcApplication1.lessThanOrEqual(str_array36);
    java.lang.String[] str_array42 = null;
    java.lang.String str43 = bcApplication1.greaterThanOrEqual(str_array42);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication44 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array47 = new java.lang.String[] { "" };
    java.lang.String str48 = calApplication45.printCalForYearMondayFirst(str_array47);
    java.util.List list49 = sortApplication44.sortCapitalNumbersSpecialChars(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication50 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array53 = new java.lang.String[] { "" };
    java.lang.String str54 = calApplication51.printCalForYearMondayFirst(str_array53);
    java.util.List list55 = sortApplication50.sortCapitalNumbersSpecialChars(str_array53);
    java.util.List list56 = sortApplication44.numericalSortSimpleSpecialChars(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication59 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array61 = new java.lang.String[] { "hi!" };
    java.lang.String str62 = commApplication59.commOnlySecond(str_array61);
    java.lang.String str63 = calApplication58.printCalForYear(str_array61);
    java.lang.String str64 = commApplication57.commOnlySecond(str_array61);
    java.util.List list65 = sortApplication44.sortAll(str_array61);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication66 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication67 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array70 = new java.lang.String[] { "" };
    java.lang.String str71 = calApplication68.printCalForYearMondayFirst(str_array70);
    java.util.List list72 = sortApplication67.sortCapitalNumbersSpecialChars(str_array70);
    java.util.List list73 = sortApplication66.sortSimpleSpecialChars(str_array70);
    java.util.List list74 = sortApplication44.numericalSortCapitalSpecialChars(str_array70);
    java.lang.String str75 = bcApplication1.multiply(str_array70);
    java.io.InputStream inputStream76 = null;
    java.io.OutputStream outputStream77 = null;
    // The following exception was thrown during execution in test generation
    try {
      echoApplication0.run(str_array70, inputStream76, outputStream77);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.EchoException");
    } catch (sg.edu.nus.comp.cs4218.exception.EchoException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.EchoException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.EchoException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str17.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str25.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str30.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str62.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str64.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str75);

  }

  @Test
  public void test277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test277"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array14 = new java.lang.String[] { "hi!" };
    java.lang.String str15 = commApplication12.commOnlySecond(str_array14);
    java.lang.String str16 = calApplication6.printCalForYear(str_array14);
    java.util.List list17 = sortApplication0.sortNumbersSpecialChars(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = calApplication19.printCalForYearMondayFirst(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array25 = new java.lang.String[] { "" };
    java.lang.String str26 = calApplication23.printCalForYearMondayFirst(str_array25);
    java.lang.String str27 = calApplication19.printCal(str_array25);
    java.lang.String str28 = calApplication18.printCal(str_array25);
    java.util.List list29 = sortApplication0.numericalSortCapitalNumbersSpecialChars(str_array25);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication30 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "" };
    java.lang.String str34 = calApplication31.printCalForYearMondayFirst(str_array33);
    java.util.List list35 = sortApplication30.sortCapitalNumbersSpecialChars(str_array33);
    java.util.List list36 = sortApplication0.numericalSortNumbersSpecialChars(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication37 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "" };
    java.lang.String str41 = calApplication38.printCalForYearMondayFirst(str_array40);
    java.util.List list42 = sortApplication37.sortCapitalNumbersSpecialChars(str_array40);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "hi!" };
    java.lang.String str47 = commApplication44.commOnlySecond(str_array46);
    java.lang.String str48 = calApplication43.printCalForYear(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array51 = new java.lang.String[] { "hi!" };
    java.lang.String str52 = commApplication49.commOnlySecond(str_array51);
    java.lang.String str53 = calApplication43.printCalForYear(str_array51);
    java.util.List list54 = sortApplication37.sortNumbersSpecialChars(str_array51);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication55 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication56 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array59 = new java.lang.String[] { "" };
    java.lang.String str60 = calApplication57.printCalForYearMondayFirst(str_array59);
    java.util.List list61 = sortApplication56.sortCapitalNumbersSpecialChars(str_array59);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication63 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array65 = new java.lang.String[] { "hi!" };
    java.lang.String str66 = commApplication63.commOnlySecond(str_array65);
    java.lang.String str67 = calApplication62.printCalForYear(str_array65);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array70 = new java.lang.String[] { "hi!" };
    java.lang.String str71 = commApplication68.commOnlySecond(str_array70);
    java.lang.String str72 = calApplication62.printCalForYear(str_array70);
    java.util.List list73 = sortApplication56.sortNumbersSpecialChars(str_array70);
    java.lang.String str74 = bcApplication55.notEqual(str_array70);
    java.util.List list75 = sortApplication37.sortSimpleNumbers(str_array70);
    java.util.List list76 = sortApplication0.numericalSortSpecialChars(str_array70);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication77 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication78 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array80 = new java.lang.String[] { "hi!" };
    java.lang.String str81 = commApplication78.commOnlySecond(str_array80);
    java.lang.String str82 = calApplication77.printCalForYear(str_array80);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication83 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array85 = new java.lang.String[] { "hi!" };
    java.lang.String str86 = commApplication83.commOnlySecond(str_array85);
    java.lang.String str87 = calApplication77.printCalForYear(str_array85);
    java.util.List list88 = sortApplication0.sortSpecialChars(str_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str15.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str47.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str52.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str66.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str71.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str81.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str86.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list88);

  }

  @Test
  public void test278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test278"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array14 = new java.lang.String[] { "hi!" };
    java.lang.String str15 = commApplication12.commOnlySecond(str_array14);
    java.lang.String str16 = calApplication6.printCalForYear(str_array14);
    java.util.List list17 = sortApplication0.sortNumbersSpecialChars(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = calApplication19.printCalForYearMondayFirst(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array25 = new java.lang.String[] { "" };
    java.lang.String str26 = calApplication23.printCalForYearMondayFirst(str_array25);
    java.lang.String str27 = calApplication19.printCal(str_array25);
    java.lang.String str28 = calApplication18.printCal(str_array25);
    java.util.List list29 = sortApplication0.numericalSortCapitalNumbersSpecialChars(str_array25);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication30 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "" };
    java.lang.String str34 = calApplication31.printCalForYearMondayFirst(str_array33);
    java.util.List list35 = sortApplication30.sortCapitalNumbersSpecialChars(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication36 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "" };
    java.lang.String str40 = calApplication37.printCalForYearMondayFirst(str_array39);
    java.util.List list41 = sortApplication36.sortCapitalNumbersSpecialChars(str_array39);
    java.util.List list42 = sortApplication30.numericalSortSimpleSpecialChars(str_array39);
    java.util.List list43 = sortApplication0.sortSpecialChars(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication44 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array47 = new java.lang.String[] { "" };
    java.lang.String str48 = calApplication45.printCalForYearMondayFirst(str_array47);
    java.util.List list49 = sortApplication44.sortCapitalNumbersSpecialChars(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication50 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array53 = new java.lang.String[] { "hi!" };
    java.lang.String str54 = commApplication51.commOnlySecond(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array59 = new java.lang.String[] { "hi!" };
    java.lang.String str60 = commApplication57.commOnlySecond(str_array59);
    java.lang.String str61 = calApplication56.printCalForYear(str_array59);
    java.lang.String str62 = commApplication55.commOnlySecond(str_array59);
    java.lang.String str63 = commApplication51.commOnlySecond(str_array59);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication64 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication65 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication66 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array68 = new java.lang.String[] { "" };
    java.lang.String str69 = calApplication66.printCalForYearMondayFirst(str_array68);
    java.util.List list70 = sortApplication65.sortCapitalNumbersSpecialChars(str_array68);
    java.util.List list71 = sortApplication64.sortSimpleSpecialChars(str_array68);
    java.lang.String str72 = commApplication51.commAllMatches(str_array68);
    java.lang.String str73 = bcApplication50.lessThan(str_array68);
    java.util.List list74 = sortApplication44.numericalSortCapitalNumbersSpecialChars(str_array68);
    java.util.List list75 = sortApplication0.sortCapitalNumbers(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str15.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str54.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str60.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str62.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str63.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str72.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);

  }

  @Test
  public void test279() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test279"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    java.util.List list5 = sortApplication0.sortSimpleCapitalSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array13 = new java.lang.String[] { "" };
    java.lang.String str14 = calApplication11.printCalForYearMondayFirst(str_array13);
    java.lang.String str15 = calApplication7.printCal(str_array13);
    java.lang.String str16 = calApplication6.printCal(str_array13);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "hi!" };
    java.lang.String str23 = commApplication20.commOnlySecond(str_array22);
    java.lang.String str24 = calApplication19.printCalForYear(str_array22);
    java.lang.String str25 = commApplication18.commOnlySecond(str_array22);
    java.lang.String str26 = commApplication17.commBothMathches(str_array22);
    java.lang.String str27 = calApplication6.printCalForYear(str_array22);
    java.util.List list28 = sortApplication0.sortSimpleCapitalNumber(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication30 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "" };
    java.lang.String str34 = calApplication31.printCalForYearMondayFirst(str_array33);
    java.util.List list35 = sortApplication30.sortCapitalNumbersSpecialChars(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication36 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "" };
    java.lang.String str40 = calApplication37.printCalForYearMondayFirst(str_array39);
    java.util.List list41 = sortApplication36.sortCapitalNumbersSpecialChars(str_array39);
    java.util.List list42 = sortApplication30.numericalSortSimpleSpecialChars(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array47 = new java.lang.String[] { "hi!" };
    java.lang.String str48 = commApplication45.commOnlySecond(str_array47);
    java.lang.String str49 = calApplication44.printCalForYear(str_array47);
    java.lang.String str50 = commApplication43.commOnlySecond(str_array47);
    java.util.List list51 = sortApplication30.sortAll(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication52 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication53 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array56 = new java.lang.String[] { "" };
    java.lang.String str57 = calApplication54.printCalForYearMondayFirst(str_array56);
    java.util.List list58 = sortApplication53.sortCapitalNumbersSpecialChars(str_array56);
    java.util.List list59 = sortApplication52.sortSimpleSpecialChars(str_array56);
    java.util.List list60 = sortApplication30.numericalSortCapitalSpecialChars(str_array56);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication63 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array65 = new java.lang.String[] { "hi!" };
    java.lang.String str66 = commApplication63.commOnlySecond(str_array65);
    java.lang.String str67 = calApplication62.printCalForYear(str_array65);
    java.lang.String str68 = commApplication61.commOnlySecond(str_array65);
    java.util.List list69 = sortApplication30.sortAll(str_array65);
    java.lang.String str70 = calApplication29.printCalForYearMondayFirst(str_array65);
    java.util.List list71 = sortApplication0.sortSimpleCapital(str_array65);
    java.lang.String[] str_array72 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list73 = sortApplication0.numericalSortSimpleSpecialChars(str_array72);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str23.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str25.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str26.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str48.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str50.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str66.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str68.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);

  }

  @Test
  public void test280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test280"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    java.lang.String str5 = calApplication0.printCalForYear(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "" };
    java.lang.String str9 = calApplication6.printCalForYearMondayFirst(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array12 = new java.lang.String[] { "hi!" };
    java.lang.String str13 = commApplication10.commOnlySecond(str_array12);
    java.lang.String str14 = calApplication6.printCalWithMondayFirst(str_array12);
    java.lang.String str15 = calApplication0.printCalWithMondayFirst(str_array12);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "" };
    java.lang.String str19 = calApplication16.printCalForYearMondayFirst(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = calApplication20.printCalForYearMondayFirst(str_array22);
    java.lang.String str24 = calApplication16.printCal(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!" };
    java.lang.String str29 = commApplication26.commOnlySecond(str_array28);
    java.lang.String str30 = calApplication25.printCalForYear(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "hi!" };
    java.lang.String str34 = commApplication31.commOnlySecond(str_array33);
    java.lang.String str35 = calApplication25.printCalForYear(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication36 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication37 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "" };
    java.lang.String str41 = calApplication38.printCalForYearMondayFirst(str_array40);
    java.util.List list42 = sortApplication37.sortCapitalNumbersSpecialChars(str_array40);
    java.util.List list43 = sortApplication36.sortSimpleSpecialChars(str_array40);
    java.lang.String str44 = calApplication25.printCal(str_array40);
    java.lang.String str45 = calApplication16.printCalForMonthYear(str_array40);
    java.lang.String str46 = calApplication0.printCal(str_array40);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array49 = new java.lang.String[] { "" };
    java.lang.String str50 = calApplication47.printCalForYearMondayFirst(str_array49);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array53 = new java.lang.String[] { "" };
    java.lang.String str54 = calApplication51.printCalForYearMondayFirst(str_array53);
    java.lang.String str55 = calApplication47.printCal(str_array53);
    java.lang.String str56 = calApplication0.printCalForMonthYearMondayFirst(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication57 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array60 = new java.lang.String[] { "" };
    java.lang.String str61 = calApplication58.printCalForYearMondayFirst(str_array60);
    java.util.List list62 = sortApplication57.sortCapitalNumbersSpecialChars(str_array60);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication63 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array66 = new java.lang.String[] { "hi!" };
    java.lang.String str67 = commApplication64.commOnlySecond(str_array66);
    java.lang.String str68 = calApplication63.printCalForYear(str_array66);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication69 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array71 = new java.lang.String[] { "hi!" };
    java.lang.String str72 = commApplication69.commOnlySecond(str_array71);
    java.lang.String str73 = calApplication63.printCalForYear(str_array71);
    java.util.List list74 = sortApplication57.sortNumbersSpecialChars(str_array71);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication75 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication76 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array78 = new java.lang.String[] { "" };
    java.lang.String str79 = calApplication76.printCalForYearMondayFirst(str_array78);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication80 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array82 = new java.lang.String[] { "" };
    java.lang.String str83 = calApplication80.printCalForYearMondayFirst(str_array82);
    java.lang.String str84 = calApplication76.printCal(str_array82);
    java.lang.String str85 = calApplication75.printCal(str_array82);
    java.util.List list86 = sortApplication57.numericalSortCapitalNumbersSpecialChars(str_array82);
    java.io.InputStream inputStream87 = null;
    java.io.OutputStream outputStream88 = null;
    calApplication0.run(str_array82, inputStream87, outputStream88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str67.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str72.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list86);

  }

  @Test
  public void test281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test281"); }


    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication0 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication7.printCalForYear(str_array15);
    java.util.List list18 = sortApplication1.sortNumbersSpecialChars(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = calApplication20.printCalForYearMondayFirst(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = calApplication24.printCalForYearMondayFirst(str_array26);
    java.lang.String str28 = calApplication20.printCal(str_array26);
    java.lang.String str29 = calApplication19.printCal(str_array26);
    java.util.List list30 = sortApplication1.numericalSortCapitalNumbersSpecialChars(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication31 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "" };
    java.lang.String str35 = calApplication32.printCalForYearMondayFirst(str_array34);
    java.util.List list36 = sortApplication31.sortCapitalNumbersSpecialChars(str_array34);
    java.util.List list37 = sortApplication1.numericalSortNumbersSpecialChars(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication38 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array41 = new java.lang.String[] { "" };
    java.lang.String str42 = calApplication39.printCalForYearMondayFirst(str_array41);
    java.util.List list43 = sortApplication38.sortCapitalNumbersSpecialChars(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array47 = new java.lang.String[] { "hi!" };
    java.lang.String str48 = commApplication45.commOnlySecond(str_array47);
    java.lang.String str49 = calApplication44.printCalForYear(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array52 = new java.lang.String[] { "hi!" };
    java.lang.String str53 = commApplication50.commOnlySecond(str_array52);
    java.lang.String str54 = calApplication44.printCalForYear(str_array52);
    java.util.List list55 = sortApplication38.sortNumbersSpecialChars(str_array52);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication56 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication57 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array60 = new java.lang.String[] { "" };
    java.lang.String str61 = calApplication58.printCalForYearMondayFirst(str_array60);
    java.util.List list62 = sortApplication57.sortCapitalNumbersSpecialChars(str_array60);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication63 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array66 = new java.lang.String[] { "hi!" };
    java.lang.String str67 = commApplication64.commOnlySecond(str_array66);
    java.lang.String str68 = calApplication63.printCalForYear(str_array66);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication69 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array71 = new java.lang.String[] { "hi!" };
    java.lang.String str72 = commApplication69.commOnlySecond(str_array71);
    java.lang.String str73 = calApplication63.printCalForYear(str_array71);
    java.util.List list74 = sortApplication57.sortNumbersSpecialChars(str_array71);
    java.lang.String str75 = bcApplication56.notEqual(str_array71);
    java.util.List list76 = sortApplication38.sortSimpleNumbers(str_array71);
    java.util.List list77 = sortApplication1.numericalSortSpecialChars(str_array71);
    java.io.InputStream inputStream78 = null;
    java.io.OutputStream outputStream79 = null;
    // The following exception was thrown during execution in test generation
    try {
      echoApplication0.run(str_array71, inputStream78, outputStream79);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.EchoException");
    } catch (sg.edu.nus.comp.cs4218.exception.EchoException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.EchoException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.EchoException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str48.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str53.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str67.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str72.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);

  }

  @Test
  public void test282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test282"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication2 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = calApplication3.printCalForYearMondayFirst(str_array5);
    java.util.List list7 = sortApplication2.sortCapitalNumbersSpecialChars(str_array5);
    java.util.List list8 = sortApplication1.sortSimpleSpecialChars(str_array5);
    java.lang.String str9 = bcApplication0.lessThan(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication10 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array13 = new java.lang.String[] { "hi!" };
    java.lang.String str14 = commApplication11.commOnlySecond(str_array13);
    java.util.List list15 = sortApplication10.sortSimpleCapitalSpecialChars(str_array13);
    java.lang.String str16 = bcApplication0.subtract(str_array13);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication17 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array20 = new java.lang.String[] { "" };
    java.lang.String str21 = calApplication18.printCalForYearMondayFirst(str_array20);
    java.util.List list22 = sortApplication17.sortCapitalNumbersSpecialChars(str_array20);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "hi!" };
    java.lang.String str27 = commApplication24.commOnlySecond(str_array26);
    java.lang.String str28 = calApplication23.printCalForYear(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array31 = new java.lang.String[] { "hi!" };
    java.lang.String str32 = commApplication29.commOnlySecond(str_array31);
    java.lang.String str33 = calApplication23.printCalForYear(str_array31);
    java.util.List list34 = sortApplication17.sortNumbersSpecialChars(str_array31);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array38 = new java.lang.String[] { "hi!" };
    java.lang.String str39 = commApplication36.commOnlySecond(str_array38);
    java.lang.String str40 = calApplication35.printCalForYear(str_array38);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "hi!" };
    java.lang.String str44 = commApplication41.commOnlySecond(str_array43);
    java.lang.String str45 = calApplication35.printCalForYear(str_array43);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication46 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication47 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array50 = new java.lang.String[] { "" };
    java.lang.String str51 = calApplication48.printCalForYearMondayFirst(str_array50);
    java.util.List list52 = sortApplication47.sortCapitalNumbersSpecialChars(str_array50);
    java.util.List list53 = sortApplication46.sortSimpleSpecialChars(str_array50);
    java.lang.String str54 = calApplication35.printCal(str_array50);
    java.util.List list55 = sortApplication17.sortStringsSimple(str_array50);
    java.lang.String str56 = bcApplication0.divide(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str14.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str27.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str32.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str44.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);

  }

  @Test
  public void test283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test283"); }


    sg.edu.nus.comp.cs4218.impl.app.TailApplication tailApplication0 = new sg.edu.nus.comp.cs4218.impl.app.TailApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = calApplication8.printCalForYearMondayFirst(str_array10);
    java.util.List list12 = sortApplication7.sortCapitalNumbersSpecialChars(str_array10);
    java.util.List list13 = sortApplication1.numericalSortSimpleSpecialChars(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!" };
    java.lang.String str18 = commApplication15.commOnlySecond(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = calApplication20.printCalForYearMondayFirst(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "hi!" };
    java.lang.String str27 = commApplication24.commOnlySecond(str_array26);
    java.lang.String str28 = calApplication20.printCalWithMondayFirst(str_array26);
    java.lang.String str29 = calApplication14.printCalWithMondayFirst(str_array26);
    java.util.List list30 = sortApplication1.numericalSortStringsSimple(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication31 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication32 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "" };
    java.lang.String str36 = calApplication33.printCalForYearMondayFirst(str_array35);
    java.util.List list37 = sortApplication32.sortCapitalNumbersSpecialChars(str_array35);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array41 = new java.lang.String[] { "hi!" };
    java.lang.String str42 = commApplication39.commOnlySecond(str_array41);
    java.lang.String str43 = calApplication38.printCalForYear(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "hi!" };
    java.lang.String str47 = commApplication44.commOnlySecond(str_array46);
    java.lang.String str48 = calApplication38.printCalForYear(str_array46);
    java.util.List list49 = sortApplication32.sortNumbersSpecialChars(str_array46);
    java.lang.String str50 = bcApplication31.notEqual(str_array46);
    java.util.List list51 = sortApplication1.numericalSortSimpleCapital(str_array46);
    java.io.InputStream inputStream52 = null;
    java.io.OutputStream outputStream53 = null;
    // The following exception was thrown during execution in test generation
    try {
      tailApplication0.run(str_array46, inputStream52, outputStream53);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException");
    } catch (sg.edu.nus.comp.cs4218.exception.TailException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.TailException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str27.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str42.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str47.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);

  }

  @Test
  public void test284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test284"); }


    sg.edu.nus.comp.cs4218.impl.app.CatApplication catApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CatApplication();
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication1 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    java.lang.String str13 = commApplication6.commOnlySecond(str_array10);
    java.lang.String str14 = commApplication2.commOnlySecond(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication15 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "" };
    java.lang.String str19 = calApplication16.printCalForYearMondayFirst(str_array18);
    java.util.List list20 = sortApplication15.sortCapitalNumbersSpecialChars(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array24 = new java.lang.String[] { "hi!" };
    java.lang.String str25 = commApplication22.commOnlySecond(str_array24);
    java.lang.String str26 = calApplication21.printCalForYear(str_array24);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array29 = new java.lang.String[] { "hi!" };
    java.lang.String str30 = commApplication27.commOnlySecond(str_array29);
    java.lang.String str31 = calApplication21.printCalForYear(str_array29);
    java.util.List list32 = sortApplication15.sortNumbersSpecialChars(str_array29);
    java.lang.String str33 = commApplication2.commBothMathches(str_array29);
    java.lang.String str34 = bcApplication1.add(str_array29);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication35 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication36 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "" };
    java.lang.String str40 = calApplication37.printCalForYearMondayFirst(str_array39);
    java.util.List list41 = sortApplication36.sortCapitalNumbersSpecialChars(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication42 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array45 = new java.lang.String[] { "" };
    java.lang.String str46 = calApplication43.printCalForYearMondayFirst(str_array45);
    java.util.List list47 = sortApplication42.sortCapitalNumbersSpecialChars(str_array45);
    java.util.List list48 = sortApplication36.numericalSortSimpleSpecialChars(str_array45);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array53 = new java.lang.String[] { "hi!" };
    java.lang.String str54 = commApplication51.commOnlySecond(str_array53);
    java.lang.String str55 = calApplication50.printCalForYear(str_array53);
    java.lang.String str56 = commApplication49.commOnlySecond(str_array53);
    java.util.List list57 = sortApplication36.sortAll(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication58 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication59 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array62 = new java.lang.String[] { "" };
    java.lang.String str63 = calApplication60.printCalForYearMondayFirst(str_array62);
    java.util.List list64 = sortApplication59.sortCapitalNumbersSpecialChars(str_array62);
    java.util.List list65 = sortApplication58.sortSimpleSpecialChars(str_array62);
    java.util.List list66 = sortApplication36.numericalSortCapitalSpecialChars(str_array62);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication67 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication69 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array71 = new java.lang.String[] { "hi!" };
    java.lang.String str72 = commApplication69.commOnlySecond(str_array71);
    java.lang.String str73 = calApplication68.printCalForYear(str_array71);
    java.lang.String str74 = commApplication67.commOnlySecond(str_array71);
    java.util.List list75 = sortApplication36.sortAll(str_array71);
    java.lang.String str76 = bcApplication35.equalEqual(str_array71);
    java.lang.String str77 = bcApplication1.greaterThanOrEqual(str_array71);
    java.io.InputStream inputStream78 = null;
    java.io.OutputStream outputStream79 = null;
    // The following exception was thrown during execution in test generation
    try {
      catApplication0.run(str_array71, inputStream78, outputStream79);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CatException");
    } catch (sg.edu.nus.comp.cs4218.exception.CatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.CatException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CatException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str14.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str25.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str30.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str33.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str54.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str56.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str72.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str74.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str77);

  }

  @Test
  public void test285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test285"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    java.lang.String str5 = calApplication0.printCalForYear(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication6 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication12.printCalForYear(str_array15);
    java.lang.String str18 = commApplication11.commOnlySecond(str_array15);
    java.lang.String str19 = commApplication7.commOnlySecond(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication20 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication21 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array24 = new java.lang.String[] { "" };
    java.lang.String str25 = calApplication22.printCalForYearMondayFirst(str_array24);
    java.util.List list26 = sortApplication21.sortCapitalNumbersSpecialChars(str_array24);
    java.util.List list27 = sortApplication20.sortSimpleSpecialChars(str_array24);
    java.lang.String str28 = commApplication7.commAllMatches(str_array24);
    java.lang.String str29 = bcApplication6.lessThan(str_array24);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication30 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication31 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "" };
    java.lang.String str35 = calApplication32.printCalForYearMondayFirst(str_array34);
    java.util.List list36 = sortApplication31.sortCapitalNumbersSpecialChars(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication37 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "" };
    java.lang.String str41 = calApplication38.printCalForYearMondayFirst(str_array40);
    java.util.List list42 = sortApplication37.sortCapitalNumbersSpecialChars(str_array40);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "hi!" };
    java.lang.String str47 = commApplication44.commOnlySecond(str_array46);
    java.lang.String str48 = calApplication43.printCalForYear(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array51 = new java.lang.String[] { "hi!" };
    java.lang.String str52 = commApplication49.commOnlySecond(str_array51);
    java.lang.String str53 = calApplication43.printCalForYear(str_array51);
    java.util.List list54 = sortApplication37.sortNumbersSpecialChars(str_array51);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array58 = new java.lang.String[] { "" };
    java.lang.String str59 = calApplication56.printCalForYearMondayFirst(str_array58);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array62 = new java.lang.String[] { "" };
    java.lang.String str63 = calApplication60.printCalForYearMondayFirst(str_array62);
    java.lang.String str64 = calApplication56.printCal(str_array62);
    java.lang.String str65 = calApplication55.printCal(str_array62);
    java.util.List list66 = sortApplication37.numericalSortCapitalNumbersSpecialChars(str_array62);
    java.util.List list67 = sortApplication31.numericalSortCapitalNumbersSpecialChars(str_array62);
    java.lang.String[] str_array69 = new java.lang.String[] { "comm: terminated with error message comm: file is not readable" };
    java.util.List list70 = sortApplication31.numericalSortAll(str_array69);
    java.lang.String str71 = bcApplication30.bracket(str_array69);
    java.lang.String str72 = bcApplication6.greaterThan(str_array69);
    java.lang.String str73 = calApplication0.printCalForYearMondayFirst(str_array69);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication74 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication75 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication76 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array78 = new java.lang.String[] { "" };
    java.lang.String str79 = calApplication76.printCalForYearMondayFirst(str_array78);
    java.util.List list80 = sortApplication75.sortCapitalNumbersSpecialChars(str_array78);
    java.util.List list81 = sortApplication74.sortSimpleSpecialChars(str_array78);
    java.lang.String str82 = calApplication0.printCalForMonthYearMondayFirst(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str28.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str47.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str52.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str82);

  }

  @Test
  public void test286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test286"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    java.lang.String str12 = commApplication5.commOnlySecond(str_array9);
    java.lang.String str13 = commApplication1.commOnlySecond(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication14 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "" };
    java.lang.String str18 = calApplication15.printCalForYearMondayFirst(str_array17);
    java.util.List list19 = sortApplication14.sortCapitalNumbersSpecialChars(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array23 = new java.lang.String[] { "hi!" };
    java.lang.String str24 = commApplication21.commOnlySecond(str_array23);
    java.lang.String str25 = calApplication20.printCalForYear(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!" };
    java.lang.String str29 = commApplication26.commOnlySecond(str_array28);
    java.lang.String str30 = calApplication20.printCalForYear(str_array28);
    java.util.List list31 = sortApplication14.sortNumbersSpecialChars(str_array28);
    java.lang.String str32 = commApplication1.commBothMathches(str_array28);
    java.lang.String str33 = bcApplication0.add(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication34 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication35 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication36 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "" };
    java.lang.String str40 = calApplication37.printCalForYearMondayFirst(str_array39);
    java.util.List list41 = sortApplication36.sortCapitalNumbersSpecialChars(str_array39);
    java.util.List list42 = sortApplication35.sortSimpleSpecialChars(str_array39);
    java.io.InputStream inputStream43 = null;
    java.io.OutputStream outputStream44 = null;
    bcApplication34.run(str_array39, inputStream43, outputStream44);
    java.lang.String str46 = bcApplication0.equalEqual(str_array39);
    java.lang.String[] str_array47 = null;
    java.lang.String str48 = bcApplication0.equalEqual(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication49 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array52 = new java.lang.String[] { "" };
    java.lang.String str53 = calApplication50.printCalForYearMondayFirst(str_array52);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array56 = new java.lang.String[] { "hi!" };
    java.lang.String str57 = commApplication54.commOnlySecond(str_array56);
    java.lang.String str58 = calApplication50.printCalWithMondayFirst(str_array56);
    java.util.List list59 = sortApplication49.sortCapitalNumbers(str_array56);
    java.lang.String str60 = bcApplication0.subtract(str_array56);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication61 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array64 = new java.lang.String[] { "" };
    java.lang.String str65 = calApplication62.printCalForYearMondayFirst(str_array64);
    java.util.List list66 = sortApplication61.sortCapitalNumbersSpecialChars(str_array64);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication67 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array70 = new java.lang.String[] { "" };
    java.lang.String str71 = calApplication68.printCalForYearMondayFirst(str_array70);
    java.util.List list72 = sortApplication67.sortCapitalNumbersSpecialChars(str_array70);
    java.util.List list73 = sortApplication61.numericalSortSimpleSpecialChars(str_array70);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication74 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication75 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array77 = new java.lang.String[] { "" };
    java.lang.String str78 = calApplication75.printCalForYearMondayFirst(str_array77);
    java.util.List list79 = sortApplication74.sortCapitalNumbersSpecialChars(str_array77);
    java.util.List list80 = sortApplication61.numericalSortCapitalNumbersSpecialChars(str_array77);
    java.lang.String str81 = bcApplication0.lessThanOrEqual(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str24.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str32.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str57.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str81);

  }

  @Test
  public void test287() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test287"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    java.lang.String str12 = commApplication5.commOnlySecond(str_array9);
    java.lang.String str13 = commApplication1.commOnlySecond(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication14 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication15 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "" };
    java.lang.String str19 = calApplication16.printCalForYearMondayFirst(str_array18);
    java.util.List list20 = sortApplication15.sortCapitalNumbersSpecialChars(str_array18);
    java.util.List list21 = sortApplication14.sortSimpleSpecialChars(str_array18);
    java.lang.String str22 = commApplication1.commAllMatches(str_array18);
    java.lang.String str23 = bcApplication0.lessThan(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = calApplication24.printCalForYearMondayFirst(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array30 = new java.lang.String[] { "" };
    java.lang.String str31 = calApplication28.printCalForYearMondayFirst(str_array30);
    java.lang.String str32 = calApplication24.printCal(str_array30);
    java.lang.String str33 = bcApplication0.and(str_array30);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication34 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array38 = new java.lang.String[] { "" };
    java.lang.String str39 = calApplication36.printCalForYearMondayFirst(str_array38);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array42 = new java.lang.String[] { "" };
    java.lang.String str43 = calApplication40.printCalForYearMondayFirst(str_array42);
    java.lang.String str44 = calApplication36.printCal(str_array42);
    java.lang.String str45 = calApplication35.printCal(str_array42);
    java.lang.String str46 = bcApplication34.negate(str_array42);
    java.lang.String str47 = bcApplication0.multiply(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str22.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);

  }

  @Test
  public void test288() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test288"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication7.printCalForYear(str_array15);
    java.util.List list18 = sortApplication1.sortNumbersSpecialChars(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication19 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = calApplication20.printCalForYearMondayFirst(str_array22);
    java.util.List list24 = sortApplication19.sortCapitalNumbersSpecialChars(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication25 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "" };
    java.lang.String str29 = calApplication26.printCalForYearMondayFirst(str_array28);
    java.util.List list30 = sortApplication25.sortCapitalNumbersSpecialChars(str_array28);
    java.util.List list31 = sortApplication19.numericalSortSimpleSpecialChars(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "hi!" };
    java.lang.String str37 = commApplication34.commOnlySecond(str_array36);
    java.lang.String str38 = calApplication33.printCalForYear(str_array36);
    java.lang.String str39 = commApplication32.commOnlySecond(str_array36);
    java.util.List list40 = sortApplication19.sortAll(str_array36);
    java.util.List list41 = sortApplication1.numericalSortNumbersSpecialChars(str_array36);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication42 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication43 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = calApplication44.printCalForYearMondayFirst(str_array46);
    java.util.List list48 = sortApplication43.sortCapitalNumbersSpecialChars(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array52 = new java.lang.String[] { "hi!" };
    java.lang.String str53 = commApplication50.commOnlySecond(str_array52);
    java.lang.String str54 = calApplication49.printCalForYear(str_array52);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "hi!" };
    java.lang.String str58 = commApplication55.commOnlySecond(str_array57);
    java.lang.String str59 = calApplication49.printCalForYear(str_array57);
    java.util.List list60 = sortApplication43.sortNumbersSpecialChars(str_array57);
    java.lang.String str61 = bcApplication42.notEqual(str_array57);
    java.util.List list62 = sortApplication1.sortSimpleCapitalSpecialChars(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication63 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array65 = new java.lang.String[] { "" };
    java.lang.String str66 = calApplication63.printCalForYearMondayFirst(str_array65);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication67 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array69 = new java.lang.String[] { "" };
    java.lang.String str70 = calApplication67.printCalForYearMondayFirst(str_array69);
    java.lang.String str71 = calApplication63.printCal(str_array69);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication72 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication73 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array75 = new java.lang.String[] { "hi!" };
    java.lang.String str76 = commApplication73.commOnlySecond(str_array75);
    java.lang.String str77 = calApplication72.printCalForYear(str_array75);
    java.lang.String str78 = calApplication63.printCalForYearMondayFirst(str_array75);
    java.util.List list79 = sortApplication1.numericalSortSimpleNumbers(str_array75);
    java.lang.String str80 = bcApplication0.notEqual(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str37.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str53.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str58.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str76.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str80);

  }

  @Test
  public void test289() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test289"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication2 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = calApplication3.printCalForYearMondayFirst(str_array5);
    java.util.List list7 = sortApplication2.sortCapitalNumbersSpecialChars(str_array5);
    java.util.List list8 = sortApplication1.sortSimpleSpecialChars(str_array5);
    java.lang.String str9 = bcApplication0.lessThan(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array13 = new java.lang.String[] { "hi!" };
    java.lang.String str14 = commApplication11.commOnlySecond(str_array13);
    java.lang.String str15 = calApplication10.printCalForYear(str_array13);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "" };
    java.lang.String str19 = calApplication16.printCalForYearMondayFirst(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "hi!" };
    java.lang.String str23 = commApplication20.commOnlySecond(str_array22);
    java.lang.String str24 = calApplication16.printCalWithMondayFirst(str_array22);
    java.lang.String str25 = calApplication10.printCalWithMondayFirst(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array29 = new java.lang.String[] { "" };
    java.lang.String str30 = calApplication27.printCalForYearMondayFirst(str_array29);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "" };
    java.lang.String str34 = calApplication31.printCalForYearMondayFirst(str_array33);
    java.lang.String str35 = calApplication27.printCal(str_array33);
    java.lang.String str36 = calApplication26.printCal(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "hi!" };
    java.lang.String str41 = commApplication38.commOnlySecond(str_array40);
    java.lang.String str42 = calApplication37.printCalForYear(str_array40);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array45 = new java.lang.String[] { "hi!" };
    java.lang.String str46 = commApplication43.commOnlySecond(str_array45);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array51 = new java.lang.String[] { "hi!" };
    java.lang.String str52 = commApplication49.commOnlySecond(str_array51);
    java.lang.String str53 = calApplication48.printCalForYear(str_array51);
    java.lang.String str54 = commApplication47.commOnlySecond(str_array51);
    java.lang.String str55 = commApplication43.commOnlySecond(str_array51);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication56 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array59 = new java.lang.String[] { "" };
    java.lang.String str60 = calApplication57.printCalForYearMondayFirst(str_array59);
    java.util.List list61 = sortApplication56.sortCapitalNumbersSpecialChars(str_array59);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication63 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array65 = new java.lang.String[] { "hi!" };
    java.lang.String str66 = commApplication63.commOnlySecond(str_array65);
    java.lang.String str67 = calApplication62.printCalForYear(str_array65);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array70 = new java.lang.String[] { "hi!" };
    java.lang.String str71 = commApplication68.commOnlySecond(str_array70);
    java.lang.String str72 = calApplication62.printCalForYear(str_array70);
    java.util.List list73 = sortApplication56.sortNumbersSpecialChars(str_array70);
    java.lang.String str74 = commApplication43.commBothMathches(str_array70);
    java.lang.String str75 = calApplication37.printCalForMonthYearMondayFirst(str_array70);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication76 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication77 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array79 = new java.lang.String[] { "hi!" };
    java.lang.String str80 = commApplication77.commOnlySecond(str_array79);
    java.lang.String str81 = calApplication76.printCalForYear(str_array79);
    java.io.InputStream inputStream82 = null;
    java.io.OutputStream outputStream83 = null;
    calApplication37.run(str_array79, inputStream82, outputStream83);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication85 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication86 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array88 = new java.lang.String[] { "hi!" };
    java.lang.String str89 = commApplication86.commOnlySecond(str_array88);
    java.lang.String str90 = calApplication85.printCalForYear(str_array88);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication91 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array93 = new java.lang.String[] { "hi!" };
    java.lang.String str94 = commApplication91.commOnlySecond(str_array93);
    java.lang.String str95 = calApplication85.printCalForYear(str_array93);
    java.lang.String str96 = calApplication37.printCalForMonthYearMondayFirst(str_array93);
    java.lang.String str97 = calApplication26.printCalForMonthYearMondayFirst(str_array93);
    java.lang.String str98 = calApplication10.printCalWithMondayFirst(str_array93);
    java.lang.String str99 = bcApplication0.greaterThan(str_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str14.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str23.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str41.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str46.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str52.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str54.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str55.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str66.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str71.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str74.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str80.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str89.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str94 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str94.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str99);

  }

  @Test
  public void test290() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test290"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    java.util.List list12 = sortApplication0.numericalSortSimpleSpecialChars(str_array9);
    java.lang.String[] str_array14 = new java.lang.String[] { "" };
    java.util.List list15 = sortApplication0.sortSimpleCapitalSpecialChars(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication16 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "hi!" };
    java.lang.String str20 = commApplication17.commOnlySecond(str_array19);
    java.util.List list21 = sortApplication16.sortSimpleCapitalSpecialChars(str_array19);
    java.util.List list22 = sortApplication0.numericalSortSimpleCapitalSpecialChars(str_array19);
    java.lang.String[] str_array23 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list24 = sortApplication0.numericalSortNumbersSpecialChars(str_array23);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);

  }

  @Test
  public void test291() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test291"); }


    sg.edu.nus.comp.cs4218.impl.app.TailApplication tailApplication0 = new sg.edu.nus.comp.cs4218.impl.app.TailApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication2 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = calApplication3.printCalForYearMondayFirst(str_array5);
    java.util.List list7 = sortApplication2.sortCapitalNumbersSpecialChars(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication8 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array11 = new java.lang.String[] { "" };
    java.lang.String str12 = calApplication9.printCalForYearMondayFirst(str_array11);
    java.util.List list13 = sortApplication8.sortCapitalNumbersSpecialChars(str_array11);
    java.util.List list14 = sortApplication2.numericalSortSimpleSpecialChars(str_array11);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "hi!" };
    java.lang.String str20 = commApplication17.commOnlySecond(str_array19);
    java.lang.String str21 = calApplication16.printCalForYear(str_array19);
    java.lang.String str22 = commApplication15.commOnlySecond(str_array19);
    java.util.List list23 = sortApplication2.sortAll(str_array19);
    java.util.List list24 = sortApplication1.sortSimpleCapitalSpecialChars(str_array19);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!" };
    java.lang.String str29 = commApplication26.commOnlySecond(str_array28);
    java.lang.String str30 = calApplication25.printCalForYear(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "hi!" };
    java.lang.String str34 = commApplication31.commOnlySecond(str_array33);
    java.lang.String str35 = calApplication25.printCalForYear(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication36 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "" };
    java.lang.String str40 = calApplication37.printCalForYearMondayFirst(str_array39);
    java.util.List list41 = sortApplication36.sortCapitalNumbersSpecialChars(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array45 = new java.lang.String[] { "hi!" };
    java.lang.String str46 = commApplication43.commOnlySecond(str_array45);
    java.lang.String str47 = calApplication42.printCalForYear(str_array45);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array50 = new java.lang.String[] { "hi!" };
    java.lang.String str51 = commApplication48.commOnlySecond(str_array50);
    java.lang.String str52 = calApplication42.printCalForYear(str_array50);
    java.util.List list53 = sortApplication36.sortNumbersSpecialChars(str_array50);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "" };
    java.lang.String str58 = calApplication55.printCalForYearMondayFirst(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication59 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array61 = new java.lang.String[] { "" };
    java.lang.String str62 = calApplication59.printCalForYearMondayFirst(str_array61);
    java.lang.String str63 = calApplication55.printCal(str_array61);
    java.lang.String str64 = calApplication54.printCal(str_array61);
    java.util.List list65 = sortApplication36.numericalSortCapitalNumbersSpecialChars(str_array61);
    java.io.InputStream inputStream66 = null;
    java.io.OutputStream outputStream67 = null;
    calApplication25.run(str_array61, inputStream66, outputStream67);
    java.util.List list69 = sortApplication1.numericalSortNumbersSpecialChars(str_array61);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication70 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication71 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication72 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array74 = new java.lang.String[] { "" };
    java.lang.String str75 = calApplication72.printCalForYearMondayFirst(str_array74);
    java.util.List list76 = sortApplication71.sortCapitalNumbersSpecialChars(str_array74);
    java.util.List list77 = sortApplication70.sortSimpleSpecialChars(str_array74);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication78 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication79 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array81 = new java.lang.String[] { "hi!" };
    java.lang.String str82 = commApplication79.commOnlySecond(str_array81);
    java.lang.String str83 = calApplication78.printCalForYear(str_array81);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication84 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array86 = new java.lang.String[] { "" };
    java.lang.String str87 = calApplication84.printCalForYearMondayFirst(str_array86);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication88 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array90 = new java.lang.String[] { "hi!" };
    java.lang.String str91 = commApplication88.commOnlySecond(str_array90);
    java.lang.String str92 = calApplication84.printCalWithMondayFirst(str_array90);
    java.lang.String str93 = calApplication78.printCalWithMondayFirst(str_array90);
    java.util.List list94 = sortApplication70.numericalSortSimpleSpecialChars(str_array90);
    java.util.List list95 = sortApplication1.sortCapitalNumbersSpecialChars(str_array90);
    java.io.InputStream inputStream96 = null;
    java.io.OutputStream outputStream97 = null;
    // The following exception was thrown during execution in test generation
    try {
      tailApplication0.run(str_array90, inputStream96, outputStream97);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException");
    } catch (sg.edu.nus.comp.cs4218.exception.TailException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.TailException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str22.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str46.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str51.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str82.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str91 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str91.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list95);

  }

  @Test
  public void test292() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test292"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    java.util.List list5 = sortApplication0.numericalSortNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array14 = new java.lang.String[] { "" };
    java.lang.String str15 = calApplication12.printCalForYearMondayFirst(str_array14);
    java.util.List list16 = sortApplication6.numericalSortSimpleCapitalNumber(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication17 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array20 = new java.lang.String[] { "" };
    java.lang.String str21 = calApplication18.printCalForYearMondayFirst(str_array20);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array24 = new java.lang.String[] { "hi!" };
    java.lang.String str25 = commApplication22.commOnlySecond(str_array24);
    java.lang.String str26 = calApplication18.printCalWithMondayFirst(str_array24);
    java.util.List list27 = sortApplication17.sortCapitalNumbers(str_array24);
    java.util.List list28 = sortApplication6.sortCapitalSpecialChars(str_array24);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array31 = new java.lang.String[] { "hi!" };
    java.lang.String str32 = commApplication29.commOnlySecond(str_array31);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication33 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "hi!" };
    java.lang.String str37 = commApplication34.commOnlySecond(str_array36);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array42 = new java.lang.String[] { "hi!" };
    java.lang.String str43 = commApplication40.commOnlySecond(str_array42);
    java.lang.String str44 = calApplication39.printCalForYear(str_array42);
    java.lang.String str45 = commApplication38.commOnlySecond(str_array42);
    java.lang.String str46 = commApplication34.commOnlySecond(str_array42);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication47 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication48 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array51 = new java.lang.String[] { "" };
    java.lang.String str52 = calApplication49.printCalForYearMondayFirst(str_array51);
    java.util.List list53 = sortApplication48.sortCapitalNumbersSpecialChars(str_array51);
    java.util.List list54 = sortApplication47.sortSimpleSpecialChars(str_array51);
    java.lang.String str55 = commApplication34.commAllMatches(str_array51);
    java.lang.String str56 = bcApplication33.lessThan(str_array51);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication57 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array60 = new java.lang.String[] { "" };
    java.lang.String str61 = calApplication58.printCalForYearMondayFirst(str_array60);
    java.util.List list62 = sortApplication57.sortCapitalNumbersSpecialChars(str_array60);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication63 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array66 = new java.lang.String[] { "hi!" };
    java.lang.String str67 = commApplication64.commOnlySecond(str_array66);
    java.lang.String str68 = calApplication63.printCalForYear(str_array66);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication69 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array71 = new java.lang.String[] { "hi!" };
    java.lang.String str72 = commApplication69.commOnlySecond(str_array71);
    java.lang.String str73 = calApplication63.printCalForYear(str_array71);
    java.util.List list74 = sortApplication57.sortNumbersSpecialChars(str_array71);
    java.lang.String str75 = bcApplication33.negate(str_array71);
    java.lang.String str76 = commApplication29.commOnlyFirst(str_array71);
    java.util.List list77 = sortApplication6.sortStringsSimple(str_array71);
    java.util.List list78 = sortApplication0.numericalSortNumbersSpecialChars(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str25.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str32.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str37.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str43.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str45.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str46.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str55.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str67.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str72.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str76.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);

  }

  @Test
  public void test293() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test293"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array2 = new java.lang.String[] { "" };
    java.lang.String str3 = calApplication0.printCalForYearMondayFirst(str_array2);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication4 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array6 = new java.lang.String[] { "" };
    java.lang.String str7 = calApplication4.printCalForYearMondayFirst(str_array6);
    java.lang.String str8 = calApplication0.printCal(str_array6);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication9 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array12 = new java.lang.String[] { "hi!" };
    java.lang.String str13 = commApplication10.commOnlySecond(str_array12);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "hi!" };
    java.lang.String str19 = commApplication16.commOnlySecond(str_array18);
    java.lang.String str20 = calApplication15.printCalForYear(str_array18);
    java.lang.String str21 = commApplication14.commOnlySecond(str_array18);
    java.lang.String str22 = commApplication10.commOnlySecond(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication24 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = calApplication25.printCalForYearMondayFirst(str_array27);
    java.util.List list29 = sortApplication24.sortCapitalNumbersSpecialChars(str_array27);
    java.util.List list30 = sortApplication23.sortSimpleSpecialChars(str_array27);
    java.lang.String str31 = commApplication10.commAllMatches(str_array27);
    java.lang.String str32 = bcApplication9.lessThan(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "hi!" };
    java.lang.String str37 = commApplication34.commOnlySecond(str_array36);
    java.lang.String str38 = calApplication33.printCalForYear(str_array36);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array41 = new java.lang.String[] { "hi!" };
    java.lang.String str42 = commApplication39.commOnlySecond(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array47 = new java.lang.String[] { "hi!" };
    java.lang.String str48 = commApplication45.commOnlySecond(str_array47);
    java.lang.String str49 = calApplication44.printCalForYear(str_array47);
    java.lang.String str50 = commApplication43.commOnlySecond(str_array47);
    java.lang.String str51 = commApplication39.commOnlySecond(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication52 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array55 = new java.lang.String[] { "" };
    java.lang.String str56 = calApplication53.printCalForYearMondayFirst(str_array55);
    java.util.List list57 = sortApplication52.sortCapitalNumbersSpecialChars(str_array55);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication59 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array61 = new java.lang.String[] { "hi!" };
    java.lang.String str62 = commApplication59.commOnlySecond(str_array61);
    java.lang.String str63 = calApplication58.printCalForYear(str_array61);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array66 = new java.lang.String[] { "hi!" };
    java.lang.String str67 = commApplication64.commOnlySecond(str_array66);
    java.lang.String str68 = calApplication58.printCalForYear(str_array66);
    java.util.List list69 = sortApplication52.sortNumbersSpecialChars(str_array66);
    java.lang.String str70 = commApplication39.commBothMathches(str_array66);
    java.lang.String str71 = calApplication33.printCalForMonthYearMondayFirst(str_array66);
    java.lang.String str72 = bcApplication9.number(str_array66);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication73 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array75 = new java.lang.String[] { "" };
    java.lang.String str76 = calApplication73.printCalForYearMondayFirst(str_array75);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication77 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array79 = new java.lang.String[] { "hi!" };
    java.lang.String str80 = commApplication77.commOnlySecond(str_array79);
    java.lang.String str81 = calApplication73.printCalWithMondayFirst(str_array79);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication82 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication83 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array85 = new java.lang.String[] { "" };
    java.lang.String str86 = calApplication83.printCalForYearMondayFirst(str_array85);
    java.util.List list87 = sortApplication82.sortCapitalNumbersSpecialChars(str_array85);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication88 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication89 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array91 = new java.lang.String[] { "" };
    java.lang.String str92 = calApplication89.printCalForYearMondayFirst(str_array91);
    java.util.List list93 = sortApplication88.sortCapitalNumbersSpecialChars(str_array91);
    java.util.List list94 = sortApplication82.numericalSortSimpleSpecialChars(str_array91);
    java.lang.String str95 = calApplication73.printCalForYear(str_array91);
    java.lang.String str96 = bcApplication9.lessThanOrEqual(str_array91);
    java.lang.String str97 = calApplication0.printCal(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str22.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str31.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str37.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str42.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str48.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str50.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str51.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str62.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str67.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str70.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str80.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str97);

  }

  @Test
  public void test294() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test294"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = calApplication8.printCalForYearMondayFirst(str_array10);
    java.util.List list12 = sortApplication7.sortCapitalNumbersSpecialChars(str_array10);
    java.util.List list13 = sortApplication1.numericalSortSimpleSpecialChars(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "hi!" };
    java.lang.String str19 = commApplication16.commOnlySecond(str_array18);
    java.lang.String str20 = calApplication15.printCalForYear(str_array18);
    java.lang.String str21 = commApplication14.commOnlySecond(str_array18);
    java.util.List list22 = sortApplication1.sortAll(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication24 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = calApplication25.printCalForYearMondayFirst(str_array27);
    java.util.List list29 = sortApplication24.sortCapitalNumbersSpecialChars(str_array27);
    java.util.List list30 = sortApplication23.sortSimpleSpecialChars(str_array27);
    java.util.List list31 = sortApplication1.numericalSortCapitalSpecialChars(str_array27);
    java.lang.String str32 = bcApplication0.subtract(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "hi!" };
    java.lang.String str37 = commApplication34.commOnlySecond(str_array36);
    java.lang.String str38 = calApplication33.printCalForYear(str_array36);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array41 = new java.lang.String[] { "hi!" };
    java.lang.String str42 = commApplication39.commOnlySecond(str_array41);
    java.lang.String str43 = calApplication33.printCalForYear(str_array41);
    java.lang.String str44 = bcApplication0.and(str_array41);
    java.lang.String[] str_array45 = null;
    java.lang.String str46 = bcApplication0.notEqual(str_array45);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication48 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array51 = new java.lang.String[] { "" };
    java.lang.String str52 = calApplication49.printCalForYearMondayFirst(str_array51);
    java.util.List list53 = sortApplication48.sortCapitalNumbersSpecialChars(str_array51);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication54 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "" };
    java.lang.String str58 = calApplication55.printCalForYearMondayFirst(str_array57);
    java.util.List list59 = sortApplication54.sortCapitalNumbersSpecialChars(str_array57);
    java.util.List list60 = sortApplication48.numericalSortSimpleSpecialChars(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication63 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array65 = new java.lang.String[] { "hi!" };
    java.lang.String str66 = commApplication63.commOnlySecond(str_array65);
    java.lang.String str67 = calApplication62.printCalForYear(str_array65);
    java.lang.String str68 = commApplication61.commOnlySecond(str_array65);
    java.util.List list69 = sortApplication48.sortAll(str_array65);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication70 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication71 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication72 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array74 = new java.lang.String[] { "" };
    java.lang.String str75 = calApplication72.printCalForYearMondayFirst(str_array74);
    java.util.List list76 = sortApplication71.sortCapitalNumbersSpecialChars(str_array74);
    java.util.List list77 = sortApplication70.sortSimpleSpecialChars(str_array74);
    java.util.List list78 = sortApplication48.numericalSortCapitalSpecialChars(str_array74);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication79 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication80 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication81 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array83 = new java.lang.String[] { "hi!" };
    java.lang.String str84 = commApplication81.commOnlySecond(str_array83);
    java.lang.String str85 = calApplication80.printCalForYear(str_array83);
    java.lang.String str86 = commApplication79.commOnlySecond(str_array83);
    java.util.List list87 = sortApplication48.sortAll(str_array83);
    java.lang.String str88 = calApplication47.printCalForYearMondayFirst(str_array83);
    java.lang.String str89 = bcApplication0.and(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str37.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str42.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str66.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str68.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str84.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str86.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str89);

  }

  @Test
  public void test295() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test295"); }


    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array2 = new java.lang.String[] { "hi!" };
    java.lang.String str3 = commApplication0.commOnlySecond(str_array2);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication4 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "hi!" };
    java.lang.String str9 = commApplication6.commOnlySecond(str_array8);
    java.lang.String str10 = calApplication5.printCalForYear(str_array8);
    java.lang.String str11 = commApplication4.commOnlySecond(str_array8);
    java.lang.String str12 = commApplication0.commOnlySecond(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication13 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "" };
    java.lang.String str17 = calApplication14.printCalForYearMondayFirst(str_array16);
    java.util.List list18 = sortApplication13.sortCapitalNumbersSpecialChars(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "hi!" };
    java.lang.String str23 = commApplication20.commOnlySecond(str_array22);
    java.lang.String str24 = calApplication19.printCalForYear(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "hi!" };
    java.lang.String str28 = commApplication25.commOnlySecond(str_array27);
    java.lang.String str29 = calApplication19.printCalForYear(str_array27);
    java.util.List list30 = sortApplication13.sortNumbersSpecialChars(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "hi!" };
    java.lang.String str35 = commApplication32.commOnlySecond(str_array34);
    java.lang.String str36 = calApplication31.printCalForYear(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "hi!" };
    java.lang.String str40 = commApplication37.commOnlySecond(str_array39);
    java.lang.String str41 = calApplication31.printCalForYear(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication42 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication43 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = calApplication44.printCalForYearMondayFirst(str_array46);
    java.util.List list48 = sortApplication43.sortCapitalNumbersSpecialChars(str_array46);
    java.util.List list49 = sortApplication42.sortSimpleSpecialChars(str_array46);
    java.lang.String str50 = calApplication31.printCal(str_array46);
    java.util.List list51 = sortApplication13.sortStringsSimple(str_array46);
    java.lang.String str52 = commApplication0.commOnlyFirst(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication53 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication54 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "" };
    java.lang.String str58 = calApplication55.printCalForYearMondayFirst(str_array57);
    java.util.List list59 = sortApplication54.sortCapitalNumbersSpecialChars(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication60 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array63 = new java.lang.String[] { "" };
    java.lang.String str64 = calApplication61.printCalForYearMondayFirst(str_array63);
    java.util.List list65 = sortApplication60.sortCapitalNumbersSpecialChars(str_array63);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication66 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication67 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array69 = new java.lang.String[] { "hi!" };
    java.lang.String str70 = commApplication67.commOnlySecond(str_array69);
    java.lang.String str71 = calApplication66.printCalForYear(str_array69);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication72 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array74 = new java.lang.String[] { "hi!" };
    java.lang.String str75 = commApplication72.commOnlySecond(str_array74);
    java.lang.String str76 = calApplication66.printCalForYear(str_array74);
    java.util.List list77 = sortApplication60.sortNumbersSpecialChars(str_array74);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication78 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication79 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array81 = new java.lang.String[] { "" };
    java.lang.String str82 = calApplication79.printCalForYearMondayFirst(str_array81);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication83 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array85 = new java.lang.String[] { "" };
    java.lang.String str86 = calApplication83.printCalForYearMondayFirst(str_array85);
    java.lang.String str87 = calApplication79.printCal(str_array85);
    java.lang.String str88 = calApplication78.printCal(str_array85);
    java.util.List list89 = sortApplication60.numericalSortCapitalNumbersSpecialChars(str_array85);
    java.util.List list90 = sortApplication54.numericalSortCapitalNumbersSpecialChars(str_array85);
    java.lang.String[] str_array92 = new java.lang.String[] { "comm: terminated with error message comm: file is not readable" };
    java.util.List list93 = sortApplication54.numericalSortAll(str_array92);
    java.lang.String str94 = bcApplication53.bracket(str_array92);
    java.lang.String str95 = commApplication0.commOnlySecond(str_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str3.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str9.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str23.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str28.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str35.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str40.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str52.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str70.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str75.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str95 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str95.equals("comm: terminated with error message comm: file is not readable"));

  }

  @Test
  public void test296() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test296"); }


    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array2 = new java.lang.String[] { "hi!" };
    java.lang.String str3 = commApplication0.commOnlySecond(str_array2);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication4 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array7 = new java.lang.String[] { "" };
    java.lang.String str8 = calApplication5.printCalForYearMondayFirst(str_array7);
    java.util.List list9 = sortApplication4.sortCapitalNumbersSpecialChars(str_array7);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication10 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array13 = new java.lang.String[] { "" };
    java.lang.String str14 = calApplication11.printCalForYearMondayFirst(str_array13);
    java.util.List list15 = sortApplication10.sortCapitalNumbersSpecialChars(str_array13);
    java.util.List list16 = sortApplication4.numericalSortSimpleSpecialChars(str_array13);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "hi!" };
    java.lang.String str22 = commApplication19.commOnlySecond(str_array21);
    java.lang.String str23 = calApplication18.printCalForYear(str_array21);
    java.lang.String str24 = commApplication17.commOnlySecond(str_array21);
    java.util.List list25 = sortApplication4.sortAll(str_array21);
    java.lang.String str26 = commApplication0.commOnlyFirst(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication27 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication28 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array31 = new java.lang.String[] { "" };
    java.lang.String str32 = calApplication29.printCalForYearMondayFirst(str_array31);
    java.util.List list33 = sortApplication28.sortCapitalNumbersSpecialChars(str_array31);
    java.util.List list34 = sortApplication27.sortSimpleSpecialChars(str_array31);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication35 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array38 = new java.lang.String[] { "hi!" };
    java.lang.String str39 = commApplication36.commOnlySecond(str_array38);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array44 = new java.lang.String[] { "hi!" };
    java.lang.String str45 = commApplication42.commOnlySecond(str_array44);
    java.lang.String str46 = calApplication41.printCalForYear(str_array44);
    java.lang.String str47 = commApplication40.commOnlySecond(str_array44);
    java.lang.String str48 = commApplication36.commOnlySecond(str_array44);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication49 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication50 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array53 = new java.lang.String[] { "" };
    java.lang.String str54 = calApplication51.printCalForYearMondayFirst(str_array53);
    java.util.List list55 = sortApplication50.sortCapitalNumbersSpecialChars(str_array53);
    java.util.List list56 = sortApplication49.sortSimpleSpecialChars(str_array53);
    java.lang.String str57 = commApplication36.commAllMatches(str_array53);
    java.lang.String str58 = bcApplication35.lessThan(str_array53);
    java.util.List list59 = sortApplication27.sortSimpleCapital(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array62 = new java.lang.String[] { "hi!" };
    java.lang.String str63 = commApplication60.commOnlySecond(str_array62);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication65 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication66 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array68 = new java.lang.String[] { "hi!" };
    java.lang.String str69 = commApplication66.commOnlySecond(str_array68);
    java.lang.String str70 = calApplication65.printCalForYear(str_array68);
    java.lang.String str71 = commApplication64.commOnlySecond(str_array68);
    java.lang.String str72 = commApplication60.commOnlySecond(str_array68);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication73 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication74 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array76 = new java.lang.String[] { "" };
    java.lang.String str77 = calApplication74.printCalForYearMondayFirst(str_array76);
    java.util.List list78 = sortApplication73.sortCapitalNumbersSpecialChars(str_array76);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication79 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication80 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array82 = new java.lang.String[] { "hi!" };
    java.lang.String str83 = commApplication80.commOnlySecond(str_array82);
    java.lang.String str84 = calApplication79.printCalForYear(str_array82);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication85 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array87 = new java.lang.String[] { "hi!" };
    java.lang.String str88 = commApplication85.commOnlySecond(str_array87);
    java.lang.String str89 = calApplication79.printCalForYear(str_array87);
    java.util.List list90 = sortApplication73.sortNumbersSpecialChars(str_array87);
    java.lang.String str91 = commApplication60.commBothMathches(str_array87);
    java.util.List list92 = sortApplication27.numericalSortStringsSimple(str_array87);
    java.io.InputStream inputStream93 = null;
    java.io.OutputStream outputStream94 = null;
    // The following exception was thrown during execution in test generation
    try {
      commApplication0.run(str_array87, inputStream93, outputStream94);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CommException");
    } catch (sg.edu.nus.comp.cs4218.exception.CommException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.CommException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CommException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str3.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str22.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str24.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str26.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str45.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str47.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str48.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str57.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str63.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str69.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str71.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str72.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str83.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str88.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str91 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str91.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list92);

  }

  @Test
  public void test297() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test297"); }


    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array5 = new java.lang.String[] { "hi!" };
    java.lang.String str6 = commApplication3.commOnlySecond(str_array5);
    java.lang.String str7 = calApplication2.printCalForYear(str_array5);
    java.lang.String str8 = commApplication1.commOnlySecond(str_array5);
    java.lang.String str9 = commApplication0.commBothMathches(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication10 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array13 = new java.lang.String[] { "" };
    java.lang.String str14 = calApplication11.printCalForYearMondayFirst(str_array13);
    java.util.List list15 = sortApplication10.sortCapitalNumbersSpecialChars(str_array13);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication16 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "" };
    java.lang.String str20 = calApplication17.printCalForYearMondayFirst(str_array19);
    java.util.List list21 = sortApplication16.sortCapitalNumbersSpecialChars(str_array19);
    java.util.List list22 = sortApplication10.numericalSortSimpleSpecialChars(str_array19);
    java.lang.String[] str_array24 = new java.lang.String[] { "" };
    java.util.List list25 = sortApplication10.sortSimpleCapitalSpecialChars(str_array24);
    java.lang.String str26 = commApplication0.commBothMathches(str_array24);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array30 = new java.lang.String[] { "hi!" };
    java.lang.String str31 = commApplication28.commOnlySecond(str_array30);
    java.lang.String str32 = calApplication27.printCalForYear(str_array30);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "" };
    java.lang.String str36 = calApplication33.printCalForYearMondayFirst(str_array35);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "hi!" };
    java.lang.String str40 = commApplication37.commOnlySecond(str_array39);
    java.lang.String str41 = calApplication33.printCalWithMondayFirst(str_array39);
    java.lang.String str42 = calApplication27.printCalWithMondayFirst(str_array39);
    java.lang.String str43 = commApplication0.commBothMathches(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "hi!" };
    java.lang.String str47 = commApplication44.commOnlySecond(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication48 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array51 = new java.lang.String[] { "hi!" };
    java.lang.String str52 = commApplication49.commOnlySecond(str_array51);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "hi!" };
    java.lang.String str58 = commApplication55.commOnlySecond(str_array57);
    java.lang.String str59 = calApplication54.printCalForYear(str_array57);
    java.lang.String str60 = commApplication53.commOnlySecond(str_array57);
    java.lang.String str61 = commApplication49.commOnlySecond(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication62 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication63 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array66 = new java.lang.String[] { "" };
    java.lang.String str67 = calApplication64.printCalForYearMondayFirst(str_array66);
    java.util.List list68 = sortApplication63.sortCapitalNumbersSpecialChars(str_array66);
    java.util.List list69 = sortApplication62.sortSimpleSpecialChars(str_array66);
    java.lang.String str70 = commApplication49.commAllMatches(str_array66);
    java.lang.String str71 = bcApplication48.lessThan(str_array66);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication72 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication73 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array75 = new java.lang.String[] { "" };
    java.lang.String str76 = calApplication73.printCalForYearMondayFirst(str_array75);
    java.util.List list77 = sortApplication72.sortCapitalNumbersSpecialChars(str_array75);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication78 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication79 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array81 = new java.lang.String[] { "hi!" };
    java.lang.String str82 = commApplication79.commOnlySecond(str_array81);
    java.lang.String str83 = calApplication78.printCalForYear(str_array81);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication84 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array86 = new java.lang.String[] { "hi!" };
    java.lang.String str87 = commApplication84.commOnlySecond(str_array86);
    java.lang.String str88 = calApplication78.printCalForYear(str_array86);
    java.util.List list89 = sortApplication72.sortNumbersSpecialChars(str_array86);
    java.lang.String str90 = bcApplication48.negate(str_array86);
    java.lang.String str91 = commApplication44.commOnlyFirst(str_array86);
    java.lang.String str92 = commApplication0.commOnlyFirst(str_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str6.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str8.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str9.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str26.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str31.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str40.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str43.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str47.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str52.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str58.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str60.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str61.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str70.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str82.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str87.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str91 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str91.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str92 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str92.equals("comm: terminated with error message comm: file is not readable"));

  }

  @Test
  public void test298() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test298"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication2 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = calApplication3.printCalForYearMondayFirst(str_array5);
    java.util.List list7 = sortApplication2.sortCapitalNumbersSpecialChars(str_array5);
    java.util.List list8 = sortApplication1.sortSimpleSpecialChars(str_array5);
    java.lang.String str9 = bcApplication0.lessThan(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication10 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array13 = new java.lang.String[] { "hi!" };
    java.lang.String str14 = commApplication11.commOnlySecond(str_array13);
    java.util.List list15 = sortApplication10.sortSimpleCapitalSpecialChars(str_array13);
    java.lang.String str16 = bcApplication0.subtract(str_array13);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication17 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array20 = new java.lang.String[] { "" };
    java.lang.String str21 = calApplication18.printCalForYearMondayFirst(str_array20);
    java.util.List list22 = sortApplication17.sortCapitalNumbersSpecialChars(str_array20);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = calApplication24.printCalForYearMondayFirst(str_array26);
    java.util.List list28 = sortApplication23.sortCapitalNumbersSpecialChars(str_array26);
    java.util.List list29 = sortApplication17.numericalSortSimpleSpecialChars(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "hi!" };
    java.lang.String str35 = commApplication32.commOnlySecond(str_array34);
    java.lang.String str36 = calApplication31.printCalForYear(str_array34);
    java.lang.String str37 = commApplication30.commOnlySecond(str_array34);
    java.util.List list38 = sortApplication17.sortAll(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication39 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication40 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "" };
    java.lang.String str44 = calApplication41.printCalForYearMondayFirst(str_array43);
    java.util.List list45 = sortApplication40.sortCapitalNumbersSpecialChars(str_array43);
    java.util.List list46 = sortApplication39.sortSimpleSpecialChars(str_array43);
    java.util.List list47 = sortApplication17.numericalSortCapitalSpecialChars(str_array43);
    java.lang.String str48 = bcApplication0.greaterThanOrEqual(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str14.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str35.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str37.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);

  }

  @Test
  public void test299() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test299"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = calApplication8.printCalForYearMondayFirst(str_array10);
    java.util.List list12 = sortApplication7.sortCapitalNumbersSpecialChars(str_array10);
    java.util.List list13 = sortApplication1.numericalSortSimpleSpecialChars(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "hi!" };
    java.lang.String str19 = commApplication16.commOnlySecond(str_array18);
    java.lang.String str20 = calApplication15.printCalForYear(str_array18);
    java.lang.String str21 = commApplication14.commOnlySecond(str_array18);
    java.util.List list22 = sortApplication1.sortAll(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication24 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = calApplication25.printCalForYearMondayFirst(str_array27);
    java.util.List list29 = sortApplication24.sortCapitalNumbersSpecialChars(str_array27);
    java.util.List list30 = sortApplication23.sortSimpleSpecialChars(str_array27);
    java.util.List list31 = sortApplication1.numericalSortCapitalSpecialChars(str_array27);
    java.lang.String str32 = bcApplication0.subtract(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication33 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "" };
    java.lang.String str37 = calApplication34.printCalForYearMondayFirst(str_array36);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "hi!" };
    java.lang.String str41 = commApplication38.commOnlySecond(str_array40);
    java.lang.String str42 = calApplication34.printCalWithMondayFirst(str_array40);
    java.util.List list43 = sortApplication33.sortCapitalNumbers(str_array40);
    java.lang.String str44 = bcApplication0.negate(str_array40);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array47 = new java.lang.String[] { "" };
    java.lang.String str48 = calApplication45.printCalForYearMondayFirst(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array51 = new java.lang.String[] { "" };
    java.lang.String str52 = calApplication49.printCalForYearMondayFirst(str_array51);
    java.lang.String str53 = calApplication45.printCal(str_array51);
    java.lang.String str54 = bcApplication0.and(str_array51);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication55 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array58 = new java.lang.String[] { "" };
    java.lang.String str59 = calApplication56.printCalForYearMondayFirst(str_array58);
    java.util.List list60 = sortApplication55.sortCapitalNumbersSpecialChars(str_array58);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication61 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array64 = new java.lang.String[] { "" };
    java.lang.String str65 = calApplication62.printCalForYearMondayFirst(str_array64);
    java.util.List list66 = sortApplication61.sortCapitalNumbersSpecialChars(str_array64);
    java.util.List list67 = sortApplication55.numericalSortSimpleSpecialChars(str_array64);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication69 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array71 = new java.lang.String[] { "hi!" };
    java.lang.String str72 = commApplication69.commOnlySecond(str_array71);
    java.lang.String str73 = calApplication68.printCalForYear(str_array71);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication74 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array76 = new java.lang.String[] { "" };
    java.lang.String str77 = calApplication74.printCalForYearMondayFirst(str_array76);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication78 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array80 = new java.lang.String[] { "hi!" };
    java.lang.String str81 = commApplication78.commOnlySecond(str_array80);
    java.lang.String str82 = calApplication74.printCalWithMondayFirst(str_array80);
    java.lang.String str83 = calApplication68.printCalWithMondayFirst(str_array80);
    java.util.List list84 = sortApplication55.numericalSortStringsSimple(str_array80);
    java.lang.String str85 = bcApplication0.notEqual(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str41.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str72.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str81.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str85);

  }

  @Test
  public void test300() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test300"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = calApplication8.printCalForYearMondayFirst(str_array10);
    java.util.List list12 = sortApplication7.sortCapitalNumbersSpecialChars(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "hi!" };
    java.lang.String str17 = commApplication14.commOnlySecond(str_array16);
    java.lang.String str18 = calApplication13.printCalForYear(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "hi!" };
    java.lang.String str22 = commApplication19.commOnlySecond(str_array21);
    java.lang.String str23 = calApplication13.printCalForYear(str_array21);
    java.util.List list24 = sortApplication7.sortNumbersSpecialChars(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "" };
    java.lang.String str29 = calApplication26.printCalForYearMondayFirst(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "" };
    java.lang.String str33 = calApplication30.printCalForYearMondayFirst(str_array32);
    java.lang.String str34 = calApplication26.printCal(str_array32);
    java.lang.String str35 = calApplication25.printCal(str_array32);
    java.util.List list36 = sortApplication7.numericalSortCapitalNumbersSpecialChars(str_array32);
    java.util.List list37 = sortApplication1.numericalSortCapitalNumbersSpecialChars(str_array32);
    java.lang.String[] str_array39 = new java.lang.String[] { "comm: terminated with error message comm: file is not readable" };
    java.util.List list40 = sortApplication1.numericalSortAll(str_array39);
    java.lang.String str41 = bcApplication0.bracket(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array44 = new java.lang.String[] { "hi!" };
    java.lang.String str45 = commApplication42.commOnlySecond(str_array44);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication46 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array49 = new java.lang.String[] { "" };
    java.lang.String str50 = calApplication47.printCalForYearMondayFirst(str_array49);
    java.util.List list51 = sortApplication46.sortCapitalNumbersSpecialChars(str_array49);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication52 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array55 = new java.lang.String[] { "" };
    java.lang.String str56 = calApplication53.printCalForYearMondayFirst(str_array55);
    java.util.List list57 = sortApplication52.sortCapitalNumbersSpecialChars(str_array55);
    java.util.List list58 = sortApplication46.numericalSortSimpleSpecialChars(str_array55);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication59 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array63 = new java.lang.String[] { "hi!" };
    java.lang.String str64 = commApplication61.commOnlySecond(str_array63);
    java.lang.String str65 = calApplication60.printCalForYear(str_array63);
    java.lang.String str66 = commApplication59.commOnlySecond(str_array63);
    java.util.List list67 = sortApplication46.sortAll(str_array63);
    java.lang.String str68 = commApplication42.commOnlyFirst(str_array63);
    java.lang.String str69 = bcApplication0.or(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str17.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str22.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str45.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str64.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str66.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str68.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str69);

  }

  @Test
  public void test301() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test301"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    java.util.List list12 = sortApplication0.numericalSortSimpleSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "hi!" };
    java.lang.String str17 = commApplication14.commOnlySecond(str_array16);
    java.lang.String str18 = calApplication13.printCalForYear(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = calApplication19.printCalForYearMondayFirst(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array25 = new java.lang.String[] { "hi!" };
    java.lang.String str26 = commApplication23.commOnlySecond(str_array25);
    java.lang.String str27 = calApplication19.printCalWithMondayFirst(str_array25);
    java.lang.String str28 = calApplication13.printCalWithMondayFirst(str_array25);
    java.util.List list29 = sortApplication0.numericalSortStringsSimple(str_array25);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication30 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "" };
    java.lang.String str34 = calApplication31.printCalForYearMondayFirst(str_array33);
    java.util.List list35 = sortApplication30.sortCapitalNumbersSpecialChars(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication36 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "" };
    java.lang.String str40 = calApplication37.printCalForYearMondayFirst(str_array39);
    java.util.List list41 = sortApplication36.sortCapitalNumbersSpecialChars(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array45 = new java.lang.String[] { "hi!" };
    java.lang.String str46 = commApplication43.commOnlySecond(str_array45);
    java.lang.String str47 = calApplication42.printCalForYear(str_array45);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array50 = new java.lang.String[] { "hi!" };
    java.lang.String str51 = commApplication48.commOnlySecond(str_array50);
    java.lang.String str52 = calApplication42.printCalForYear(str_array50);
    java.util.List list53 = sortApplication36.sortNumbersSpecialChars(str_array50);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "" };
    java.lang.String str58 = calApplication55.printCalForYearMondayFirst(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication59 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array61 = new java.lang.String[] { "" };
    java.lang.String str62 = calApplication59.printCalForYearMondayFirst(str_array61);
    java.lang.String str63 = calApplication55.printCal(str_array61);
    java.lang.String str64 = calApplication54.printCal(str_array61);
    java.util.List list65 = sortApplication36.numericalSortCapitalNumbersSpecialChars(str_array61);
    java.util.List list66 = sortApplication30.numericalSortCapitalNumbersSpecialChars(str_array61);
    java.lang.String[] str_array68 = new java.lang.String[] { "comm: terminated with error message comm: file is not readable" };
    java.util.List list69 = sortApplication30.numericalSortAll(str_array68);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication70 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication71 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication72 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array74 = new java.lang.String[] { "hi!" };
    java.lang.String str75 = commApplication72.commOnlySecond(str_array74);
    java.lang.String str76 = calApplication71.printCalForYear(str_array74);
    java.lang.String str77 = commApplication70.commOnlySecond(str_array74);
    java.lang.String[] str_array79 = new java.lang.String[] { "hi!" };
    java.lang.String str80 = commApplication70.commAllMatches(str_array79);
    java.util.List list81 = sortApplication30.sortSimpleCapitalSpecialChars(str_array79);
    java.util.List list82 = sortApplication0.sortStringsSimple(str_array79);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication83 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication84 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array86 = new java.lang.String[] { "" };
    java.lang.String str87 = calApplication84.printCalForYearMondayFirst(str_array86);
    java.util.List list88 = sortApplication83.sortCapitalNumbersSpecialChars(str_array86);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication89 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array91 = new java.lang.String[] { "" };
    java.lang.String str92 = calApplication89.printCalForYearMondayFirst(str_array91);
    java.util.List list93 = sortApplication83.numericalSortSimpleCapitalNumber(str_array91);
    java.util.List list94 = sortApplication0.numericalSortCapitalSpecialChars(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str17.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str26.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str46.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str51.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str75.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str77.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str80.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list94);

  }

  @Test
  public void test302() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test302"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array14 = new java.lang.String[] { "hi!" };
    java.lang.String str15 = commApplication12.commOnlySecond(str_array14);
    java.lang.String str16 = calApplication6.printCalForYear(str_array14);
    java.util.List list17 = sortApplication0.sortNumbersSpecialChars(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication18 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "hi!" };
    java.lang.String str22 = commApplication19.commOnlySecond(str_array21);
    java.util.List list23 = sortApplication18.sortSimpleCapitalSpecialChars(str_array21);
    java.util.List list24 = sortApplication0.sortSimpleNumbersSpecialChars(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication25 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!" };
    java.lang.String str29 = commApplication26.commOnlySecond(str_array28);
    java.util.List list30 = sortApplication25.sortSimpleCapitalSpecialChars(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "" };
    java.lang.String str34 = calApplication31.printCalForYearMondayFirst(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array37 = new java.lang.String[] { "hi!" };
    java.lang.String str38 = commApplication35.commOnlySecond(str_array37);
    java.lang.String str39 = calApplication31.printCalWithMondayFirst(str_array37);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication40 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "" };
    java.lang.String str44 = calApplication41.printCalForYearMondayFirst(str_array43);
    java.util.List list45 = sortApplication40.sortCapitalNumbersSpecialChars(str_array43);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication46 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array49 = new java.lang.String[] { "" };
    java.lang.String str50 = calApplication47.printCalForYearMondayFirst(str_array49);
    java.util.List list51 = sortApplication46.sortCapitalNumbersSpecialChars(str_array49);
    java.util.List list52 = sortApplication40.numericalSortSimpleSpecialChars(str_array49);
    java.lang.String str53 = calApplication31.printCalForYear(str_array49);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "hi!" };
    java.lang.String str58 = commApplication55.commOnlySecond(str_array57);
    java.lang.String str59 = calApplication54.printCalForYear(str_array57);
    java.lang.String str60 = calApplication31.printCalForYearMondayFirst(str_array57);
    java.util.List list61 = sortApplication25.sortCapitalNumbersSpecialChars(str_array57);
    java.util.List list62 = sortApplication0.numericalSortCapitalNumbersSpecialChars(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str15.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str22.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str38.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str58.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);

  }

  @Test
  public void test303() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test303"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    java.util.List list12 = sortApplication0.numericalSortSimpleSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!" };
    java.lang.String str18 = commApplication15.commOnlySecond(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    java.lang.String str20 = commApplication13.commOnlySecond(str_array17);
    java.util.List list21 = sortApplication0.sortAll(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication22 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = calApplication24.printCalForYearMondayFirst(str_array26);
    java.util.List list28 = sortApplication23.sortCapitalNumbersSpecialChars(str_array26);
    java.util.List list29 = sortApplication22.sortSimpleSpecialChars(str_array26);
    java.util.List list30 = sortApplication0.numericalSortCapitalSpecialChars(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication31 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "" };
    java.lang.String str35 = calApplication32.printCalForYearMondayFirst(str_array34);
    java.util.List list36 = sortApplication31.sortCapitalNumbersSpecialChars(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication37 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "" };
    java.lang.String str41 = calApplication38.printCalForYearMondayFirst(str_array40);
    java.util.List list42 = sortApplication37.sortCapitalNumbersSpecialChars(str_array40);
    java.util.List list43 = sortApplication31.sortAll(str_array40);
    java.util.List list44 = sortApplication0.sortSimpleCapital(str_array40);
    java.lang.String[] str_array45 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list46 = sortApplication0.numericalSortSimpleCapital(str_array45);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);

  }

  @Test
  public void test304() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test304"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array1 = null;
    java.lang.String str2 = calApplication0.printCalForMonthYear(str_array1);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication4 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!" };
    java.lang.String str7 = commApplication4.commOnlySecond(str_array6);
    java.lang.String str8 = calApplication3.printCalForYear(str_array6);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array11 = new java.lang.String[] { "" };
    java.lang.String str12 = calApplication9.printCalForYearMondayFirst(str_array11);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication9.printCalWithMondayFirst(str_array15);
    java.lang.String str18 = calApplication3.printCalWithMondayFirst(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = calApplication19.printCalForYearMondayFirst(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array25 = new java.lang.String[] { "" };
    java.lang.String str26 = calApplication23.printCalForYearMondayFirst(str_array25);
    java.lang.String str27 = calApplication19.printCal(str_array25);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array31 = new java.lang.String[] { "hi!" };
    java.lang.String str32 = commApplication29.commOnlySecond(str_array31);
    java.lang.String str33 = calApplication28.printCalForYear(str_array31);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "hi!" };
    java.lang.String str37 = commApplication34.commOnlySecond(str_array36);
    java.lang.String str38 = calApplication28.printCalForYear(str_array36);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication39 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication40 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "" };
    java.lang.String str44 = calApplication41.printCalForYearMondayFirst(str_array43);
    java.util.List list45 = sortApplication40.sortCapitalNumbersSpecialChars(str_array43);
    java.util.List list46 = sortApplication39.sortSimpleSpecialChars(str_array43);
    java.lang.String str47 = calApplication28.printCal(str_array43);
    java.lang.String str48 = calApplication19.printCalForMonthYear(str_array43);
    java.lang.String str49 = calApplication3.printCal(str_array43);
    java.io.InputStream inputStream50 = null;
    java.io.OutputStream outputStream51 = null;
    calApplication0.run(str_array43, inputStream50, outputStream51);
    java.lang.String[] str_array53 = null;
    java.lang.String str54 = calApplication0.printCalForMonthYear(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str7.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str32.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str37.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);

  }

  @Test
  public void test305() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test305"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    java.util.List list12 = sortApplication0.numericalSortSimpleSpecialChars(str_array9);
    java.lang.String[] str_array14 = new java.lang.String[] { "" };
    java.util.List list15 = sortApplication0.sortSimpleCapitalSpecialChars(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "" };
    java.lang.String str19 = calApplication16.printCalForYearMondayFirst(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = calApplication20.printCalForYearMondayFirst(str_array22);
    java.lang.String str24 = calApplication16.printCal(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!" };
    java.lang.String str29 = commApplication26.commOnlySecond(str_array28);
    java.lang.String str30 = calApplication25.printCalForYear(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "hi!" };
    java.lang.String str34 = commApplication31.commOnlySecond(str_array33);
    java.lang.String str35 = calApplication25.printCalForYear(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication36 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication37 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "" };
    java.lang.String str41 = calApplication38.printCalForYearMondayFirst(str_array40);
    java.util.List list42 = sortApplication37.sortCapitalNumbersSpecialChars(str_array40);
    java.util.List list43 = sortApplication36.sortSimpleSpecialChars(str_array40);
    java.lang.String str44 = calApplication25.printCal(str_array40);
    java.lang.String str45 = calApplication16.printCalForMonthYear(str_array40);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array48 = new java.lang.String[] { "hi!" };
    java.lang.String str49 = commApplication46.commOnlySecond(str_array48);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication50 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array53 = new java.lang.String[] { "hi!" };
    java.lang.String str54 = commApplication51.commOnlySecond(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array59 = new java.lang.String[] { "hi!" };
    java.lang.String str60 = commApplication57.commOnlySecond(str_array59);
    java.lang.String str61 = calApplication56.printCalForYear(str_array59);
    java.lang.String str62 = commApplication55.commOnlySecond(str_array59);
    java.lang.String str63 = commApplication51.commOnlySecond(str_array59);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication64 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication65 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication66 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array68 = new java.lang.String[] { "" };
    java.lang.String str69 = calApplication66.printCalForYearMondayFirst(str_array68);
    java.util.List list70 = sortApplication65.sortCapitalNumbersSpecialChars(str_array68);
    java.util.List list71 = sortApplication64.sortSimpleSpecialChars(str_array68);
    java.lang.String str72 = commApplication51.commAllMatches(str_array68);
    java.lang.String str73 = bcApplication50.lessThan(str_array68);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication74 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication75 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array77 = new java.lang.String[] { "" };
    java.lang.String str78 = calApplication75.printCalForYearMondayFirst(str_array77);
    java.util.List list79 = sortApplication74.sortCapitalNumbersSpecialChars(str_array77);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication80 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication81 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array83 = new java.lang.String[] { "hi!" };
    java.lang.String str84 = commApplication81.commOnlySecond(str_array83);
    java.lang.String str85 = calApplication80.printCalForYear(str_array83);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication86 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array88 = new java.lang.String[] { "hi!" };
    java.lang.String str89 = commApplication86.commOnlySecond(str_array88);
    java.lang.String str90 = calApplication80.printCalForYear(str_array88);
    java.util.List list91 = sortApplication74.sortNumbersSpecialChars(str_array88);
    java.lang.String str92 = bcApplication50.negate(str_array88);
    java.lang.String str93 = commApplication46.commOnlyFirst(str_array88);
    java.lang.String str94 = calApplication16.printCalForYear(str_array88);
    java.util.List list95 = sortApplication0.sortSimpleCapital(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str49.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str54.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str60.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str62.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str63.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str72.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str84.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str89.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str93 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str93.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list95);

  }

  @Test
  public void test306() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test306"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication7.printCalForYear(str_array15);
    java.util.List list18 = sortApplication1.sortNumbersSpecialChars(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "hi!" };
    java.lang.String str23 = commApplication20.commOnlySecond(str_array22);
    java.lang.String str24 = calApplication19.printCalForYear(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "hi!" };
    java.lang.String str28 = commApplication25.commOnlySecond(str_array27);
    java.lang.String str29 = calApplication19.printCalForYear(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication30 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication31 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "" };
    java.lang.String str35 = calApplication32.printCalForYearMondayFirst(str_array34);
    java.util.List list36 = sortApplication31.sortCapitalNumbersSpecialChars(str_array34);
    java.util.List list37 = sortApplication30.sortSimpleSpecialChars(str_array34);
    java.lang.String str38 = calApplication19.printCal(str_array34);
    java.util.List list39 = sortApplication1.sortStringsSimple(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication40 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "" };
    java.lang.String str44 = calApplication41.printCalForYearMondayFirst(str_array43);
    java.util.List list45 = sortApplication40.sortCapitalNumbersSpecialChars(str_array43);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array49 = new java.lang.String[] { "hi!" };
    java.lang.String str50 = commApplication47.commOnlySecond(str_array49);
    java.lang.String str51 = calApplication46.printCalForYear(str_array49);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array54 = new java.lang.String[] { "hi!" };
    java.lang.String str55 = commApplication52.commOnlySecond(str_array54);
    java.lang.String str56 = calApplication46.printCalForYear(str_array54);
    java.util.List list57 = sortApplication40.sortNumbersSpecialChars(str_array54);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication58 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication59 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array61 = new java.lang.String[] { "" };
    java.lang.String str62 = calApplication59.printCalForYearMondayFirst(str_array61);
    java.util.List list63 = sortApplication58.sortCapitalNumbersSpecialChars(str_array61);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication64 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication65 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array67 = new java.lang.String[] { "" };
    java.lang.String str68 = calApplication65.printCalForYearMondayFirst(str_array67);
    java.util.List list69 = sortApplication64.sortCapitalNumbersSpecialChars(str_array67);
    java.util.List list70 = sortApplication58.numericalSortSimpleSpecialChars(str_array67);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication71 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication72 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication73 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array75 = new java.lang.String[] { "hi!" };
    java.lang.String str76 = commApplication73.commOnlySecond(str_array75);
    java.lang.String str77 = calApplication72.printCalForYear(str_array75);
    java.lang.String str78 = commApplication71.commOnlySecond(str_array75);
    java.util.List list79 = sortApplication58.sortAll(str_array75);
    java.util.List list80 = sortApplication40.numericalSortNumbersSpecialChars(str_array75);
    java.util.List list81 = sortApplication1.numericalSortCapitalNumbers(str_array75);
    java.lang.String str82 = calApplication0.printCalForMonthYearMondayFirst(str_array75);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication83 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication84 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array86 = new java.lang.String[] { "hi!" };
    java.lang.String str87 = commApplication84.commOnlySecond(str_array86);
    java.lang.String str88 = calApplication83.printCalForYear(str_array86);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication89 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array91 = new java.lang.String[] { "" };
    java.lang.String str92 = calApplication89.printCalForYearMondayFirst(str_array91);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication93 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array95 = new java.lang.String[] { "hi!" };
    java.lang.String str96 = commApplication93.commOnlySecond(str_array95);
    java.lang.String str97 = calApplication89.printCalWithMondayFirst(str_array95);
    java.lang.String str98 = calApplication83.printCalWithMondayFirst(str_array95);
    java.lang.String str99 = calApplication0.printCalWithMondayFirst(str_array95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str23.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str28.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str50.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str55.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str76.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str78.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str87.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str96 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str96.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str99);

  }

  @Test
  public void test307() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test307"); }


    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array2 = new java.lang.String[] { "hi!" };
    java.lang.String str3 = commApplication0.commOnlySecond(str_array2);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication4 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array7 = new java.lang.String[] { "hi!" };
    java.lang.String str8 = commApplication5.commOnlySecond(str_array7);
    java.lang.String str9 = calApplication4.printCalForYear(str_array7);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array12 = new java.lang.String[] { "hi!" };
    java.lang.String str13 = commApplication10.commOnlySecond(str_array12);
    java.lang.String str14 = calApplication4.printCalForYear(str_array12);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication15 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication16 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "" };
    java.lang.String str20 = calApplication17.printCalForYearMondayFirst(str_array19);
    java.util.List list21 = sortApplication16.sortCapitalNumbersSpecialChars(str_array19);
    java.util.List list22 = sortApplication15.sortSimpleSpecialChars(str_array19);
    java.lang.String str23 = calApplication4.printCal(str_array19);
    java.lang.String str24 = commApplication0.commOnlySecond(str_array19);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!" };
    java.lang.String str29 = commApplication26.commOnlySecond(str_array28);
    java.lang.String str30 = calApplication25.printCalForYear(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "hi!" };
    java.lang.String str34 = commApplication31.commOnlySecond(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "hi!" };
    java.lang.String str40 = commApplication37.commOnlySecond(str_array39);
    java.lang.String str41 = calApplication36.printCalForYear(str_array39);
    java.lang.String str42 = commApplication35.commOnlySecond(str_array39);
    java.lang.String str43 = commApplication31.commOnlySecond(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication44 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array47 = new java.lang.String[] { "" };
    java.lang.String str48 = calApplication45.printCalForYearMondayFirst(str_array47);
    java.util.List list49 = sortApplication44.sortCapitalNumbersSpecialChars(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array53 = new java.lang.String[] { "hi!" };
    java.lang.String str54 = commApplication51.commOnlySecond(str_array53);
    java.lang.String str55 = calApplication50.printCalForYear(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array58 = new java.lang.String[] { "hi!" };
    java.lang.String str59 = commApplication56.commOnlySecond(str_array58);
    java.lang.String str60 = calApplication50.printCalForYear(str_array58);
    java.util.List list61 = sortApplication44.sortNumbersSpecialChars(str_array58);
    java.lang.String str62 = commApplication31.commBothMathches(str_array58);
    java.lang.String str63 = calApplication25.printCalForMonthYearMondayFirst(str_array58);
    java.lang.String str64 = commApplication0.commNoMatches(str_array58);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication65 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication66 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array68 = new java.lang.String[] { "" };
    java.lang.String str69 = calApplication66.printCalForYearMondayFirst(str_array68);
    java.util.List list70 = sortApplication65.sortCapitalNumbersSpecialChars(str_array68);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication71 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array73 = new java.lang.String[] { "" };
    java.lang.String str74 = calApplication71.printCalForYearMondayFirst(str_array73);
    java.util.List list75 = sortApplication65.numericalSortSimpleCapitalNumber(str_array73);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication76 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication77 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array79 = new java.lang.String[] { "" };
    java.lang.String str80 = calApplication77.printCalForYearMondayFirst(str_array79);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication81 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array83 = new java.lang.String[] { "hi!" };
    java.lang.String str84 = commApplication81.commOnlySecond(str_array83);
    java.lang.String str85 = calApplication77.printCalWithMondayFirst(str_array83);
    java.util.List list86 = sortApplication76.sortCapitalNumbers(str_array83);
    java.util.List list87 = sortApplication65.sortCapitalSpecialChars(str_array83);
    java.lang.String str88 = commApplication0.commOnlyFirst(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str3.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str8.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str24.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str40.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str42.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str43.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str54.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str59.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str62.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str64.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str84.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str88.equals("comm: terminated with error message comm: file is not readable"));

  }

  @Test
  public void test308() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test308"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    java.util.List list12 = sortApplication0.numericalSortSimpleSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication13 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication14 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "" };
    java.lang.String str18 = calApplication15.printCalForYearMondayFirst(str_array17);
    java.util.List list19 = sortApplication14.sortCapitalNumbersSpecialChars(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication20 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array23 = new java.lang.String[] { "" };
    java.lang.String str24 = calApplication21.printCalForYearMondayFirst(str_array23);
    java.util.List list25 = sortApplication20.sortCapitalNumbersSpecialChars(str_array23);
    java.util.List list26 = sortApplication14.numericalSortSimpleSpecialChars(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array31 = new java.lang.String[] { "hi!" };
    java.lang.String str32 = commApplication29.commOnlySecond(str_array31);
    java.lang.String str33 = calApplication28.printCalForYear(str_array31);
    java.lang.String str34 = commApplication27.commOnlySecond(str_array31);
    java.util.List list35 = sortApplication14.sortAll(str_array31);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication36 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication37 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "" };
    java.lang.String str41 = calApplication38.printCalForYearMondayFirst(str_array40);
    java.util.List list42 = sortApplication37.sortCapitalNumbersSpecialChars(str_array40);
    java.util.List list43 = sortApplication36.sortSimpleSpecialChars(str_array40);
    java.util.List list44 = sortApplication14.numericalSortCapitalSpecialChars(str_array40);
    java.lang.String str45 = bcApplication13.subtract(str_array40);
    java.util.List list46 = sortApplication0.numericalSortSimpleCapitalSpecialChars(str_array40);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication48 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array51 = new java.lang.String[] { "" };
    java.lang.String str52 = calApplication49.printCalForYearMondayFirst(str_array51);
    java.util.List list53 = sortApplication48.sortCapitalNumbersSpecialChars(str_array51);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "hi!" };
    java.lang.String str58 = commApplication55.commOnlySecond(str_array57);
    java.lang.String str59 = calApplication54.printCalForYear(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array62 = new java.lang.String[] { "hi!" };
    java.lang.String str63 = commApplication60.commOnlySecond(str_array62);
    java.lang.String str64 = calApplication54.printCalForYear(str_array62);
    java.util.List list65 = sortApplication48.sortNumbersSpecialChars(str_array62);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication66 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication67 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array70 = new java.lang.String[] { "" };
    java.lang.String str71 = calApplication68.printCalForYearMondayFirst(str_array70);
    java.util.List list72 = sortApplication67.sortCapitalNumbersSpecialChars(str_array70);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication73 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication74 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array76 = new java.lang.String[] { "hi!" };
    java.lang.String str77 = commApplication74.commOnlySecond(str_array76);
    java.lang.String str78 = calApplication73.printCalForYear(str_array76);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication79 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array81 = new java.lang.String[] { "hi!" };
    java.lang.String str82 = commApplication79.commOnlySecond(str_array81);
    java.lang.String str83 = calApplication73.printCalForYear(str_array81);
    java.util.List list84 = sortApplication67.sortNumbersSpecialChars(str_array81);
    java.lang.String str85 = bcApplication66.notEqual(str_array81);
    java.util.List list86 = sortApplication48.sortSimpleNumbers(str_array81);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication87 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array89 = new java.lang.String[] { "" };
    java.lang.String str90 = calApplication87.printCalForYearMondayFirst(str_array89);
    java.util.List list91 = sortApplication48.numericalSortCapitalNumbers(str_array89);
    java.lang.String str92 = calApplication47.printCal(str_array89);
    java.util.List list93 = sortApplication0.numericalSortNumbers(str_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str32.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str58.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str63.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str77.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str82.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list93);

  }

  @Test
  public void test309() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test309"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    java.util.List list12 = sortApplication0.numericalSortSimpleSpecialChars(str_array9);
    java.lang.String[] str_array14 = new java.lang.String[] { "" };
    java.util.List list15 = sortApplication0.sortSimpleCapitalSpecialChars(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication16 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "hi!" };
    java.lang.String str20 = commApplication17.commOnlySecond(str_array19);
    java.util.List list21 = sortApplication16.sortSimpleCapitalSpecialChars(str_array19);
    java.util.List list22 = sortApplication0.numericalSortSimpleCapitalSpecialChars(str_array19);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "hi!" };
    java.lang.String str27 = commApplication24.commOnlySecond(str_array26);
    java.lang.String str28 = calApplication23.printCalForYear(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication29 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "hi!" };
    java.lang.String str33 = commApplication30.commOnlySecond(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array38 = new java.lang.String[] { "hi!" };
    java.lang.String str39 = commApplication36.commOnlySecond(str_array38);
    java.lang.String str40 = calApplication35.printCalForYear(str_array38);
    java.lang.String str41 = commApplication34.commOnlySecond(str_array38);
    java.lang.String str42 = commApplication30.commOnlySecond(str_array38);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication43 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication44 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array47 = new java.lang.String[] { "" };
    java.lang.String str48 = calApplication45.printCalForYearMondayFirst(str_array47);
    java.util.List list49 = sortApplication44.sortCapitalNumbersSpecialChars(str_array47);
    java.util.List list50 = sortApplication43.sortSimpleSpecialChars(str_array47);
    java.lang.String str51 = commApplication30.commAllMatches(str_array47);
    java.lang.String str52 = bcApplication29.lessThan(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication53 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication54 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "" };
    java.lang.String str58 = calApplication55.printCalForYearMondayFirst(str_array57);
    java.util.List list59 = sortApplication54.sortCapitalNumbersSpecialChars(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication60 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array63 = new java.lang.String[] { "" };
    java.lang.String str64 = calApplication61.printCalForYearMondayFirst(str_array63);
    java.util.List list65 = sortApplication60.sortCapitalNumbersSpecialChars(str_array63);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication66 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication67 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array69 = new java.lang.String[] { "hi!" };
    java.lang.String str70 = commApplication67.commOnlySecond(str_array69);
    java.lang.String str71 = calApplication66.printCalForYear(str_array69);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication72 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array74 = new java.lang.String[] { "hi!" };
    java.lang.String str75 = commApplication72.commOnlySecond(str_array74);
    java.lang.String str76 = calApplication66.printCalForYear(str_array74);
    java.util.List list77 = sortApplication60.sortNumbersSpecialChars(str_array74);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication78 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication79 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array81 = new java.lang.String[] { "" };
    java.lang.String str82 = calApplication79.printCalForYearMondayFirst(str_array81);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication83 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array85 = new java.lang.String[] { "" };
    java.lang.String str86 = calApplication83.printCalForYearMondayFirst(str_array85);
    java.lang.String str87 = calApplication79.printCal(str_array85);
    java.lang.String str88 = calApplication78.printCal(str_array85);
    java.util.List list89 = sortApplication60.numericalSortCapitalNumbersSpecialChars(str_array85);
    java.util.List list90 = sortApplication54.numericalSortCapitalNumbersSpecialChars(str_array85);
    java.lang.String[] str_array92 = new java.lang.String[] { "comm: terminated with error message comm: file is not readable" };
    java.util.List list93 = sortApplication54.numericalSortAll(str_array92);
    java.lang.String str94 = bcApplication53.bracket(str_array92);
    java.lang.String str95 = bcApplication29.greaterThan(str_array92);
    java.lang.String str96 = calApplication23.printCalForYearMondayFirst(str_array92);
    java.util.List list97 = sortApplication0.sortSimpleSpecialChars(str_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str27.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str33.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str41.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str42.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str51.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str70.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str75.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list97);

  }

  @Test
  public void test310() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test310"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    java.util.List list12 = sortApplication0.numericalSortSimpleSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!" };
    java.lang.String str18 = commApplication15.commOnlySecond(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    java.lang.String str20 = commApplication13.commOnlySecond(str_array17);
    java.util.List list21 = sortApplication0.sortAll(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication22 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = calApplication24.printCalForYearMondayFirst(str_array26);
    java.util.List list28 = sortApplication23.sortCapitalNumbersSpecialChars(str_array26);
    java.util.List list29 = sortApplication22.sortSimpleSpecialChars(str_array26);
    java.util.List list30 = sortApplication0.numericalSortCapitalSpecialChars(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "hi!" };
    java.lang.String str36 = commApplication33.commOnlySecond(str_array35);
    java.lang.String str37 = calApplication32.printCalForYear(str_array35);
    java.lang.String str38 = commApplication31.commOnlySecond(str_array35);
    java.util.List list39 = sortApplication0.sortAll(str_array35);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array44 = new java.lang.String[] { "hi!" };
    java.lang.String str45 = commApplication42.commOnlySecond(str_array44);
    java.lang.String str46 = calApplication41.printCalForYear(str_array44);
    java.lang.String str47 = commApplication40.commOnlySecond(str_array44);
    java.lang.String[] str_array49 = new java.lang.String[] { "hi!" };
    java.lang.String str50 = commApplication40.commAllMatches(str_array49);
    java.util.List list51 = sortApplication0.sortStringsSimple(str_array49);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array55 = new java.lang.String[] { "hi!" };
    java.lang.String str56 = commApplication53.commOnlySecond(str_array55);
    java.lang.String str57 = calApplication52.printCalForYear(str_array55);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array60 = new java.lang.String[] { "hi!" };
    java.lang.String str61 = commApplication58.commOnlySecond(str_array60);
    java.lang.String str62 = calApplication52.printCalForYear(str_array60);
    java.util.List list63 = sortApplication0.numericalSortCapitalNumbersSpecialChars(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str36.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str38.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str45.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str47.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str50.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str56.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str61.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);

  }

  @Test
  public void test311() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test311"); }


    sg.edu.nus.comp.cs4218.impl.app.CatApplication catApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CatApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = calApplication8.printCalForYearMondayFirst(str_array10);
    java.util.List list12 = sortApplication7.sortCapitalNumbersSpecialChars(str_array10);
    java.util.List list13 = sortApplication1.numericalSortSimpleSpecialChars(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "hi!" };
    java.lang.String str19 = commApplication16.commOnlySecond(str_array18);
    java.lang.String str20 = calApplication15.printCalForYear(str_array18);
    java.lang.String str21 = commApplication14.commOnlySecond(str_array18);
    java.util.List list22 = sortApplication1.sortAll(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication24 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = calApplication25.printCalForYearMondayFirst(str_array27);
    java.util.List list29 = sortApplication24.sortCapitalNumbersSpecialChars(str_array27);
    java.util.List list30 = sortApplication23.sortSimpleSpecialChars(str_array27);
    java.util.List list31 = sortApplication1.numericalSortCapitalSpecialChars(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication32 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication33 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "" };
    java.lang.String str37 = calApplication34.printCalForYearMondayFirst(str_array36);
    java.util.List list38 = sortApplication33.sortCapitalNumbersSpecialChars(str_array36);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication39 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array42 = new java.lang.String[] { "" };
    java.lang.String str43 = calApplication40.printCalForYearMondayFirst(str_array42);
    java.util.List list44 = sortApplication39.sortCapitalNumbersSpecialChars(str_array42);
    java.util.List list45 = sortApplication33.numericalSortSimpleSpecialChars(str_array42);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array50 = new java.lang.String[] { "hi!" };
    java.lang.String str51 = commApplication48.commOnlySecond(str_array50);
    java.lang.String str52 = calApplication47.printCalForYear(str_array50);
    java.lang.String str53 = commApplication46.commOnlySecond(str_array50);
    java.util.List list54 = sortApplication33.sortAll(str_array50);
    java.util.List list55 = sortApplication32.sortSimpleCapitalSpecialChars(str_array50);
    java.util.List list56 = sortApplication1.numericalSortAll(str_array50);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array59 = new java.lang.String[] { "" };
    java.lang.String str60 = calApplication57.printCalForYearMondayFirst(str_array59);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array63 = new java.lang.String[] { "" };
    java.lang.String str64 = calApplication61.printCalForYearMondayFirst(str_array63);
    java.lang.String str65 = calApplication57.printCal(str_array63);
    java.util.List list66 = sortApplication1.sortSimpleCapitalSpecialChars(str_array63);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication67 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array70 = new java.lang.String[] { "" };
    java.lang.String str71 = calApplication68.printCalForYearMondayFirst(str_array70);
    java.util.List list72 = sortApplication67.sortCapitalNumbersSpecialChars(str_array70);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication73 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array75 = new java.lang.String[] { "" };
    java.lang.String str76 = calApplication73.printCalForYearMondayFirst(str_array75);
    java.util.List list77 = sortApplication67.numericalSortSimpleCapitalNumber(str_array75);
    java.util.List list78 = sortApplication1.numericalSortSimpleCapitalSpecialChars(str_array75);
    java.io.InputStream inputStream79 = null;
    java.io.OutputStream outputStream80 = null;
    // The following exception was thrown during execution in test generation
    try {
      catApplication0.run(str_array75, inputStream79, outputStream80);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CatException");
    } catch (sg.edu.nus.comp.cs4218.exception.CatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.CatException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CatException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str51.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str53.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);

  }

  @Test
  public void test312() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test312"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication12.printCalForYear(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!" };
    java.lang.String str21 = commApplication18.commOnlySecond(str_array20);
    java.lang.String str22 = calApplication12.printCalForYear(str_array20);
    java.util.List list23 = sortApplication6.sortNumbersSpecialChars(str_array20);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = calApplication25.printCalForYearMondayFirst(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array31 = new java.lang.String[] { "" };
    java.lang.String str32 = calApplication29.printCalForYearMondayFirst(str_array31);
    java.lang.String str33 = calApplication25.printCal(str_array31);
    java.lang.String str34 = calApplication24.printCal(str_array31);
    java.util.List list35 = sortApplication6.numericalSortCapitalNumbersSpecialChars(str_array31);
    java.util.List list36 = sortApplication0.numericalSortCapitalNumbersSpecialChars(str_array31);
    java.lang.String[] str_array38 = new java.lang.String[] { "comm: terminated with error message comm: file is not readable" };
    java.util.List list39 = sortApplication0.numericalSortAll(str_array38);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication40 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "" };
    java.lang.String str44 = calApplication41.printCalForYearMondayFirst(str_array43);
    java.util.List list45 = sortApplication40.sortCapitalNumbersSpecialChars(str_array43);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication46 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array49 = new java.lang.String[] { "" };
    java.lang.String str50 = calApplication47.printCalForYearMondayFirst(str_array49);
    java.util.List list51 = sortApplication46.sortCapitalNumbersSpecialChars(str_array49);
    java.util.List list52 = sortApplication40.numericalSortSimpleSpecialChars(str_array49);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "hi!" };
    java.lang.String str58 = commApplication55.commOnlySecond(str_array57);
    java.lang.String str59 = calApplication54.printCalForYear(str_array57);
    java.lang.String str60 = commApplication53.commOnlySecond(str_array57);
    java.util.List list61 = sortApplication40.sortAll(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication62 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication63 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array66 = new java.lang.String[] { "" };
    java.lang.String str67 = calApplication64.printCalForYearMondayFirst(str_array66);
    java.util.List list68 = sortApplication63.sortCapitalNumbersSpecialChars(str_array66);
    java.util.List list69 = sortApplication62.sortSimpleSpecialChars(str_array66);
    java.util.List list70 = sortApplication40.numericalSortCapitalSpecialChars(str_array66);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication71 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication72 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array74 = new java.lang.String[] { "" };
    java.lang.String str75 = calApplication72.printCalForYearMondayFirst(str_array74);
    java.util.List list76 = sortApplication71.sortCapitalNumbersSpecialChars(str_array74);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication77 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication78 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array80 = new java.lang.String[] { "" };
    java.lang.String str81 = calApplication78.printCalForYearMondayFirst(str_array80);
    java.util.List list82 = sortApplication77.sortCapitalNumbersSpecialChars(str_array80);
    java.util.List list83 = sortApplication71.sortAll(str_array80);
    java.util.List list84 = sortApplication40.sortSimpleCapital(str_array80);
    java.util.List list85 = sortApplication0.numericalSortSimpleNumbers(str_array80);
    java.lang.String[] str_array86 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list87 = sortApplication0.numericalSortCapitalNumbers(str_array86);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str58.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str60.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list85);

  }

  @Test
  public void test313() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test313"); }


    sg.edu.nus.comp.cs4218.impl.app.DateApplication dateApplication0 = new sg.edu.nus.comp.cs4218.impl.app.DateApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = calApplication8.printCalForYearMondayFirst(str_array10);
    java.util.List list12 = sortApplication7.sortCapitalNumbersSpecialChars(str_array10);
    java.util.List list13 = sortApplication1.numericalSortSimpleSpecialChars(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "hi!" };
    java.lang.String str19 = commApplication16.commOnlySecond(str_array18);
    java.lang.String str20 = calApplication15.printCalForYear(str_array18);
    java.lang.String str21 = commApplication14.commOnlySecond(str_array18);
    java.util.List list22 = sortApplication1.sortAll(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication24 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = calApplication25.printCalForYearMondayFirst(str_array27);
    java.util.List list29 = sortApplication24.sortCapitalNumbersSpecialChars(str_array27);
    java.util.List list30 = sortApplication23.sortSimpleSpecialChars(str_array27);
    java.util.List list31 = sortApplication1.numericalSortCapitalSpecialChars(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication32 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "hi!" };
    java.lang.String str36 = commApplication33.commOnlySecond(str_array35);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array41 = new java.lang.String[] { "hi!" };
    java.lang.String str42 = commApplication39.commOnlySecond(str_array41);
    java.lang.String str43 = calApplication38.printCalForYear(str_array41);
    java.lang.String str44 = commApplication37.commOnlySecond(str_array41);
    java.lang.String str45 = commApplication33.commOnlySecond(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication46 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array49 = new java.lang.String[] { "" };
    java.lang.String str50 = calApplication47.printCalForYearMondayFirst(str_array49);
    java.util.List list51 = sortApplication46.sortCapitalNumbersSpecialChars(str_array49);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array55 = new java.lang.String[] { "hi!" };
    java.lang.String str56 = commApplication53.commOnlySecond(str_array55);
    java.lang.String str57 = calApplication52.printCalForYear(str_array55);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array60 = new java.lang.String[] { "hi!" };
    java.lang.String str61 = commApplication58.commOnlySecond(str_array60);
    java.lang.String str62 = calApplication52.printCalForYear(str_array60);
    java.util.List list63 = sortApplication46.sortNumbersSpecialChars(str_array60);
    java.lang.String str64 = commApplication33.commBothMathches(str_array60);
    java.lang.String str65 = bcApplication32.add(str_array60);
    java.util.List list66 = sortApplication1.sortCapitalNumbers(str_array60);
    java.io.InputStream inputStream67 = null;
    java.io.OutputStream outputStream68 = null;
    // The following exception was thrown during execution in test generation
    try {
      dateApplication0.run(str_array60, inputStream67, outputStream68);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException");
    } catch (sg.edu.nus.comp.cs4218.exception.DateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.DateException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str36.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str42.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str44.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str45.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str56.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str61.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str64.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);

  }

  @Test
  public void test314() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test314"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = calApplication8.printCalForYearMondayFirst(str_array10);
    java.util.List list12 = sortApplication7.sortCapitalNumbersSpecialChars(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "hi!" };
    java.lang.String str17 = commApplication14.commOnlySecond(str_array16);
    java.lang.String str18 = calApplication13.printCalForYear(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "hi!" };
    java.lang.String str22 = commApplication19.commOnlySecond(str_array21);
    java.lang.String str23 = calApplication13.printCalForYear(str_array21);
    java.util.List list24 = sortApplication7.sortNumbersSpecialChars(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "" };
    java.lang.String str29 = calApplication26.printCalForYearMondayFirst(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "" };
    java.lang.String str33 = calApplication30.printCalForYearMondayFirst(str_array32);
    java.lang.String str34 = calApplication26.printCal(str_array32);
    java.lang.String str35 = calApplication25.printCal(str_array32);
    java.util.List list36 = sortApplication7.numericalSortCapitalNumbersSpecialChars(str_array32);
    java.util.List list37 = sortApplication1.numericalSortCapitalNumbersSpecialChars(str_array32);
    java.lang.String[] str_array39 = new java.lang.String[] { "comm: terminated with error message comm: file is not readable" };
    java.util.List list40 = sortApplication1.numericalSortAll(str_array39);
    java.lang.String str41 = bcApplication0.bracket(str_array39);
    java.lang.String[] str_array42 = null;
    java.lang.String str43 = bcApplication0.not(str_array42);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = calApplication44.printCalForYearMondayFirst(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array50 = new java.lang.String[] { "" };
    java.lang.String str51 = calApplication48.printCalForYearMondayFirst(str_array50);
    java.lang.String str52 = calApplication44.printCal(str_array50);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array56 = new java.lang.String[] { "hi!" };
    java.lang.String str57 = commApplication54.commOnlySecond(str_array56);
    java.lang.String str58 = calApplication53.printCalForYear(str_array56);
    java.lang.String str59 = calApplication44.printCalForYearMondayFirst(str_array56);
    java.lang.String str60 = bcApplication0.add(str_array56);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array63 = new java.lang.String[] { "" };
    java.lang.String str64 = calApplication61.printCalForYearMondayFirst(str_array63);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication65 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array67 = new java.lang.String[] { "" };
    java.lang.String str68 = calApplication65.printCalForYearMondayFirst(str_array67);
    java.lang.String str69 = calApplication61.printCal(str_array67);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication70 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication71 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array73 = new java.lang.String[] { "hi!" };
    java.lang.String str74 = commApplication71.commOnlySecond(str_array73);
    java.lang.String str75 = calApplication70.printCalForYear(str_array73);
    java.lang.String str76 = calApplication61.printCalForYearMondayFirst(str_array73);
    java.io.InputStream inputStream77 = null;
    java.io.OutputStream outputStream78 = null;
    bcApplication0.run(str_array73, inputStream77, outputStream78);
    java.lang.String[] str_array80 = null;
    java.lang.String str81 = bcApplication0.number(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str17.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str22.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str57.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str74.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str81);

  }

  @Test
  public void test315() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test315"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array2 = new java.lang.String[] { "" };
    java.lang.String str3 = calApplication0.printCalForYearMondayFirst(str_array2);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication4 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!" };
    java.lang.String str7 = commApplication4.commOnlySecond(str_array6);
    java.lang.String str8 = calApplication0.printCalWithMondayFirst(str_array6);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication9 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array12 = new java.lang.String[] { "" };
    java.lang.String str13 = calApplication10.printCalForYearMondayFirst(str_array12);
    java.util.List list14 = sortApplication9.sortCapitalNumbersSpecialChars(str_array12);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication15 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "" };
    java.lang.String str19 = calApplication16.printCalForYearMondayFirst(str_array18);
    java.util.List list20 = sortApplication15.sortCapitalNumbersSpecialChars(str_array18);
    java.util.List list21 = sortApplication9.numericalSortSimpleSpecialChars(str_array18);
    java.lang.String str22 = calApplication0.printCalForYear(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication25 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!" };
    java.lang.String str29 = commApplication26.commOnlySecond(str_array28);
    java.util.List list30 = sortApplication25.sortSimpleCapitalSpecialChars(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication31 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "" };
    java.lang.String str35 = calApplication32.printCalForYearMondayFirst(str_array34);
    java.util.List list36 = sortApplication31.sortCapitalNumbersSpecialChars(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "hi!" };
    java.lang.String str41 = commApplication38.commOnlySecond(str_array40);
    java.lang.String str42 = calApplication37.printCalForYear(str_array40);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array45 = new java.lang.String[] { "hi!" };
    java.lang.String str46 = commApplication43.commOnlySecond(str_array45);
    java.lang.String str47 = calApplication37.printCalForYear(str_array45);
    java.util.List list48 = sortApplication31.sortNumbersSpecialChars(str_array45);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array52 = new java.lang.String[] { "hi!" };
    java.lang.String str53 = commApplication50.commOnlySecond(str_array52);
    java.lang.String str54 = calApplication49.printCalForYear(str_array52);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "hi!" };
    java.lang.String str58 = commApplication55.commOnlySecond(str_array57);
    java.lang.String str59 = calApplication49.printCalForYear(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication60 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication61 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array64 = new java.lang.String[] { "" };
    java.lang.String str65 = calApplication62.printCalForYearMondayFirst(str_array64);
    java.util.List list66 = sortApplication61.sortCapitalNumbersSpecialChars(str_array64);
    java.util.List list67 = sortApplication60.sortSimpleSpecialChars(str_array64);
    java.lang.String str68 = calApplication49.printCal(str_array64);
    java.util.List list69 = sortApplication31.sortStringsSimple(str_array64);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication70 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication71 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array73 = new java.lang.String[] { "" };
    java.lang.String str74 = calApplication71.printCalForYearMondayFirst(str_array73);
    java.util.List list75 = sortApplication70.sortCapitalNumbersSpecialChars(str_array73);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication76 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication77 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array79 = new java.lang.String[] { "" };
    java.lang.String str80 = calApplication77.printCalForYearMondayFirst(str_array79);
    java.util.List list81 = sortApplication76.sortCapitalNumbersSpecialChars(str_array79);
    java.util.List list82 = sortApplication70.numericalSortSimpleSpecialChars(str_array79);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication83 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication84 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication85 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array87 = new java.lang.String[] { "hi!" };
    java.lang.String str88 = commApplication85.commOnlySecond(str_array87);
    java.lang.String str89 = calApplication84.printCalForYear(str_array87);
    java.lang.String str90 = commApplication83.commOnlySecond(str_array87);
    java.util.List list91 = sortApplication70.sortAll(str_array87);
    java.util.List list92 = sortApplication31.numericalSortSimpleNumbers(str_array87);
    java.util.List list93 = sortApplication25.numericalSortSimpleCapital(str_array87);
    java.lang.String str94 = commApplication24.commNoMatches(str_array87);
    java.lang.String str95 = commApplication23.commOnlySecond(str_array87);
    java.lang.String str96 = calApplication0.printCal(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str7.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str41.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str46.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str53.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str58.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str88.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str90.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str94 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str94.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str95 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str95.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str96);

  }

  @Test
  public void test316() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test316"); }


    sg.edu.nus.comp.cs4218.impl.app.FmtApplication fmtApplication0 = new sg.edu.nus.comp.cs4218.impl.app.FmtApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array5 = new java.lang.String[] { "hi!" };
    java.lang.String str6 = commApplication3.commOnlySecond(str_array5);
    java.lang.String str7 = calApplication2.printCalForYear(str_array5);
    java.lang.String str8 = commApplication1.commOnlySecond(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array11 = new java.lang.String[] { "hi!" };
    java.lang.String str12 = commApplication9.commOnlySecond(str_array11);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!" };
    java.lang.String str18 = commApplication15.commOnlySecond(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    java.lang.String str20 = commApplication13.commOnlySecond(str_array17);
    java.lang.String str21 = commApplication9.commOnlySecond(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication22 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array25 = new java.lang.String[] { "" };
    java.lang.String str26 = calApplication23.printCalForYearMondayFirst(str_array25);
    java.util.List list27 = sortApplication22.sortCapitalNumbersSpecialChars(str_array25);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array31 = new java.lang.String[] { "hi!" };
    java.lang.String str32 = commApplication29.commOnlySecond(str_array31);
    java.lang.String str33 = calApplication28.printCalForYear(str_array31);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "hi!" };
    java.lang.String str37 = commApplication34.commOnlySecond(str_array36);
    java.lang.String str38 = calApplication28.printCalForYear(str_array36);
    java.util.List list39 = sortApplication22.sortNumbersSpecialChars(str_array36);
    java.lang.String str40 = commApplication9.commBothMathches(str_array36);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array43 = new java.lang.String[] { "hi!" };
    java.lang.String str44 = commApplication41.commOnlySecond(str_array43);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array49 = new java.lang.String[] { "hi!" };
    java.lang.String str50 = commApplication47.commOnlySecond(str_array49);
    java.lang.String str51 = calApplication46.printCalForYear(str_array49);
    java.lang.String str52 = commApplication45.commOnlySecond(str_array49);
    java.lang.String str53 = commApplication41.commOnlySecond(str_array49);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication54 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication55 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array58 = new java.lang.String[] { "" };
    java.lang.String str59 = calApplication56.printCalForYearMondayFirst(str_array58);
    java.util.List list60 = sortApplication55.sortCapitalNumbersSpecialChars(str_array58);
    java.util.List list61 = sortApplication54.sortSimpleSpecialChars(str_array58);
    java.lang.String str62 = commApplication41.commAllMatches(str_array58);
    java.lang.String str63 = commApplication9.commNoMatches(str_array58);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication64 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication65 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array67 = new java.lang.String[] { "" };
    java.lang.String str68 = calApplication65.printCalForYearMondayFirst(str_array67);
    java.util.List list69 = sortApplication64.sortCapitalNumbersSpecialChars(str_array67);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication70 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication71 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array73 = new java.lang.String[] { "" };
    java.lang.String str74 = calApplication71.printCalForYearMondayFirst(str_array73);
    java.util.List list75 = sortApplication70.sortCapitalNumbersSpecialChars(str_array73);
    java.util.List list76 = sortApplication64.numericalSortSimpleSpecialChars(str_array73);
    java.lang.String[] str_array78 = new java.lang.String[] { "" };
    java.util.List list79 = sortApplication64.sortSimpleCapitalSpecialChars(str_array78);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication80 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication81 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array83 = new java.lang.String[] { "hi!" };
    java.lang.String str84 = commApplication81.commOnlySecond(str_array83);
    java.util.List list85 = sortApplication80.sortSimpleCapitalSpecialChars(str_array83);
    java.util.List list86 = sortApplication64.numericalSortSimpleCapitalSpecialChars(str_array83);
    java.lang.String str87 = commApplication9.commOnlySecond(str_array83);
    java.lang.String str88 = commApplication1.commNoMatches(str_array83);
    java.io.InputStream inputStream89 = null;
    java.io.OutputStream outputStream90 = null;
    // The following exception was thrown during execution in test generation
    try {
      fmtApplication0.run(str_array83, inputStream89, outputStream90);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.FmtException");
    } catch (sg.edu.nus.comp.cs4218.exception.FmtException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.FmtException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.FmtException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str6.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str8.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str32.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str37.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str40.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str44.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str50.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str52.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str53.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str62.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str63.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str84.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str87.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str88.equals("comm: terminated with error message comm: file is not readable"));

  }

  @Test
  public void test317() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test317"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    java.util.List list12 = sortApplication0.numericalSortSimpleSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!" };
    java.lang.String str18 = commApplication15.commOnlySecond(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    java.lang.String str20 = commApplication13.commOnlySecond(str_array17);
    java.util.List list21 = sortApplication0.sortAll(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication22 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = calApplication24.printCalForYearMondayFirst(str_array26);
    java.util.List list28 = sortApplication23.sortCapitalNumbersSpecialChars(str_array26);
    java.util.List list29 = sortApplication22.sortSimpleSpecialChars(str_array26);
    java.util.List list30 = sortApplication0.numericalSortCapitalSpecialChars(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication31 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "hi!" };
    java.lang.String str35 = commApplication32.commOnlySecond(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "hi!" };
    java.lang.String str41 = commApplication38.commOnlySecond(str_array40);
    java.lang.String str42 = calApplication37.printCalForYear(str_array40);
    java.lang.String str43 = commApplication36.commOnlySecond(str_array40);
    java.lang.String str44 = commApplication32.commOnlySecond(str_array40);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication45 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array48 = new java.lang.String[] { "" };
    java.lang.String str49 = calApplication46.printCalForYearMondayFirst(str_array48);
    java.util.List list50 = sortApplication45.sortCapitalNumbersSpecialChars(str_array48);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array54 = new java.lang.String[] { "hi!" };
    java.lang.String str55 = commApplication52.commOnlySecond(str_array54);
    java.lang.String str56 = calApplication51.printCalForYear(str_array54);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array59 = new java.lang.String[] { "hi!" };
    java.lang.String str60 = commApplication57.commOnlySecond(str_array59);
    java.lang.String str61 = calApplication51.printCalForYear(str_array59);
    java.util.List list62 = sortApplication45.sortNumbersSpecialChars(str_array59);
    java.lang.String str63 = commApplication32.commBothMathches(str_array59);
    java.lang.String str64 = bcApplication31.add(str_array59);
    java.util.List list65 = sortApplication0.sortCapitalNumbers(str_array59);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication66 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication67 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array70 = new java.lang.String[] { "hi!" };
    java.lang.String str71 = commApplication68.commOnlySecond(str_array70);
    java.lang.String str72 = calApplication67.printCalForYear(str_array70);
    java.lang.String str73 = commApplication66.commOnlySecond(str_array70);
    java.lang.String[] str_array75 = new java.lang.String[] { "hi!" };
    java.lang.String str76 = commApplication66.commAllMatches(str_array75);
    java.util.List list77 = sortApplication0.numericalSortCapitalNumbers(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str35.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str41.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str43.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str44.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str55.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str60.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str63.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str71.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str73.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str76.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);

  }

  @Test
  public void test318() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test318"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "" };
    java.lang.String str9 = calApplication6.printCalForYearMondayFirst(str_array8);
    java.lang.String str10 = calApplication2.printCal(str_array8);
    java.lang.String str11 = calApplication1.printCal(str_array8);
    java.lang.String str12 = bcApplication0.negate(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication13 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "hi!" };
    java.lang.String str17 = commApplication14.commOnlySecond(str_array16);
    java.util.List list18 = sortApplication13.sortSimpleCapitalSpecialChars(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = calApplication19.printCalForYearMondayFirst(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array25 = new java.lang.String[] { "hi!" };
    java.lang.String str26 = commApplication23.commOnlySecond(str_array25);
    java.lang.String str27 = calApplication19.printCalWithMondayFirst(str_array25);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication28 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array31 = new java.lang.String[] { "" };
    java.lang.String str32 = calApplication29.printCalForYearMondayFirst(str_array31);
    java.util.List list33 = sortApplication28.sortCapitalNumbersSpecialChars(str_array31);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication34 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array37 = new java.lang.String[] { "" };
    java.lang.String str38 = calApplication35.printCalForYearMondayFirst(str_array37);
    java.util.List list39 = sortApplication34.sortCapitalNumbersSpecialChars(str_array37);
    java.util.List list40 = sortApplication28.numericalSortSimpleSpecialChars(str_array37);
    java.lang.String str41 = calApplication19.printCalForYear(str_array37);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array45 = new java.lang.String[] { "hi!" };
    java.lang.String str46 = commApplication43.commOnlySecond(str_array45);
    java.lang.String str47 = calApplication42.printCalForYear(str_array45);
    java.lang.String str48 = calApplication19.printCalForYearMondayFirst(str_array45);
    java.util.List list49 = sortApplication13.sortCapitalNumbersSpecialChars(str_array45);
    java.lang.String str50 = bcApplication0.pow(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str17.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str26.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str46.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);

  }

  @Test
  public void test319() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test319"); }


    sg.edu.nus.comp.cs4218.impl.app.CatApplication catApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CatApplication();
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication1 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication2 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = calApplication3.printCalForYearMondayFirst(str_array5);
    java.util.List list7 = sortApplication2.sortCapitalNumbersSpecialChars(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array11 = new java.lang.String[] { "hi!" };
    java.lang.String str12 = commApplication9.commOnlySecond(str_array11);
    java.lang.String str13 = calApplication8.printCalForYear(str_array11);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "hi!" };
    java.lang.String str17 = commApplication14.commOnlySecond(str_array16);
    java.lang.String str18 = calApplication8.printCalForYear(str_array16);
    java.util.List list19 = sortApplication2.sortNumbersSpecialChars(str_array16);
    java.lang.String str20 = bcApplication1.notEqual(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array24 = new java.lang.String[] { "hi!" };
    java.lang.String str25 = commApplication22.commOnlySecond(str_array24);
    java.lang.String str26 = calApplication21.printCalForYear(str_array24);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array29 = new java.lang.String[] { "hi!" };
    java.lang.String str30 = commApplication27.commOnlySecond(str_array29);
    java.lang.String str31 = calApplication21.printCalForYear(str_array29);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication32 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication33 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "" };
    java.lang.String str37 = calApplication34.printCalForYearMondayFirst(str_array36);
    java.util.List list38 = sortApplication33.sortCapitalNumbersSpecialChars(str_array36);
    java.util.List list39 = sortApplication32.sortSimpleSpecialChars(str_array36);
    java.lang.String str40 = calApplication21.printCal(str_array36);
    java.lang.String str41 = bcApplication1.lessThanOrEqual(str_array36);
    java.lang.String[] str_array42 = null;
    java.lang.String str43 = bcApplication1.greaterThanOrEqual(str_array42);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication44 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array47 = new java.lang.String[] { "" };
    java.lang.String str48 = calApplication45.printCalForYearMondayFirst(str_array47);
    java.util.List list49 = sortApplication44.sortCapitalNumbersSpecialChars(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication50 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array53 = new java.lang.String[] { "" };
    java.lang.String str54 = calApplication51.printCalForYearMondayFirst(str_array53);
    java.util.List list55 = sortApplication50.sortCapitalNumbersSpecialChars(str_array53);
    java.util.List list56 = sortApplication44.numericalSortSimpleSpecialChars(str_array53);
    java.lang.String str57 = bcApplication1.subtract(str_array53);
    java.io.InputStream inputStream58 = null;
    java.io.OutputStream outputStream59 = null;
    // The following exception was thrown during execution in test generation
    try {
      catApplication0.run(str_array53, inputStream58, outputStream59);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CatException");
    } catch (sg.edu.nus.comp.cs4218.exception.CatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.CatException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CatException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str17.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str25.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str30.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str57);

  }

  @Test
  public void test320() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test320"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    java.util.List list12 = sortApplication0.numericalSortSimpleSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication13 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "" };
    java.lang.String str17 = calApplication14.printCalForYearMondayFirst(str_array16);
    java.util.List list18 = sortApplication13.sortCapitalNumbersSpecialChars(str_array16);
    java.util.List list19 = sortApplication0.numericalSortCapitalNumbersSpecialChars(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication20 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array23 = new java.lang.String[] { "hi!" };
    java.lang.String str24 = commApplication21.commOnlySecond(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array29 = new java.lang.String[] { "hi!" };
    java.lang.String str30 = commApplication27.commOnlySecond(str_array29);
    java.lang.String str31 = calApplication26.printCalForYear(str_array29);
    java.lang.String str32 = commApplication25.commOnlySecond(str_array29);
    java.lang.String str33 = commApplication21.commOnlySecond(str_array29);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication34 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication35 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array38 = new java.lang.String[] { "" };
    java.lang.String str39 = calApplication36.printCalForYearMondayFirst(str_array38);
    java.util.List list40 = sortApplication35.sortCapitalNumbersSpecialChars(str_array38);
    java.util.List list41 = sortApplication34.sortSimpleSpecialChars(str_array38);
    java.lang.String str42 = commApplication21.commAllMatches(str_array38);
    java.lang.String str43 = bcApplication20.lessThan(str_array38);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = calApplication44.printCalForYearMondayFirst(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array50 = new java.lang.String[] { "" };
    java.lang.String str51 = calApplication48.printCalForYearMondayFirst(str_array50);
    java.lang.String str52 = calApplication44.printCal(str_array50);
    java.lang.String str53 = bcApplication20.and(str_array50);
    java.util.List list54 = sortApplication0.numericalSortSimpleCapital(str_array50);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "hi!" };
    java.lang.String str58 = commApplication55.commOnlySecond(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication59 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array63 = new java.lang.String[] { "hi!" };
    java.lang.String str64 = commApplication61.commOnlySecond(str_array63);
    java.lang.String str65 = calApplication60.printCalForYear(str_array63);
    java.lang.String str66 = commApplication59.commOnlySecond(str_array63);
    java.lang.String str67 = commApplication55.commOnlySecond(str_array63);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication68 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication69 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication70 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array72 = new java.lang.String[] { "" };
    java.lang.String str73 = calApplication70.printCalForYearMondayFirst(str_array72);
    java.util.List list74 = sortApplication69.sortCapitalNumbersSpecialChars(str_array72);
    java.util.List list75 = sortApplication68.sortSimpleSpecialChars(str_array72);
    java.lang.String str76 = commApplication55.commAllMatches(str_array72);
    java.util.List list77 = sortApplication0.numericalSortSimpleCapitalNumber(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str24.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str30.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str32.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str33.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str42.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str58.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str64.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str66.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str67.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str76.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);

  }

  @Test
  public void test321() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test321"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    java.util.List list5 = sortApplication0.numericalSortNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication12.printCalForYear(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!" };
    java.lang.String str21 = commApplication18.commOnlySecond(str_array20);
    java.lang.String str22 = calApplication12.printCalForYear(str_array20);
    java.util.List list23 = sortApplication6.sortNumbersSpecialChars(str_array20);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication24 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = calApplication25.printCalForYearMondayFirst(str_array27);
    java.util.List list29 = sortApplication24.sortCapitalNumbersSpecialChars(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication30 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "" };
    java.lang.String str34 = calApplication31.printCalForYearMondayFirst(str_array33);
    java.util.List list35 = sortApplication30.sortCapitalNumbersSpecialChars(str_array33);
    java.util.List list36 = sortApplication24.numericalSortSimpleSpecialChars(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array41 = new java.lang.String[] { "hi!" };
    java.lang.String str42 = commApplication39.commOnlySecond(str_array41);
    java.lang.String str43 = calApplication38.printCalForYear(str_array41);
    java.lang.String str44 = commApplication37.commOnlySecond(str_array41);
    java.util.List list45 = sortApplication24.sortAll(str_array41);
    java.util.List list46 = sortApplication6.numericalSortNumbersSpecialChars(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication47 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array50 = new java.lang.String[] { "" };
    java.lang.String str51 = calApplication48.printCalForYearMondayFirst(str_array50);
    java.util.List list52 = sortApplication47.sortCapitalNumbersSpecialChars(str_array50);
    java.util.List list53 = sortApplication6.numericalSortSimpleCapitalSpecialChars(str_array50);
    java.util.List list54 = sortApplication0.sortNumbers(str_array50);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array60 = new java.lang.String[] { "hi!" };
    java.lang.String str61 = commApplication58.commOnlySecond(str_array60);
    java.lang.String str62 = calApplication57.printCalForYear(str_array60);
    java.lang.String str63 = commApplication56.commOnlySecond(str_array60);
    java.lang.String str64 = commApplication55.commBothMathches(str_array60);
    java.util.List list65 = sortApplication0.sortSimpleCapitalNumber(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str42.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str44.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str61.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str63.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str64.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);

  }

  @Test
  public void test322() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test322"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    java.util.List list7 = sortApplication0.sortSimpleSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array11 = new java.lang.String[] { "hi!" };
    java.lang.String str12 = commApplication9.commOnlySecond(str_array11);
    java.lang.String str13 = calApplication8.printCalForYear(str_array11);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "" };
    java.lang.String str17 = calApplication14.printCalForYearMondayFirst(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!" };
    java.lang.String str21 = commApplication18.commOnlySecond(str_array20);
    java.lang.String str22 = calApplication14.printCalWithMondayFirst(str_array20);
    java.lang.String str23 = calApplication8.printCalWithMondayFirst(str_array20);
    java.util.List list24 = sortApplication0.numericalSortSimpleSpecialChars(str_array20);
    java.lang.String[] str_array25 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list26 = sortApplication0.sortNumbers(str_array25);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);

  }

  @Test
  public void test323() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test323"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    java.lang.String str12 = commApplication5.commOnlySecond(str_array9);
    java.lang.String str13 = commApplication1.commOnlySecond(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication14 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication15 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "" };
    java.lang.String str19 = calApplication16.printCalForYearMondayFirst(str_array18);
    java.util.List list20 = sortApplication15.sortCapitalNumbersSpecialChars(str_array18);
    java.util.List list21 = sortApplication14.sortSimpleSpecialChars(str_array18);
    java.lang.String str22 = commApplication1.commAllMatches(str_array18);
    java.lang.String str23 = bcApplication0.lessThan(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication24 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = calApplication25.printCalForYearMondayFirst(str_array27);
    java.util.List list29 = sortApplication24.sortCapitalNumbersSpecialChars(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "hi!" };
    java.lang.String str34 = commApplication31.commOnlySecond(str_array33);
    java.lang.String str35 = calApplication30.printCalForYear(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array38 = new java.lang.String[] { "hi!" };
    java.lang.String str39 = commApplication36.commOnlySecond(str_array38);
    java.lang.String str40 = calApplication30.printCalForYear(str_array38);
    java.util.List list41 = sortApplication24.sortNumbersSpecialChars(str_array38);
    java.lang.String str42 = bcApplication0.negate(str_array38);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication43 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication44 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication45 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array48 = new java.lang.String[] { "" };
    java.lang.String str49 = calApplication46.printCalForYearMondayFirst(str_array48);
    java.util.List list50 = sortApplication45.sortCapitalNumbersSpecialChars(str_array48);
    java.util.List list51 = sortApplication44.sortSimpleSpecialChars(str_array48);
    java.lang.String str52 = bcApplication43.lessThan(str_array48);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication53 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array56 = new java.lang.String[] { "hi!" };
    java.lang.String str57 = commApplication54.commOnlySecond(str_array56);
    java.util.List list58 = sortApplication53.sortSimpleCapitalSpecialChars(str_array56);
    java.lang.String str59 = bcApplication43.subtract(str_array56);
    java.lang.String str60 = bcApplication0.multiply(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str22.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str34.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str39.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str57.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);

  }

  @Test
  public void test324() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test324"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    java.util.List list12 = sortApplication0.sortAll(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication13 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "" };
    java.lang.String str18 = calApplication15.printCalForYearMondayFirst(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = calApplication19.printCalForYearMondayFirst(str_array21);
    java.lang.String str23 = calApplication15.printCal(str_array21);
    java.lang.String str24 = calApplication14.printCal(str_array21);
    java.lang.String str25 = bcApplication13.negate(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication26 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array29 = new java.lang.String[] { "hi!" };
    java.lang.String str30 = commApplication27.commOnlySecond(str_array29);
    java.util.List list31 = sortApplication26.sortSimpleCapitalSpecialChars(str_array29);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication32 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "" };
    java.lang.String str36 = calApplication33.printCalForYearMondayFirst(str_array35);
    java.util.List list37 = sortApplication32.sortCapitalNumbersSpecialChars(str_array35);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array41 = new java.lang.String[] { "hi!" };
    java.lang.String str42 = commApplication39.commOnlySecond(str_array41);
    java.lang.String str43 = calApplication38.printCalForYear(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "hi!" };
    java.lang.String str47 = commApplication44.commOnlySecond(str_array46);
    java.lang.String str48 = calApplication38.printCalForYear(str_array46);
    java.util.List list49 = sortApplication32.sortNumbersSpecialChars(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array53 = new java.lang.String[] { "hi!" };
    java.lang.String str54 = commApplication51.commOnlySecond(str_array53);
    java.lang.String str55 = calApplication50.printCalForYear(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array58 = new java.lang.String[] { "hi!" };
    java.lang.String str59 = commApplication56.commOnlySecond(str_array58);
    java.lang.String str60 = calApplication50.printCalForYear(str_array58);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication61 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication62 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication63 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array65 = new java.lang.String[] { "" };
    java.lang.String str66 = calApplication63.printCalForYearMondayFirst(str_array65);
    java.util.List list67 = sortApplication62.sortCapitalNumbersSpecialChars(str_array65);
    java.util.List list68 = sortApplication61.sortSimpleSpecialChars(str_array65);
    java.lang.String str69 = calApplication50.printCal(str_array65);
    java.util.List list70 = sortApplication32.sortStringsSimple(str_array65);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication71 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication72 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array74 = new java.lang.String[] { "" };
    java.lang.String str75 = calApplication72.printCalForYearMondayFirst(str_array74);
    java.util.List list76 = sortApplication71.sortCapitalNumbersSpecialChars(str_array74);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication77 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication78 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array80 = new java.lang.String[] { "" };
    java.lang.String str81 = calApplication78.printCalForYearMondayFirst(str_array80);
    java.util.List list82 = sortApplication77.sortCapitalNumbersSpecialChars(str_array80);
    java.util.List list83 = sortApplication71.numericalSortSimpleSpecialChars(str_array80);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication84 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication85 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication86 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array88 = new java.lang.String[] { "hi!" };
    java.lang.String str89 = commApplication86.commOnlySecond(str_array88);
    java.lang.String str90 = calApplication85.printCalForYear(str_array88);
    java.lang.String str91 = commApplication84.commOnlySecond(str_array88);
    java.util.List list92 = sortApplication71.sortAll(str_array88);
    java.util.List list93 = sortApplication32.numericalSortSimpleNumbers(str_array88);
    java.util.List list94 = sortApplication26.numericalSortSimpleCapital(str_array88);
    java.lang.String str95 = bcApplication13.bracket(str_array88);
    java.util.List list96 = sortApplication0.numericalSortSimpleCapitalNumber(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str30.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str42.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str47.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str54.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str59.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str89.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str91 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str91.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list96);

  }

  @Test
  public void test325() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test325"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    java.util.List list12 = sortApplication0.sortAll(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication13 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "" };
    java.lang.String str17 = calApplication14.printCalForYearMondayFirst(str_array16);
    java.util.List list18 = sortApplication13.sortCapitalNumbersSpecialChars(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = calApplication19.printCalForYearMondayFirst(str_array21);
    java.util.List list23 = sortApplication13.numericalSortSimpleCapitalNumber(str_array21);
    java.util.List list24 = sortApplication0.sortSimpleCapital(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication25 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "" };
    java.lang.String str29 = calApplication26.printCalForYearMondayFirst(str_array28);
    java.util.List list30 = sortApplication25.sortCapitalNumbersSpecialChars(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication31 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "" };
    java.lang.String str35 = calApplication32.printCalForYearMondayFirst(str_array34);
    java.util.List list36 = sortApplication31.sortCapitalNumbersSpecialChars(str_array34);
    java.util.List list37 = sortApplication25.numericalSortSimpleSpecialChars(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array42 = new java.lang.String[] { "hi!" };
    java.lang.String str43 = commApplication40.commOnlySecond(str_array42);
    java.lang.String str44 = calApplication39.printCalForYear(str_array42);
    java.lang.String str45 = commApplication38.commOnlySecond(str_array42);
    java.util.List list46 = sortApplication25.sortAll(str_array42);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication47 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication48 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array51 = new java.lang.String[] { "" };
    java.lang.String str52 = calApplication49.printCalForYearMondayFirst(str_array51);
    java.util.List list53 = sortApplication48.sortCapitalNumbersSpecialChars(str_array51);
    java.util.List list54 = sortApplication47.sortSimpleSpecialChars(str_array51);
    java.util.List list55 = sortApplication25.numericalSortCapitalSpecialChars(str_array51);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array60 = new java.lang.String[] { "hi!" };
    java.lang.String str61 = commApplication58.commOnlySecond(str_array60);
    java.lang.String str62 = calApplication57.printCalForYear(str_array60);
    java.lang.String str63 = commApplication56.commOnlySecond(str_array60);
    java.util.List list64 = sortApplication25.sortAll(str_array60);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication65 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array67 = new java.lang.String[] { "hi!" };
    java.lang.String str68 = commApplication65.commOnlySecond(str_array67);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication69 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication70 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication71 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array73 = new java.lang.String[] { "hi!" };
    java.lang.String str74 = commApplication71.commOnlySecond(str_array73);
    java.lang.String str75 = calApplication70.printCalForYear(str_array73);
    java.lang.String str76 = commApplication69.commOnlySecond(str_array73);
    java.lang.String str77 = commApplication65.commOnlySecond(str_array73);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication78 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication79 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication80 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array82 = new java.lang.String[] { "" };
    java.lang.String str83 = calApplication80.printCalForYearMondayFirst(str_array82);
    java.util.List list84 = sortApplication79.sortCapitalNumbersSpecialChars(str_array82);
    java.util.List list85 = sortApplication78.sortSimpleSpecialChars(str_array82);
    java.lang.String str86 = commApplication65.commAllMatches(str_array82);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication87 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication88 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication89 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array91 = new java.lang.String[] { "" };
    java.lang.String str92 = calApplication89.printCalForYearMondayFirst(str_array91);
    java.util.List list93 = sortApplication88.sortCapitalNumbersSpecialChars(str_array91);
    java.util.List list94 = sortApplication87.sortSimpleSpecialChars(str_array91);
    java.lang.String str95 = commApplication65.commAllMatches(str_array91);
    java.util.List list96 = sortApplication25.sortSimpleCapital(str_array91);
    java.util.List list97 = sortApplication0.sortSimpleSpecialChars(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str43.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str45.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str61.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str63.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str68.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str74.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str76.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str77.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str86.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str95 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str95.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list97);

  }

  @Test
  public void test326() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test326"); }


    sg.edu.nus.comp.cs4218.impl.app.HeadApplication headApplication0 = new sg.edu.nus.comp.cs4218.impl.app.HeadApplication();
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication1 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication2 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = calApplication3.printCalForYearMondayFirst(str_array5);
    java.util.List list7 = sortApplication2.sortCapitalNumbersSpecialChars(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication8 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array11 = new java.lang.String[] { "" };
    java.lang.String str12 = calApplication9.printCalForYearMondayFirst(str_array11);
    java.util.List list13 = sortApplication8.sortCapitalNumbersSpecialChars(str_array11);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!" };
    java.lang.String str18 = commApplication15.commOnlySecond(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "hi!" };
    java.lang.String str23 = commApplication20.commOnlySecond(str_array22);
    java.lang.String str24 = calApplication14.printCalForYear(str_array22);
    java.util.List list25 = sortApplication8.sortNumbersSpecialChars(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array29 = new java.lang.String[] { "" };
    java.lang.String str30 = calApplication27.printCalForYearMondayFirst(str_array29);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array33 = new java.lang.String[] { "" };
    java.lang.String str34 = calApplication31.printCalForYearMondayFirst(str_array33);
    java.lang.String str35 = calApplication27.printCal(str_array33);
    java.lang.String str36 = calApplication26.printCal(str_array33);
    java.util.List list37 = sortApplication8.numericalSortCapitalNumbersSpecialChars(str_array33);
    java.util.List list38 = sortApplication2.numericalSortCapitalNumbersSpecialChars(str_array33);
    java.lang.String[] str_array40 = new java.lang.String[] { "comm: terminated with error message comm: file is not readable" };
    java.util.List list41 = sortApplication2.numericalSortAll(str_array40);
    java.lang.String str42 = bcApplication1.bracket(str_array40);
    java.lang.String[] str_array43 = null;
    java.lang.String str44 = bcApplication1.not(str_array43);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array47 = new java.lang.String[] { "hi!" };
    java.lang.String str48 = commApplication45.commOnlySecond(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array52 = new java.lang.String[] { "hi!" };
    java.lang.String str53 = commApplication50.commOnlySecond(str_array52);
    java.lang.String str54 = calApplication49.printCalForYear(str_array52);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array57 = new java.lang.String[] { "hi!" };
    java.lang.String str58 = commApplication55.commOnlySecond(str_array57);
    java.lang.String str59 = calApplication49.printCalForYear(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication60 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication61 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array64 = new java.lang.String[] { "" };
    java.lang.String str65 = calApplication62.printCalForYearMondayFirst(str_array64);
    java.util.List list66 = sortApplication61.sortCapitalNumbersSpecialChars(str_array64);
    java.util.List list67 = sortApplication60.sortSimpleSpecialChars(str_array64);
    java.lang.String str68 = calApplication49.printCal(str_array64);
    java.lang.String str69 = commApplication45.commOnlySecond(str_array64);
    java.lang.String str70 = bcApplication1.divide(str_array64);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication71 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication72 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array74 = new java.lang.String[] { "" };
    java.lang.String str75 = calApplication72.printCalForYearMondayFirst(str_array74);
    java.util.List list76 = sortApplication71.sortCapitalNumbersSpecialChars(str_array74);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication77 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array79 = new java.lang.String[] { "" };
    java.lang.String str80 = calApplication77.printCalForYearMondayFirst(str_array79);
    java.util.List list81 = sortApplication71.numericalSortSimpleCapitalNumber(str_array79);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication82 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication83 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array85 = new java.lang.String[] { "" };
    java.lang.String str86 = calApplication83.printCalForYearMondayFirst(str_array85);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication87 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array89 = new java.lang.String[] { "hi!" };
    java.lang.String str90 = commApplication87.commOnlySecond(str_array89);
    java.lang.String str91 = calApplication83.printCalWithMondayFirst(str_array89);
    java.util.List list92 = sortApplication82.sortCapitalNumbers(str_array89);
    java.util.List list93 = sortApplication71.sortCapitalSpecialChars(str_array89);
    java.lang.String str94 = bcApplication1.multiply(str_array89);
    java.io.InputStream inputStream95 = null;
    java.io.OutputStream outputStream96 = null;
    // The following exception was thrown during execution in test generation
    try {
      headApplication0.run(str_array89, inputStream95, outputStream96);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.HeadException");
    } catch (sg.edu.nus.comp.cs4218.exception.HeadException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.HeadException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.HeadException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str23.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str48.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str53.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str58.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str69.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str90.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str94);

  }

  @Test
  public void test327() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test327"); }


    sg.edu.nus.comp.cs4218.impl.app.FmtApplication fmtApplication0 = new sg.edu.nus.comp.cs4218.impl.app.FmtApplication();
    java.lang.String[] str_array1 = null;
    java.io.InputStream inputStream2 = null;
    java.io.OutputStream outputStream3 = null;
    // The following exception was thrown during execution in test generation
    try {
      fmtApplication0.run(str_array1, inputStream2, outputStream3);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.FmtException");
    } catch (sg.edu.nus.comp.cs4218.exception.FmtException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.FmtException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.FmtException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test328() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test328"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    java.lang.String str5 = calApplication0.printCalForYear(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "hi!" };
    java.lang.String str9 = commApplication6.commOnlySecond(str_array8);
    java.lang.String str10 = calApplication0.printCalForYear(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication11 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array14 = new java.lang.String[] { "" };
    java.lang.String str15 = calApplication12.printCalForYearMondayFirst(str_array14);
    java.util.List list16 = sortApplication11.sortCapitalNumbersSpecialChars(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!" };
    java.lang.String str21 = commApplication18.commOnlySecond(str_array20);
    java.lang.String str22 = calApplication17.printCalForYear(str_array20);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array25 = new java.lang.String[] { "hi!" };
    java.lang.String str26 = commApplication23.commOnlySecond(str_array25);
    java.lang.String str27 = calApplication17.printCalForYear(str_array25);
    java.util.List list28 = sortApplication11.sortNumbersSpecialChars(str_array25);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "hi!" };
    java.lang.String str33 = commApplication30.commOnlySecond(str_array32);
    java.lang.String str34 = calApplication29.printCalForYear(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array37 = new java.lang.String[] { "hi!" };
    java.lang.String str38 = commApplication35.commOnlySecond(str_array37);
    java.lang.String str39 = calApplication29.printCalForYear(str_array37);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication40 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication41 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array44 = new java.lang.String[] { "" };
    java.lang.String str45 = calApplication42.printCalForYearMondayFirst(str_array44);
    java.util.List list46 = sortApplication41.sortCapitalNumbersSpecialChars(str_array44);
    java.util.List list47 = sortApplication40.sortSimpleSpecialChars(str_array44);
    java.lang.String str48 = calApplication29.printCal(str_array44);
    java.util.List list49 = sortApplication11.sortStringsSimple(str_array44);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication50 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array53 = new java.lang.String[] { "" };
    java.lang.String str54 = calApplication51.printCalForYearMondayFirst(str_array53);
    java.util.List list55 = sortApplication50.sortCapitalNumbersSpecialChars(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication56 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array59 = new java.lang.String[] { "" };
    java.lang.String str60 = calApplication57.printCalForYearMondayFirst(str_array59);
    java.util.List list61 = sortApplication56.sortCapitalNumbersSpecialChars(str_array59);
    java.util.List list62 = sortApplication50.numericalSortSimpleSpecialChars(str_array59);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication63 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication65 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array67 = new java.lang.String[] { "hi!" };
    java.lang.String str68 = commApplication65.commOnlySecond(str_array67);
    java.lang.String str69 = calApplication64.printCalForYear(str_array67);
    java.lang.String str70 = commApplication63.commOnlySecond(str_array67);
    java.util.List list71 = sortApplication50.sortAll(str_array67);
    java.util.List list72 = sortApplication11.numericalSortSimpleNumbers(str_array67);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication73 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication74 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array76 = new java.lang.String[] { "" };
    java.lang.String str77 = calApplication74.printCalForYearMondayFirst(str_array76);
    java.util.List list78 = sortApplication73.sortCapitalNumbersSpecialChars(str_array76);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication79 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array81 = new java.lang.String[] { "" };
    java.lang.String str82 = calApplication79.printCalForYearMondayFirst(str_array81);
    java.util.List list83 = sortApplication73.numericalSortSimpleCapitalNumber(str_array81);
    java.util.List list84 = sortApplication11.sortCapitalSpecialChars(str_array81);
    java.lang.String str85 = calApplication0.printCalWithMondayFirst(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str9.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str26.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str33.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str38.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str68.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str70.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str85);

  }

  @Test
  public void test329() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test329"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    java.util.List list5 = sortApplication0.numericalSortNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = calApplication8.printCalForYearMondayFirst(str_array10);
    java.util.List list12 = sortApplication7.sortCapitalNumbersSpecialChars(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication13 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "" };
    java.lang.String str17 = calApplication14.printCalForYearMondayFirst(str_array16);
    java.util.List list18 = sortApplication13.sortCapitalNumbersSpecialChars(str_array16);
    java.util.List list19 = sortApplication7.numericalSortSimpleSpecialChars(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array24 = new java.lang.String[] { "hi!" };
    java.lang.String str25 = commApplication22.commOnlySecond(str_array24);
    java.lang.String str26 = calApplication21.printCalForYear(str_array24);
    java.lang.String str27 = commApplication20.commOnlySecond(str_array24);
    java.util.List list28 = sortApplication7.sortAll(str_array24);
    java.util.List list29 = sortApplication6.sortSimpleCapitalSpecialChars(str_array24);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "" };
    java.lang.String str33 = calApplication30.printCalForYearMondayFirst(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "hi!" };
    java.lang.String str37 = commApplication34.commOnlySecond(str_array36);
    java.lang.String str38 = calApplication30.printCalWithMondayFirst(str_array36);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication39 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array42 = new java.lang.String[] { "" };
    java.lang.String str43 = calApplication40.printCalForYearMondayFirst(str_array42);
    java.util.List list44 = sortApplication39.sortCapitalNumbersSpecialChars(str_array42);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication45 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array48 = new java.lang.String[] { "" };
    java.lang.String str49 = calApplication46.printCalForYearMondayFirst(str_array48);
    java.util.List list50 = sortApplication45.sortCapitalNumbersSpecialChars(str_array48);
    java.util.List list51 = sortApplication39.numericalSortSimpleSpecialChars(str_array48);
    java.lang.String str52 = calApplication30.printCalForYear(str_array48);
    java.util.List list53 = sortApplication6.sortNumbers(str_array48);
    java.util.List list54 = sortApplication0.sortNumbers(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str25.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str27.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str37.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);

  }

  @Test
  public void test330() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test330"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    java.util.List list5 = sortApplication0.numericalSortNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication12.printCalForYear(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!" };
    java.lang.String str21 = commApplication18.commOnlySecond(str_array20);
    java.lang.String str22 = calApplication12.printCalForYear(str_array20);
    java.util.List list23 = sortApplication6.sortNumbersSpecialChars(str_array20);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array27 = new java.lang.String[] { "hi!" };
    java.lang.String str28 = commApplication25.commOnlySecond(str_array27);
    java.lang.String str29 = calApplication24.printCalForYear(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array32 = new java.lang.String[] { "hi!" };
    java.lang.String str33 = commApplication30.commOnlySecond(str_array32);
    java.lang.String str34 = calApplication24.printCalForYear(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication35 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication36 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "" };
    java.lang.String str40 = calApplication37.printCalForYearMondayFirst(str_array39);
    java.util.List list41 = sortApplication36.sortCapitalNumbersSpecialChars(str_array39);
    java.util.List list42 = sortApplication35.sortSimpleSpecialChars(str_array39);
    java.lang.String str43 = calApplication24.printCal(str_array39);
    java.util.List list44 = sortApplication6.sortStringsSimple(str_array39);
    java.util.List list45 = sortApplication0.sortSimpleCapitalNumber(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array48 = new java.lang.String[] { "hi!" };
    java.lang.String str49 = commApplication46.commOnlySecond(str_array48);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array54 = new java.lang.String[] { "hi!" };
    java.lang.String str55 = commApplication52.commOnlySecond(str_array54);
    java.lang.String str56 = calApplication51.printCalForYear(str_array54);
    java.lang.String str57 = commApplication50.commOnlySecond(str_array54);
    java.lang.String str58 = commApplication46.commOnlySecond(str_array54);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication59 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array62 = new java.lang.String[] { "" };
    java.lang.String str63 = calApplication60.printCalForYearMondayFirst(str_array62);
    java.util.List list64 = sortApplication59.sortCapitalNumbersSpecialChars(str_array62);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication65 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication66 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array68 = new java.lang.String[] { "hi!" };
    java.lang.String str69 = commApplication66.commOnlySecond(str_array68);
    java.lang.String str70 = calApplication65.printCalForYear(str_array68);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication71 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array73 = new java.lang.String[] { "hi!" };
    java.lang.String str74 = commApplication71.commOnlySecond(str_array73);
    java.lang.String str75 = calApplication65.printCalForYear(str_array73);
    java.util.List list76 = sortApplication59.sortNumbersSpecialChars(str_array73);
    java.lang.String str77 = commApplication46.commBothMathches(str_array73);
    java.util.List list78 = sortApplication0.sortSimpleCapitalSpecialChars(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str28.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str33.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str49.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str55.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str57.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str58.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str69.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str74.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str77.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);

  }

  @Test
  public void test331() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test331"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    java.util.List list7 = sortApplication0.sortSimpleSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication8 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array11 = new java.lang.String[] { "hi!" };
    java.lang.String str12 = commApplication9.commOnlySecond(str_array11);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!" };
    java.lang.String str18 = commApplication15.commOnlySecond(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    java.lang.String str20 = commApplication13.commOnlySecond(str_array17);
    java.lang.String str21 = commApplication9.commOnlySecond(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication22 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = calApplication24.printCalForYearMondayFirst(str_array26);
    java.util.List list28 = sortApplication23.sortCapitalNumbersSpecialChars(str_array26);
    java.util.List list29 = sortApplication22.sortSimpleSpecialChars(str_array26);
    java.lang.String str30 = commApplication9.commAllMatches(str_array26);
    java.lang.String str31 = bcApplication8.lessThan(str_array26);
    java.util.List list32 = sortApplication0.sortSimpleCapital(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "hi!" };
    java.lang.String str36 = commApplication33.commOnlySecond(str_array35);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array41 = new java.lang.String[] { "hi!" };
    java.lang.String str42 = commApplication39.commOnlySecond(str_array41);
    java.lang.String str43 = calApplication38.printCalForYear(str_array41);
    java.lang.String str44 = commApplication37.commOnlySecond(str_array41);
    java.lang.String str45 = commApplication33.commOnlySecond(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication46 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array49 = new java.lang.String[] { "" };
    java.lang.String str50 = calApplication47.printCalForYearMondayFirst(str_array49);
    java.util.List list51 = sortApplication46.sortCapitalNumbersSpecialChars(str_array49);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array55 = new java.lang.String[] { "hi!" };
    java.lang.String str56 = commApplication53.commOnlySecond(str_array55);
    java.lang.String str57 = calApplication52.printCalForYear(str_array55);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array60 = new java.lang.String[] { "hi!" };
    java.lang.String str61 = commApplication58.commOnlySecond(str_array60);
    java.lang.String str62 = calApplication52.printCalForYear(str_array60);
    java.util.List list63 = sortApplication46.sortNumbersSpecialChars(str_array60);
    java.lang.String str64 = commApplication33.commBothMathches(str_array60);
    java.util.List list65 = sortApplication0.numericalSortStringsSimple(str_array60);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication66 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication67 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array69 = new java.lang.String[] { "" };
    java.lang.String str70 = calApplication67.printCalForYearMondayFirst(str_array69);
    java.util.List list71 = sortApplication66.sortCapitalNumbersSpecialChars(str_array69);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication72 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array74 = new java.lang.String[] { "" };
    java.lang.String str75 = calApplication72.printCalForYearMondayFirst(str_array74);
    java.util.List list76 = sortApplication66.numericalSortSimpleCapitalNumber(str_array74);
    java.io.InputStream inputStream77 = null;
    java.io.OutputStream outputStream78 = null;
    // The following exception was thrown during execution in test generation
    try {
      sortApplication0.run(str_array74, inputStream77, outputStream78);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
    } catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.SortException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str30.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str36.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str42.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str44.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str45.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str56.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str61.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str64.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);

  }

  @Test
  public void test332() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test332"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.util.List list5 = sortApplication0.sortCapitalNumbersSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = calApplication7.printCalForYearMondayFirst(str_array9);
    java.util.List list11 = sortApplication6.sortCapitalNumbersSpecialChars(str_array9);
    java.util.List list12 = sortApplication0.numericalSortSimpleSpecialChars(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication13 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array16 = new java.lang.String[] { "hi!" };
    java.lang.String str17 = commApplication14.commOnlySecond(str_array16);
    java.util.List list18 = sortApplication13.numericalSortNumbersSpecialChars(str_array16);
    java.util.List list19 = sortApplication0.numericalSortNumbers(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str17.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);

  }

  @Test
  public void test333() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test333"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!" };
    java.lang.String str16 = commApplication13.commOnlySecond(str_array15);
    java.lang.String str17 = calApplication7.printCalForYear(str_array15);
    java.util.List list18 = sortApplication1.sortNumbersSpecialChars(str_array15);
    java.lang.String str19 = bcApplication0.notEqual(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication20 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication21 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication22 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array25 = new java.lang.String[] { "" };
    java.lang.String str26 = calApplication23.printCalForYearMondayFirst(str_array25);
    java.util.List list27 = sortApplication22.sortCapitalNumbersSpecialChars(str_array25);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication28 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array31 = new java.lang.String[] { "" };
    java.lang.String str32 = calApplication29.printCalForYearMondayFirst(str_array31);
    java.util.List list33 = sortApplication28.sortCapitalNumbersSpecialChars(str_array31);
    java.util.List list34 = sortApplication22.numericalSortSimpleSpecialChars(str_array31);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "hi!" };
    java.lang.String str40 = commApplication37.commOnlySecond(str_array39);
    java.lang.String str41 = calApplication36.printCalForYear(str_array39);
    java.lang.String str42 = commApplication35.commOnlySecond(str_array39);
    java.util.List list43 = sortApplication22.sortAll(str_array39);
    java.util.List list44 = sortApplication21.sortSimpleCapitalSpecialChars(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication45 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array48 = new java.lang.String[] { "hi!" };
    java.lang.String str49 = commApplication46.commOnlySecond(str_array48);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array54 = new java.lang.String[] { "hi!" };
    java.lang.String str55 = commApplication52.commOnlySecond(str_array54);
    java.lang.String str56 = calApplication51.printCalForYear(str_array54);
    java.lang.String str57 = commApplication50.commOnlySecond(str_array54);
    java.lang.String str58 = commApplication46.commOnlySecond(str_array54);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication59 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication60 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array63 = new java.lang.String[] { "" };
    java.lang.String str64 = calApplication61.printCalForYearMondayFirst(str_array63);
    java.util.List list65 = sortApplication60.sortCapitalNumbersSpecialChars(str_array63);
    java.util.List list66 = sortApplication59.sortSimpleSpecialChars(str_array63);
    java.lang.String str67 = commApplication46.commAllMatches(str_array63);
    java.lang.String str68 = bcApplication45.lessThan(str_array63);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication69 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array71 = new java.lang.String[] { "" };
    java.lang.String str72 = calApplication69.printCalForYearMondayFirst(str_array71);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication73 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array75 = new java.lang.String[] { "" };
    java.lang.String str76 = calApplication73.printCalForYearMondayFirst(str_array75);
    java.lang.String str77 = calApplication69.printCal(str_array75);
    java.lang.String str78 = bcApplication45.and(str_array75);
    java.util.List list79 = sortApplication21.numericalSortSimpleCapital(str_array75);
    java.lang.String str80 = bcApplication20.notEqual(str_array75);
    java.lang.String str81 = bcApplication0.negate(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str16.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str40.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str42.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str49.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str55.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str57.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str58.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str67.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str81);

  }

  @Test
  public void test334() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test334"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    java.util.List list5 = sortApplication0.sortSimpleCapitalSpecialChars(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array8 = new java.lang.String[] { "hi!" };
    java.lang.String str9 = commApplication6.commOnlySecond(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array13 = new java.lang.String[] { "hi!" };
    java.lang.String str14 = commApplication11.commOnlySecond(str_array13);
    java.lang.String str15 = calApplication10.printCalForYear(str_array13);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "hi!" };
    java.lang.String str19 = commApplication16.commOnlySecond(str_array18);
    java.lang.String str20 = calApplication10.printCalForYear(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication21 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication22 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array25 = new java.lang.String[] { "" };
    java.lang.String str26 = calApplication23.printCalForYearMondayFirst(str_array25);
    java.util.List list27 = sortApplication22.sortCapitalNumbersSpecialChars(str_array25);
    java.util.List list28 = sortApplication21.sortSimpleSpecialChars(str_array25);
    java.lang.String str29 = calApplication10.printCal(str_array25);
    java.lang.String str30 = commApplication6.commOnlySecond(str_array25);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "hi!" };
    java.lang.String str35 = commApplication32.commOnlySecond(str_array34);
    java.lang.String str36 = calApplication31.printCalForYear(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array39 = new java.lang.String[] { "hi!" };
    java.lang.String str40 = commApplication37.commOnlySecond(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array45 = new java.lang.String[] { "hi!" };
    java.lang.String str46 = commApplication43.commOnlySecond(str_array45);
    java.lang.String str47 = calApplication42.printCalForYear(str_array45);
    java.lang.String str48 = commApplication41.commOnlySecond(str_array45);
    java.lang.String str49 = commApplication37.commOnlySecond(str_array45);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication50 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array53 = new java.lang.String[] { "" };
    java.lang.String str54 = calApplication51.printCalForYearMondayFirst(str_array53);
    java.util.List list55 = sortApplication50.sortCapitalNumbersSpecialChars(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array59 = new java.lang.String[] { "hi!" };
    java.lang.String str60 = commApplication57.commOnlySecond(str_array59);
    java.lang.String str61 = calApplication56.printCalForYear(str_array59);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array64 = new java.lang.String[] { "hi!" };
    java.lang.String str65 = commApplication62.commOnlySecond(str_array64);
    java.lang.String str66 = calApplication56.printCalForYear(str_array64);
    java.util.List list67 = sortApplication50.sortNumbersSpecialChars(str_array64);
    java.lang.String str68 = commApplication37.commBothMathches(str_array64);
    java.lang.String str69 = calApplication31.printCalForMonthYearMondayFirst(str_array64);
    java.lang.String str70 = commApplication6.commNoMatches(str_array64);
    java.util.List list71 = sortApplication0.sortCapitalSpecialChars(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str9.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str14.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str30.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str35.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str40.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str46.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str48.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str49.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str60.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str65.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str68.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str70.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);

  }

  @Test
  public void test335() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test335"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array5 = new java.lang.String[] { "hi!" };
    java.lang.String str6 = commApplication3.commOnlySecond(str_array5);
    java.lang.String str7 = calApplication2.printCalForYear(str_array5);
    java.lang.String str8 = commApplication1.commOnlySecond(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array11 = new java.lang.String[] { "hi!" };
    java.lang.String str12 = commApplication9.commOnlySecond(str_array11);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!" };
    java.lang.String str18 = commApplication15.commOnlySecond(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    java.lang.String str20 = commApplication13.commOnlySecond(str_array17);
    java.lang.String str21 = commApplication9.commOnlySecond(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication22 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array25 = new java.lang.String[] { "" };
    java.lang.String str26 = calApplication23.printCalForYearMondayFirst(str_array25);
    java.util.List list27 = sortApplication22.sortCapitalNumbersSpecialChars(str_array25);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array31 = new java.lang.String[] { "hi!" };
    java.lang.String str32 = commApplication29.commOnlySecond(str_array31);
    java.lang.String str33 = calApplication28.printCalForYear(str_array31);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array36 = new java.lang.String[] { "hi!" };
    java.lang.String str37 = commApplication34.commOnlySecond(str_array36);
    java.lang.String str38 = calApplication28.printCalForYear(str_array36);
    java.util.List list39 = sortApplication22.sortNumbersSpecialChars(str_array36);
    java.lang.String str40 = commApplication9.commBothMathches(str_array36);
    java.lang.String str41 = commApplication1.commOnlyFirst(str_array36);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication42 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = calApplication44.printCalForYearMondayFirst(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array50 = new java.lang.String[] { "" };
    java.lang.String str51 = calApplication48.printCalForYearMondayFirst(str_array50);
    java.lang.String str52 = calApplication44.printCal(str_array50);
    java.lang.String str53 = calApplication43.printCal(str_array50);
    java.lang.String str54 = bcApplication42.negate(str_array50);
    java.lang.String str55 = commApplication1.commAllMatches(str_array50);
    java.lang.String str56 = bcApplication0.divide(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str6.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str8.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str21.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str32.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str37.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str40.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str41.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str55.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);

  }

  @Test
  public void test336() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test336"); }


    sg.edu.nus.comp.cs4218.impl.app.HeadApplication headApplication0 = new sg.edu.nus.comp.cs4218.impl.app.HeadApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "hi!" };
    java.lang.String str5 = commApplication2.commOnlySecond(str_array4);
    java.util.List list6 = sortApplication1.numericalSortNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!" };
    java.lang.String str11 = commApplication8.commOnlySecond(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array15 = new java.lang.String[] { "" };
    java.lang.String str16 = calApplication13.printCalForYearMondayFirst(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "hi!" };
    java.lang.String str20 = commApplication17.commOnlySecond(str_array19);
    java.lang.String str21 = calApplication13.printCalWithMondayFirst(str_array19);
    java.lang.String str22 = calApplication7.printCalWithMondayFirst(str_array19);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array25 = new java.lang.String[] { "" };
    java.lang.String str26 = calApplication23.printCalForYearMondayFirst(str_array25);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array29 = new java.lang.String[] { "" };
    java.lang.String str30 = calApplication27.printCalForYearMondayFirst(str_array29);
    java.lang.String str31 = calApplication23.printCal(str_array29);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "hi!" };
    java.lang.String str36 = commApplication33.commOnlySecond(str_array35);
    java.lang.String str37 = calApplication32.printCalForYear(str_array35);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "hi!" };
    java.lang.String str41 = commApplication38.commOnlySecond(str_array40);
    java.lang.String str42 = calApplication32.printCalForYear(str_array40);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication43 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication44 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array47 = new java.lang.String[] { "" };
    java.lang.String str48 = calApplication45.printCalForYearMondayFirst(str_array47);
    java.util.List list49 = sortApplication44.sortCapitalNumbersSpecialChars(str_array47);
    java.util.List list50 = sortApplication43.sortSimpleSpecialChars(str_array47);
    java.lang.String str51 = calApplication32.printCal(str_array47);
    java.lang.String str52 = calApplication23.printCalForMonthYear(str_array47);
    java.lang.String str53 = calApplication7.printCal(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array56 = new java.lang.String[] { "" };
    java.lang.String str57 = calApplication54.printCalForYearMondayFirst(str_array56);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array60 = new java.lang.String[] { "" };
    java.lang.String str61 = calApplication58.printCalForYearMondayFirst(str_array60);
    java.lang.String str62 = calApplication54.printCal(str_array60);
    java.lang.String str63 = calApplication7.printCalForMonthYearMondayFirst(str_array60);
    java.util.List list64 = sortApplication1.numericalSortSpecialChars(str_array60);
    java.io.InputStream inputStream65 = null;
    java.io.OutputStream outputStream66 = null;
    // The following exception was thrown during execution in test generation
    try {
      headApplication0.run(str_array60, inputStream65, outputStream66);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.HeadException");
    } catch (sg.edu.nus.comp.cs4218.exception.HeadException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.HeadException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.HeadException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str5.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str11.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str36.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str41.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);

  }

  @Test
  public void test337() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test337"); }


    sg.edu.nus.comp.cs4218.impl.app.CatApplication catApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CatApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = calApplication2.printCalForYearMondayFirst(str_array4);
    java.util.List list6 = sortApplication1.sortCapitalNumbersSpecialChars(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = calApplication8.printCalForYearMondayFirst(str_array10);
    java.util.List list12 = sortApplication7.sortCapitalNumbersSpecialChars(str_array10);
    java.util.List list13 = sortApplication1.numericalSortSimpleSpecialChars(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!" };
    java.lang.String str18 = commApplication15.commOnlySecond(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = calApplication20.printCalForYearMondayFirst(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array26 = new java.lang.String[] { "hi!" };
    java.lang.String str27 = commApplication24.commOnlySecond(str_array26);
    java.lang.String str28 = calApplication20.printCalWithMondayFirst(str_array26);
    java.lang.String str29 = calApplication14.printCalWithMondayFirst(str_array26);
    java.util.List list30 = sortApplication1.numericalSortStringsSimple(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication31 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication32 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array35 = new java.lang.String[] { "" };
    java.lang.String str36 = calApplication33.printCalForYearMondayFirst(str_array35);
    java.util.List list37 = sortApplication32.sortCapitalNumbersSpecialChars(str_array35);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array41 = new java.lang.String[] { "hi!" };
    java.lang.String str42 = commApplication39.commOnlySecond(str_array41);
    java.lang.String str43 = calApplication38.printCalForYear(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array46 = new java.lang.String[] { "hi!" };
    java.lang.String str47 = commApplication44.commOnlySecond(str_array46);
    java.lang.String str48 = calApplication38.printCalForYear(str_array46);
    java.util.List list49 = sortApplication32.sortNumbersSpecialChars(str_array46);
    java.lang.String str50 = bcApplication31.notEqual(str_array46);
    java.util.List list51 = sortApplication1.numericalSortSimpleCapital(str_array46);
    java.io.InputStream inputStream52 = null;
    java.io.OutputStream outputStream53 = null;
    // The following exception was thrown during execution in test generation
    try {
      catApplication0.run(str_array46, inputStream52, outputStream53);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CatException");
    } catch (sg.edu.nus.comp.cs4218.exception.CatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.CatException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CatException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str18.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str27.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str42.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str47.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);

  }

  @Test
  public void test338() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test338"); }


    sg.edu.nus.comp.cs4218.impl.app.DateApplication dateApplication0 = new sg.edu.nus.comp.cs4218.impl.app.DateApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array7 = new java.lang.String[] { "" };
    java.lang.String str8 = calApplication5.printCalForYearMondayFirst(str_array7);
    java.lang.String str9 = calApplication1.printCal(str_array7);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array13 = new java.lang.String[] { "hi!" };
    java.lang.String str14 = commApplication11.commOnlySecond(str_array13);
    java.lang.String str15 = calApplication10.printCalForYear(str_array13);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array18 = new java.lang.String[] { "hi!" };
    java.lang.String str19 = commApplication16.commOnlySecond(str_array18);
    java.lang.String str20 = calApplication10.printCalForYear(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication21 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication22 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array25 = new java.lang.String[] { "" };
    java.lang.String str26 = calApplication23.printCalForYearMondayFirst(str_array25);
    java.util.List list27 = sortApplication22.sortCapitalNumbersSpecialChars(str_array25);
    java.util.List list28 = sortApplication21.sortSimpleSpecialChars(str_array25);
    java.lang.String str29 = calApplication10.printCal(str_array25);
    java.lang.String str30 = calApplication1.printCalForMonthYear(str_array25);
    java.io.InputStream inputStream31 = null;
    java.io.OutputStream outputStream32 = null;
    // The following exception was thrown during execution in test generation
    try {
      dateApplication0.run(str_array25, inputStream31, outputStream32);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException");
    } catch (sg.edu.nus.comp.cs4218.exception.DateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.DateException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str14.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str19.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);

  }

  @Test
  public void test339() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test339"); }


    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication2 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = calApplication3.printCalForYearMondayFirst(str_array5);
    java.util.List list7 = sortApplication2.sortCapitalNumbersSpecialChars(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication8 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array11 = new java.lang.String[] { "" };
    java.lang.String str12 = calApplication9.printCalForYearMondayFirst(str_array11);
    java.util.List list13 = sortApplication8.sortCapitalNumbersSpecialChars(str_array11);
    java.util.List list14 = sortApplication2.numericalSortSimpleSpecialChars(str_array11);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array19 = new java.lang.String[] { "hi!" };
    java.lang.String str20 = commApplication17.commOnlySecond(str_array19);
    java.lang.String str21 = calApplication16.printCalForYear(str_array19);
    java.lang.String str22 = commApplication15.commOnlySecond(str_array19);
    java.util.List list23 = sortApplication2.sortAll(str_array19);
    java.util.List list24 = sortApplication1.sortSimpleCapitalSpecialChars(str_array19);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication25 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "" };
    java.lang.String str29 = calApplication26.printCalForYearMondayFirst(str_array28);
    java.util.List list30 = sortApplication25.sortCapitalNumbersSpecialChars(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication31 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array34 = new java.lang.String[] { "" };
    java.lang.String str35 = calApplication32.printCalForYearMondayFirst(str_array34);
    java.util.List list36 = sortApplication31.sortCapitalNumbersSpecialChars(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array40 = new java.lang.String[] { "hi!" };
    java.lang.String str41 = commApplication38.commOnlySecond(str_array40);
    java.lang.String str42 = calApplication37.printCalForYear(str_array40);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array45 = new java.lang.String[] { "hi!" };
    java.lang.String str46 = commApplication43.commOnlySecond(str_array45);
    java.lang.String str47 = calApplication37.printCalForYear(str_array45);
    java.util.List list48 = sortApplication31.sortNumbersSpecialChars(str_array45);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array52 = new java.lang.String[] { "" };
    java.lang.String str53 = calApplication50.printCalForYearMondayFirst(str_array52);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array56 = new java.lang.String[] { "" };
    java.lang.String str57 = calApplication54.printCalForYearMondayFirst(str_array56);
    java.lang.String str58 = calApplication50.printCal(str_array56);
    java.lang.String str59 = calApplication49.printCal(str_array56);
    java.util.List list60 = sortApplication31.numericalSortCapitalNumbersSpecialChars(str_array56);
    java.util.List list61 = sortApplication25.numericalSortCapitalNumbersSpecialChars(str_array56);
    java.util.List list62 = sortApplication1.sortSimpleCapitalNumber(str_array56);
    java.lang.String str63 = commApplication0.commOnlySecond(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str20.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str22.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str41.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str46.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"+ "'", str63.equals("comm: terminated with error message comm: /Users/andhieka/Documents/git-projects/cs4218_baconandeggs (Is a directory)"));

  }

  @Test
  public void test340() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test340"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "hi!" };
    java.lang.String str4 = commApplication1.commOnlySecond(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!" };
    java.lang.String str10 = commApplication7.commOnlySecond(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    java.lang.String str12 = commApplication5.commOnlySecond(str_array9);
    java.lang.String str13 = commApplication1.commOnlySecond(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication14 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array17 = new java.lang.String[] { "" };
    java.lang.String str18 = calApplication15.printCalForYearMondayFirst(str_array17);
    java.util.List list19 = sortApplication14.sortCapitalNumbersSpecialChars(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array23 = new java.lang.String[] { "hi!" };
    java.lang.String str24 = commApplication21.commOnlySecond(str_array23);
    java.lang.String str25 = calApplication20.printCalForYear(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!" };
    java.lang.String str29 = commApplication26.commOnlySecond(str_array28);
    java.lang.String str30 = calApplication20.printCalForYear(str_array28);
    java.util.List list31 = sortApplication14.sortNumbersSpecialChars(str_array28);
    java.lang.String str32 = commApplication1.commBothMathches(str_array28);
    java.lang.String str33 = bcApplication0.add(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication34 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication35 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array38 = new java.lang.String[] { "" };
    java.lang.String str39 = calApplication36.printCalForYearMondayFirst(str_array38);
    java.util.List list40 = sortApplication35.sortCapitalNumbersSpecialChars(str_array38);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication41 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array44 = new java.lang.String[] { "" };
    java.lang.String str45 = calApplication42.printCalForYearMondayFirst(str_array44);
    java.util.List list46 = sortApplication41.sortCapitalNumbersSpecialChars(str_array44);
    java.util.List list47 = sortApplication35.numericalSortSimpleSpecialChars(str_array44);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array52 = new java.lang.String[] { "hi!" };
    java.lang.String str53 = commApplication50.commOnlySecond(str_array52);
    java.lang.String str54 = calApplication49.printCalForYear(str_array52);
    java.lang.String str55 = commApplication48.commOnlySecond(str_array52);
    java.util.List list56 = sortApplication35.sortAll(str_array52);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication57 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication58 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication59 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array61 = new java.lang.String[] { "" };
    java.lang.String str62 = calApplication59.printCalForYearMondayFirst(str_array61);
    java.util.List list63 = sortApplication58.sortCapitalNumbersSpecialChars(str_array61);
    java.util.List list64 = sortApplication57.sortSimpleSpecialChars(str_array61);
    java.util.List list65 = sortApplication35.numericalSortCapitalSpecialChars(str_array61);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication66 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication67 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array70 = new java.lang.String[] { "hi!" };
    java.lang.String str71 = commApplication68.commOnlySecond(str_array70);
    java.lang.String str72 = calApplication67.printCalForYear(str_array70);
    java.lang.String str73 = commApplication66.commOnlySecond(str_array70);
    java.util.List list74 = sortApplication35.sortAll(str_array70);
    java.lang.String str75 = bcApplication34.equalEqual(str_array70);
    java.lang.String str76 = bcApplication0.greaterThanOrEqual(str_array70);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication77 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array79 = new java.lang.String[] { "hi!" };
    java.lang.String str80 = commApplication77.commOnlySecond(str_array79);
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication81 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication82 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CommApplication commApplication83 = new sg.edu.nus.comp.cs4218.impl.app.CommApplication();
    java.lang.String[] str_array85 = new java.lang.String[] { "hi!" };
    java.lang.String str86 = commApplication83.commOnlySecond(str_array85);
    java.lang.String str87 = calApplication82.printCalForYear(str_array85);
    java.lang.String str88 = commApplication81.commOnlySecond(str_array85);
    java.lang.String str89 = commApplication77.commOnlySecond(str_array85);
    java.io.InputStream inputStream90 = null;
    java.io.OutputStream outputStream91 = null;
    bcApplication0.run(str_array85, inputStream90, outputStream91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str4.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str10.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str12.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str13.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str24.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str29.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str32.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str53.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str55.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str71.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str73.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str80.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str86.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str88.equals("comm: terminated with error message comm: file is not readable"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "comm: terminated with error message comm: file is not readable"+ "'", str89.equals("comm: terminated with error message comm: file is not readable"));

  }

}
